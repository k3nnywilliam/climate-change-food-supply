/*! For license information please see bundle.4a8f014891f0dbc14fa1.js.LICENSE.txt */
(()=>{"use strict";var t={921:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"#gmv91QcQMip_xjV_gDj7 {\n    font-family: 'Lato';\n    text-align: center;\n    padding: 30px;\n    font-size: 28px;\n    letter-spacing: -0.01em;\n    color: #333;\n  }\n\n#M0YnSc4FTDg_oKyHCGqP {\n  font-family: 'Lato';\n  text-align: center;\n}","",{version:3,sources:["webpack://./public/src/components/App.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,WAAW;EACb;;AAEF;EACE,mBAAmB;EACnB,kBAAkB;AACpB",sourcesContent:["#title {\n    font-family: 'Lato';\n    text-align: center;\n    padding: 30px;\n    font-size: 28px;\n    letter-spacing: -0.01em;\n    color: #333;\n  }\n\n#header {\n  font-family: 'Lato';\n  text-align: center;\n}"],sourceRoot:""}]),a.locals={title:"gmv91QcQMip_xjV_gDj7",header:"M0YnSc4FTDg_oKyHCGqP"};const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},418:t=>{var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var a,s,l=i(t),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(e){s=e(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},448:(t,e,n)=>{var r=n(294),i=n(418),o=n(840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(t,e){c(t,e),c(t+"Capture",e)}function c(t,e){for(l[t]=e,t=0;t<e.length;t++)s.add(e[t])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(t,e,n,r,i,o,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){b[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];b[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){b[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){b[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){b[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){b[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){b[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){b[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){b[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(t){return t[1].toUpperCase()}function x(t,e,n,r){var i=b.hasOwnProperty(e)?b[e]:null;(null!==i?0===i.type:!r&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,n,r){if(null==e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,i,r)&&(n=null),r||null===i?function(t){return!!h.call(g,t)||!h.call(p,t)&&(f.test(t)?g[t]=!0:(p[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):i.mustUseProperty?t[i.propertyName]=null===n?3!==i.type&&"":n:(e=i.attributeName,r=i.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,M=60108,E=60114,C=60109,P=60110,O=60112,T=60113,D=60120,A=60115,L=60116,R=60121,z=60128,N=60129,I=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;w=B("react.element"),k=B("react.portal"),S=B("react.fragment"),M=B("react.strict_mode"),E=B("react.profiler"),C=B("react.provider"),P=B("react.context"),O=B("react.forward_ref"),T=B("react.suspense"),D=B("react.suspense_list"),A=B("react.memo"),L=B("react.lazy"),R=B("react.block"),B("react.scope"),z=B("react.opaque.id"),N=B("react.debug_trace_mode"),I=B("react.offscreen"),F=B("react.legacy_hidden")}var V,j="function"==typeof Symbol&&Symbol.iterator;function W(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=j&&t[j]||t["@@iterator"])?t:null}function H(t){if(void 0===V)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);V=e&&e[1]||""}return"\n"+V+t}var U=!1;function $(t,e){if(!t||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var r=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){r=t}t.call(e.prototype)}else{try{throw Error()}catch(t){r=t}t()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?H(t):""}function Y(t){switch(t.tag){case 5:return H(t.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return $(t.type,!1);case 11:return $(t.type.render,!1);case 22:return $(t.type._render,!1);case 1:return $(t.type,!0);default:return""}}function q(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case S:return"Fragment";case k:return"Portal";case E:return"Profiler";case M:return"StrictMode";case T:return"Suspense";case D:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case P:return(t.displayName||"Context")+".Consumer";case C:return(t._context.displayName||"Context")+".Provider";case O:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case A:return q(t.type);case R:return q(t._render);case L:e=t._payload,t=t._init;try{return q(t(e))}catch(t){}}return null}function X(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function Q(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function K(t){t._valueTracker||(t._valueTracker=function(t){var e=Q(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return i.call(this)},set:function(t){r=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function Z(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Q(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}function G(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function J(t,e){var n=e.checked;return i({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function tt(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=X(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&x(t,"checked",e,!1)}function nt(t,e){et(t,e);var n=X(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?it(t,e.type,n):e.hasOwnProperty("defaultValue")&&it(t,e.type,X(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function rt(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function it(t,e,n){"number"===e&&G(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ot(t,e){return t=i({children:void 0},e),(e=function(t){var e="";return r.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,n,r){if(t=t.options,e){e={};for(var i=0;i<n.length;i++)e["$"+n[i]]=!0;for(n=0;n<t.length;n++)i=e.hasOwnProperty("$"+t[n].value),t[n].selected!==i&&(t[n].selected=i),i&&r&&(t[n].defaultSelected=!0)}else{for(n=""+X(n),e=null,i=0;i<t.length;i++){if(t[i].value===n)return t[i].selected=!0,void(r&&(t[i].defaultSelected=!0));null!==e||t[i].disabled||(e=t[i])}null!==e&&(e.selected=!0)}}function st(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return i({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function lt(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:X(n)}}function ut(t,e){var n=X(e.value),r=X(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=r&&(t.defaultValue=""+r)}function ct(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var dt="http://www.w3.org/1999/xhtml";function ft(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ht(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?ft(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var pt,gt,mt=(gt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((pt=pt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=pt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction((function(){return gt(t,e)}))}:gt);function bt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var yt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},vt=["Webkit","ms","Moz","O"];function xt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||yt.hasOwnProperty(t)&&yt[t]?(""+e).trim():e+"px"}function _t(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=xt(n,e[n],r);"float"===n&&(n="cssFloat"),r?t.setProperty(n,i):t[n]=i}}Object.keys(yt).forEach((function(t){vt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),yt[e]=yt[t]}))}));var wt=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function kt(t,e){if(e){if(wt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function St(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Mt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Et=null,Ct=null,Pt=null;function Ot(t){if(t=ni(t)){if("function"!=typeof Et)throw Error(a(280));var e=t.stateNode;e&&(e=ii(e),Et(t.stateNode,t.type,e))}}function Tt(t){Ct?Pt?Pt.push(t):Pt=[t]:Ct=t}function Dt(){if(Ct){var t=Ct,e=Pt;if(Pt=Ct=null,Ot(t),e)for(t=0;t<e.length;t++)Ot(e[t])}}function At(t,e){return t(e)}function Lt(t,e,n,r,i){return t(e,n,r,i)}function Rt(){}var zt=At,Nt=!1,It=!1;function Ft(){null===Ct&&null===Pt||(Rt(),Dt())}function Bt(t,e){var n=t.stateNode;if(null===n)return null;var r=ii(n);if(null===r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(a(231,e,typeof n));return n}var Vt=!1;if(d)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){Vt=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(gt){Vt=!1}function Wt(t,e,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{e.apply(n,u)}catch(t){this.onError(t)}}var Ht=!1,Ut=null,$t=!1,Yt=null,qt={onError:function(t){Ht=!0,Ut=t}};function Xt(t,e,n,r,i,o,a,s,l){Ht=!1,Ut=null,Wt.apply(qt,arguments)}function Qt(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Kt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function Zt(t){if(Qt(t)!==t)throw Error(a(188))}function Gt(t){if(t=function(t){var e=t.alternate;if(!e){if(null===(e=Qt(t)))throw Error(a(188));return e!==t?null:t}for(var n=t,r=e;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Zt(i),t;if(o===r)return Zt(i),e;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?t:e}(t),!t)return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function Jt(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var te,ee,ne,re,ie=!1,oe=[],ae=null,se=null,le=null,ue=new Map,ce=new Map,de=[],fe="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function he(t,e,n,r,i){return{blockedOn:t,domEventName:e,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pe(t,e){switch(t){case"focusin":case"focusout":ae=null;break;case"dragenter":case"dragleave":se=null;break;case"mouseover":case"mouseout":le=null;break;case"pointerover":case"pointerout":ue.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ce.delete(e.pointerId)}}function ge(t,e,n,r,i,o){return null===t||t.nativeEvent!==o?(t=he(e,n,r,i,o),null!==e&&null!==(e=ni(e))&&ee(e),t):(t.eventSystemFlags|=r,e=t.targetContainers,null!==i&&-1===e.indexOf(i)&&e.push(i),t)}function me(t){var e=ei(t.target);if(null!==e){var n=Qt(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Kt(n)))return t.blockedOn=e,void re(t.lanePriority,(function(){o.unstable_runWithPriority(t.priority,(function(){ne(n)}))}))}else if(3===e&&n.stateNode.hydrate)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function be(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=Ge(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=ni(n))&&ee(e),t.blockedOn=n,!1;e.shift()}return!0}function ye(t,e,n){be(t)&&n.delete(e)}function ve(){for(ie=!1;0<oe.length;){var t=oe[0];if(null!==t.blockedOn){null!==(t=ni(t.blockedOn))&&te(t);break}for(var e=t.targetContainers;0<e.length;){var n=Ge(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n){t.blockedOn=n;break}e.shift()}null===t.blockedOn&&oe.shift()}null!==ae&&be(ae)&&(ae=null),null!==se&&be(se)&&(se=null),null!==le&&be(le)&&(le=null),ue.forEach(ye),ce.forEach(ye)}function xe(t,e){t.blockedOn===e&&(t.blockedOn=null,ie||(ie=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ve)))}function _e(t){function e(e){return xe(e,t)}if(0<oe.length){xe(oe[0],t);for(var n=1;n<oe.length;n++){var r=oe[n];r.blockedOn===t&&(r.blockedOn=null)}}for(null!==ae&&xe(ae,t),null!==se&&xe(se,t),null!==le&&xe(le,t),ue.forEach(e),ce.forEach(e),n=0;n<de.length;n++)(r=de[n]).blockedOn===t&&(r.blockedOn=null);for(;0<de.length&&null===(n=de[0]).blockedOn;)me(n),null===n.blockedOn&&de.shift()}function we(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var ke={animationend:we("Animation","AnimationEnd"),animationiteration:we("Animation","AnimationIteration"),animationstart:we("Animation","AnimationStart"),transitionend:we("Transition","TransitionEnd")},Se={},Me={};function Ee(t){if(Se[t])return Se[t];if(!ke[t])return t;var e,n=ke[t];for(e in n)if(n.hasOwnProperty(e)&&e in Me)return Se[t]=n[e];return t}d&&(Me=document.createElement("div").style,"AnimationEvent"in window||(delete ke.animationend.animation,delete ke.animationiteration.animation,delete ke.animationstart.animation),"TransitionEvent"in window||delete ke.transitionend.transition);var Ce=Ee("animationend"),Pe=Ee("animationiteration"),Oe=Ee("animationstart"),Te=Ee("transitionend"),De=new Map,Ae=new Map,Le=["abort","abort",Ce,"animationEnd",Pe,"animationIteration",Oe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Te,"transitionEnd","waiting","waiting"];function Re(t,e){for(var n=0;n<t.length;n+=2){var r=t[n],i=t[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Ae.set(r,e),De.set(r,i),u(i,[r])}}(0,o.unstable_now)();var ze=8;function Ne(t){if(0!=(1&t))return ze=15,1;if(0!=(2&t))return ze=14,2;if(0!=(4&t))return ze=13,4;var e=24&t;return 0!==e?(ze=12,e):0!=(32&t)?(ze=11,32):0!=(e=192&t)?(ze=10,e):0!=(256&t)?(ze=9,256):0!=(e=3584&t)?(ze=8,e):0!=(4096&t)?(ze=7,4096):0!=(e=4186112&t)?(ze=6,e):0!=(e=62914560&t)?(ze=5,e):67108864&t?(ze=4,67108864):0!=(134217728&t)?(ze=3,134217728):0!=(e=805306368&t)?(ze=2,e):0!=(1073741824&t)?(ze=1,1073741824):(ze=8,t)}function Ie(t,e){var n=t.pendingLanes;if(0===n)return ze=0;var r=0,i=0,o=t.expiredLanes,a=t.suspendedLanes,s=t.pingedLanes;if(0!==o)r=o,i=ze=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=Ne(l),i=ze):0!=(s&=o)&&(r=Ne(s),i=ze)}else 0!=(o=n&~a)?(r=Ne(o),i=ze):0!==s&&(r=Ne(s),i=ze);if(0===r)return 0;if(r=n&((0>(r=31-He(r))?0:1<<r)<<1)-1,0!==e&&e!==r&&0==(e&a)){if(Ne(e),i<=ze)return e;ze=i}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=r;0<e;)i=1<<(n=31-He(e)),r|=t[n],e&=~i;return r}function Fe(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Be(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=Ve(24&~e))?Be(10,e):t;case 10:return 0===(t=Ve(192&~e))?Be(8,e):t;case 8:return 0===(t=Ve(3584&~e))&&0===(t=Ve(4186112&~e))&&(t=512),t;case 2:return 0===(e=Ve(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function Ve(t){return t&-t}function je(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function We(t,e,n){t.pendingLanes|=e;var r=e-1;t.suspendedLanes&=r,t.pingedLanes&=r,(t=t.eventTimes)[e=31-He(e)]=n}var He=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Ue(t)/$e|0)|0},Ue=Math.log,$e=Math.LN2,Ye=o.unstable_UserBlockingPriority,qe=o.unstable_runWithPriority,Xe=!0;function Qe(t,e,n,r){Nt||Rt();var i=Ze,o=Nt;Nt=!0;try{Lt(i,t,e,n,r)}finally{(Nt=o)||Ft()}}function Ke(t,e,n,r){qe(Ye,Ze.bind(null,t,e,n,r))}function Ze(t,e,n,r){var i;if(Xe)if((i=0==(4&e))&&0<oe.length&&-1<fe.indexOf(t))t=he(null,t,e,n,r),oe.push(t);else{var o=Ge(t,e,n,r);if(null===o)i&&pe(t,r);else{if(i){if(-1<fe.indexOf(t))return t=he(o,t,e,n,r),void oe.push(t);if(function(t,e,n,r,i){switch(e){case"focusin":return ae=ge(ae,t,e,n,r,i),!0;case"dragenter":return se=ge(se,t,e,n,r,i),!0;case"mouseover":return le=ge(le,t,e,n,r,i),!0;case"pointerover":var o=i.pointerId;return ue.set(o,ge(ue.get(o)||null,t,e,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ce.set(o,ge(ce.get(o)||null,t,e,n,r,i)),!0}return!1}(o,t,e,n,r))return;pe(t,r)}Rr(t,e,r,null,n)}}}function Ge(t,e,n,r){var i=Mt(r);if(null!==(i=ei(i))){var o=Qt(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Kt(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Rr(t,e,r,i,n),null}var Je=null,tn=null,en=null;function nn(){if(en)return en;var t,e,n=tn,r=n.length,i="value"in Je?Je.value:Je.textContent,o=i.length;for(t=0;t<r&&n[t]===i[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===i[o-e];e++);return en=i.slice(t,1<e?1-e:void 0)}function rn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function on(){return!0}function an(){return!1}function sn(t){function e(e,n,r,i,o){for(var a in this._reactName=e,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),e}var ln,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),hn=i({},dn,{view:0,detail:0}),pn=sn(hn),gn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==cn&&(cn&&"mousemove"===t.type?(ln=t.screenX-cn.screenX,un=t.screenY-cn.screenY):un=ln=0,cn=t),ln)},movementY:function(t){return"movementY"in t?t.movementY:un}}),mn=sn(gn),bn=sn(i({},gn,{dataTransfer:0})),yn=sn(i({},hn,{relatedTarget:0})),vn=sn(i({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=i({},dn,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),_n=sn(xn),wn=sn(i({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Mn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Mn[t])&&!!e[t]}function Cn(){return En}var Pn=i({},hn,{key:function(t){if(t.key){var e=kn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=rn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?Sn[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(t){return"keypress"===t.type?rn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?rn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),On=sn(Pn),Tn=sn(i({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=sn(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),An=sn(i({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=i({},gn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=sn(Ln),zn=[9,13,27,32],Nn=d&&"CompositionEvent"in window,In=null;d&&"documentMode"in document&&(In=document.documentMode);var Fn=d&&"TextEvent"in window&&!In,Bn=d&&(!Nn||In&&8<In&&11>=In),Vn=String.fromCharCode(32),jn=!1;function Wn(t,e){switch(t){case"keyup":return-1!==zn.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Un=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!$n[t.type]:"textarea"===e}function qn(t,e,n,r){Tt(r),0<(e=Nr(e,"onChange")).length&&(n=new fn("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var Xn=null,Qn=null;function Kn(t){Pr(t,0)}function Zn(t){if(Z(ri(t)))return t}function Gn(t,e){if("change"===t)return e}var Jn=!1;if(d){var tr;if(d){var er="oninput"in document;if(!er){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),er="function"==typeof nr.oninput}tr=er}else tr=!1;Jn=tr&&(!document.documentMode||9<document.documentMode)}function rr(){Xn&&(Xn.detachEvent("onpropertychange",ir),Qn=Xn=null)}function ir(t){if("value"===t.propertyName&&Zn(Qn)){var e=[];if(qn(e,Qn,t,Mt(t)),t=Kn,Nt)t(e);else{Nt=!0;try{At(t,e)}finally{Nt=!1,Ft()}}}}function or(t,e,n){"focusin"===t?(rr(),Qn=n,(Xn=e).attachEvent("onpropertychange",ir)):"focusout"===t&&rr()}function ar(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Zn(Qn)}function sr(t,e){if("click"===t)return Zn(e)}function lr(t,e){if("input"===t||"change"===t)return Zn(e)}var ur="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},cr=Object.prototype.hasOwnProperty;function dr(t,e){if(ur(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(e,n[r])||!ur(t[n[r]],e[n[r]]))return!1;return!0}function fr(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function hr(t,e){var n,r=fr(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=fr(r)}}function pr(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?pr(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function gr(){for(var t=window,e=G();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=G((t=e.contentWindow).document)}return e}function mr(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var br=d&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,xr=null,_r=!1;function wr(t,e,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==yr||yr!==G(r)||(r="selectionStart"in(r=yr)&&mr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},xr&&dr(xr,r)||(xr=r,0<(r=Nr(vr,"onSelect")).length&&(e=new fn("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=yr)))}Re("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Re("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Re(Le,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)Ae.set(kr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Cr(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,r,i,o,s,l,u){if(Xt.apply(this,arguments),Ht){if(!Ht)throw Error(a(198));var c=Ut;Ht=!1,Ut=null,$t||($t=!0,Yt=c)}}(r,e,void 0,t),t.currentTarget=null}function Pr(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var r=t[n],i=r.event;r=r.listeners;t:{var o=void 0;if(e)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break t;Cr(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break t;Cr(i,s,u),o=l}}}if($t)throw t=Yt,$t=!1,Yt=null,t}function Or(t,e){var n=oi(e),r=t+"__bubble";n.has(r)||(Lr(e,t,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Dr(t){t[Tr]||(t[Tr]=!0,s.forEach((function(e){Er.has(e)||Ar(e,!1,t,null),Ar(e,!0,t,null)})))}function Ar(t,e,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===t&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!e&&Er.has(t)){if("scroll"!==t)return;i|=2,o=r}var a=oi(o),s=t+"__"+(e?"capture":"bubble");a.has(s)||(e&&(i|=4),Lr(o,t,i,e),a.add(s))}function Lr(t,e,n,r){var i=Ae.get(e);switch(void 0===i?2:i){case 0:i=Qe;break;case 1:i=Ke;break;default:i=Ze}n=i.bind(null,e,n,t),i=void 0,!Vt||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(i=!0),r?void 0!==i?t.addEventListener(e,n,{capture:!0,passive:i}):t.addEventListener(e,n,!0):void 0!==i?t.addEventListener(e,n,{passive:i}):t.addEventListener(e,n,!1)}function Rr(t,e,n,r,i){var o=r;if(0==(1&e)&&0==(2&e)&&null!==r)t:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=ei(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue t}s=s.parentNode}}r=r.return}!function(t,e,n){if(It)return t();It=!0;try{zt(t,e,n)}finally{It=!1,Ft()}}((function(){var r=o,i=Mt(n),a=[];t:{var s=De.get(t);if(void 0!==s){var l=fn,u=t;switch(t){case"keypress":if(0===rn(n))break t;case"keydown":case"keyup":l=On;break;case"focusin":u="focus",l=yn;break;case"focusout":u="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case Ce:case Pe:case Oe:l=vn;break;case Te:l=An;break;case"scroll":l=pn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=0!=(4&e),d=!c&&"scroll"===t,f=c?null!==s?s+"Capture":null:s;c=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Bt(p,f))&&c.push(zr(p,g,h))),d)break;p=p.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(s="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(u=n.relatedTarget||n.fromElement)||!ei(u)&&!u[Jr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?ei(u):null)&&(u!==(d=Qt(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==t&&"pointerover"!==t||(c=Tn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:ri(l),h=null==u?s:ri(u),(s=new c(g,p+"leave",l,n,i)).target=d,s.relatedTarget=h,g=null,ei(i)===r&&((c=new c(f,p+"enter",u,n,i)).target=h,c.relatedTarget=d,g=c),d=g,l&&u)t:{for(f=u,p=0,h=c=l;h;h=Ir(h))p++;for(h=0,g=f;g;g=Ir(g))h++;for(;0<p-h;)c=Ir(c),p--;for(;0<h-p;)f=Ir(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break t;c=Ir(c),f=Ir(f)}c=null}else c=null;null!==l&&Fr(a,s,l,c,!1),null!==u&&null!==d&&Fr(a,d,u,c,!0)}if("select"===(l=(s=r?ri(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Gn;else if(Yn(s))if(Jn)m=lr;else{m=ar;var b=or}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=sr);switch(m&&(m=m(t,r))?qn(a,m,n,i):(b&&b(t,s,r),"focusout"===t&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&it(s,"number",s.value)),b=r?ri(r):window,t){case"focusin":(Yn(b)||"true"===b.contentEditable)&&(yr=b,vr=r,xr=null);break;case"focusout":xr=vr=yr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,wr(a,n,i);break;case"selectionchange":if(br)break;case"keydown":case"keyup":wr(a,n,i)}var y;if(Nn)t:{switch(t){case"compositionstart":var v="onCompositionStart";break t;case"compositionend":v="onCompositionEnd";break t;case"compositionupdate":v="onCompositionUpdate";break t}v=void 0}else Un?Wn(t,n)&&(v="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(v="onCompositionStart");v&&(Bn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==v?"onCompositionEnd"===v&&Un&&(y=nn()):(tn="value"in(Je=i)?Je.value:Je.textContent,Un=!0)),0<(b=Nr(r,v)).length&&(v=new wn(v,t,null,n,i),a.push({event:v,listeners:b}),(y||null!==(y=Hn(n)))&&(v.data=y))),(y=Fn?function(t,e){switch(t){case"compositionend":return Hn(e);case"keypress":return 32!==e.which?null:(jn=!0,Vn);case"textInput":return(t=e.data)===Vn&&jn?null:t;default:return null}}(t,n):function(t,e){if(Un)return"compositionend"===t||!Nn&&Wn(t,e)?(t=nn(),en=tn=Je=null,Un=!1,t):null;switch(t){default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Bn&&"ko"!==e.locale?null:e.data}}(t,n))&&0<(r=Nr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=y)}Pr(a,e)}))}function zr(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Nr(t,e){for(var n=e+"Capture",r=[];null!==t;){var i=t,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Bt(t,n))&&r.unshift(zr(t,o,i)),null!=(o=Bt(t,e))&&r.push(zr(t,o,i))),t=t.return}return r}function Ir(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function Fr(t,e,n,r,i){for(var o=e._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=Bt(n,o))&&a.unshift(zr(n,l,s)):i||null!=(l=Bt(n,o))&&a.push(zr(n,l,s))),n=n.return}0!==a.length&&t.push({event:e,listeners:a})}function Br(){}var Vr=null,jr=null;function Wr(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Hr(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function qr(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Xr(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var Qr=0,Kr=Math.random().toString(36).slice(2),Zr="__reactFiber$"+Kr,Gr="__reactProps$"+Kr,Jr="__reactContainer$"+Kr,ti="__reactEvents$"+Kr;function ei(t){var e=t[Zr];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Jr]||n[Zr]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=Xr(t);null!==t;){if(n=t[Zr])return n;t=Xr(t)}return e}n=(t=n).parentNode}return null}function ni(t){return!(t=t[Zr]||t[Jr])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function ri(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function ii(t){return t[Gr]||null}function oi(t){var e=t[ti];return void 0===e&&(e=t[ti]=new Set),e}var ai=[],si=-1;function li(t){return{current:t}}function ui(t){0>si||(t.current=ai[si],ai[si]=null,si--)}function ci(t,e){si++,ai[si]=t.current,t.current=e}var di={},fi=li(di),hi=li(!1),pi=di;function gi(t,e){var n=t.type.contextTypes;if(!n)return di;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=e[i];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function mi(t){return null!=t.childContextTypes}function bi(){ui(hi),ui(fi)}function yi(t,e,n){if(fi.current!==di)throw Error(a(168));ci(fi,e),ci(hi,n)}function vi(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,q(e)||"Unknown",o));return i({},n,r)}function xi(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||di,pi=fi.current,ci(fi,t),ci(hi,hi.current),!0}function _i(t,e,n){var r=t.stateNode;if(!r)throw Error(a(169));n?(t=vi(t,e,pi),r.__reactInternalMemoizedMergedChildContext=t,ui(hi),ui(fi),ci(fi,t)):ui(hi),ci(hi,n)}var wi=null,ki=null,Si=o.unstable_runWithPriority,Mi=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,Ci=o.unstable_shouldYield,Pi=o.unstable_requestPaint,Oi=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Di=o.unstable_ImmediatePriority,Ai=o.unstable_UserBlockingPriority,Li=o.unstable_NormalPriority,Ri=o.unstable_LowPriority,zi=o.unstable_IdlePriority,Ni={},Ii=void 0!==Pi?Pi:function(){},Fi=null,Bi=null,Vi=!1,ji=Oi(),Wi=1e4>ji?Oi:function(){return Oi()-ji};function Hi(){switch(Ti()){case Di:return 99;case Ai:return 98;case Li:return 97;case Ri:return 96;case zi:return 95;default:throw Error(a(332))}}function Ui(t){switch(t){case 99:return Di;case 98:return Ai;case 97:return Li;case 96:return Ri;case 95:return zi;default:throw Error(a(332))}}function $i(t,e){return t=Ui(t),Si(t,e)}function Yi(t,e,n){return t=Ui(t),Mi(t,e,n)}function qi(){if(null!==Bi){var t=Bi;Bi=null,Ei(t)}Xi()}function Xi(){if(!Vi&&null!==Fi){Vi=!0;var t=0;try{var e=Fi;$i(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),Fi=null}catch(e){throw null!==Fi&&(Fi=Fi.slice(t+1)),Mi(Di,qi),e}finally{Vi=!1}}}var Qi=_.ReactCurrentBatchConfig;function Ki(t,e){if(t&&t.defaultProps){for(var n in e=i({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var Zi=li(null),Gi=null,Ji=null,to=null;function eo(){to=Ji=Gi=null}function no(t){var e=Zi.current;ui(Zi),t.type._context._currentValue=e}function ro(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function io(t,e){Gi=t,to=Ji=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Na=!0),t.firstContext=null)}function oo(t,e){if(to!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(to=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Ji){if(null===Gi)throw Error(a(308));Ji=e,Gi.dependencies={lanes:0,firstContext:e,responders:null}}else Ji=Ji.next=e;return t._currentValue}var ao=!1;function so(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function lo(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function uo(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function co(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function fo(t,e){var n=t.updateQueue,r=t.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=e:o=o.next=e}else i=o=e;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function ho(t,e,n,r){var o=t.updateQueue;ao=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var d=t.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(f=o.baseState,s=0,d=c=u=null;;){l=a.lane;var h=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var p=t,g=a;switch(l=e,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,l);break t}f=p;break t;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(h,f,l):p))break t;f=i({},f,l);break t;case 2:ao=!0}}null!==a.callback&&(t.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else h={eventTime:h,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=h,u=f):d=d.next=h,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===d&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=d,Fs|=s,t.lanes=s,t.memoizedState=f}}function po(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var r=t[e],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var go=(new r.Component).refs;function mo(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:i({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var bo={isMounted:function(t){return!!(t=t._reactInternals)&&Qt(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=ul(),i=cl(t),o=uo(r,i);o.payload=e,null!=n&&(o.callback=n),co(t,o),dl(t,i,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=ul(),i=cl(t),o=uo(r,i);o.tag=1,o.payload=e,null!=n&&(o.callback=n),co(t,o),dl(t,i,r)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=ul(),r=cl(t),i=uo(n,r);i.tag=2,null!=e&&(i.callback=e),co(t,i),dl(t,r,n)}};function yo(t,e,n,r,i,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&dr(n,r)&&dr(i,o))}function vo(t,e,n){var r=!1,i=di,o=e.contextType;return"object"==typeof o&&null!==o?o=oo(o):(i=mi(e)?pi:fi.current,o=(r=null!=(r=e.contextTypes))?gi(t,i):di),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=bo,t.stateNode=e,e._reactInternals=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=o),e}function xo(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&bo.enqueueReplaceState(e,e.state,null)}function _o(t,e,n,r){var i=t.stateNode;i.props=n,i.state=t.memoizedState,i.refs=go,so(t);var o=e.contextType;"object"==typeof o&&null!==o?i.context=oo(o):(o=mi(e)?pi:fi.current,i.context=gi(t,o)),ho(t,n,i,r),i.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(mo(t,e,o,n),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&bo.enqueueReplaceState(i,i.state,null),ho(t,n,i,r),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4)}var wo=Array.isArray;function ko(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,t));var i=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===i?e.ref:(e=function(t){var e=r.refs;e===go&&(e=r.refs={}),null===t?delete e[i]:e[i]=t},e._stringRef=i,e)}if("string"!=typeof t)throw Error(a(284));if(!n._owner)throw Error(a(290,t))}return t}function So(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function Mo(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e){return(t=Hl(t,e)).index=0,t.sibling=null,t}function o(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.flags=2,n):r:(e.flags=2,n):n}function s(e){return t&&null===e.alternate&&(e.flags=2),e}function l(t,e,n,r){return null===e||6!==e.tag?((e=ql(n,t.mode,r)).return=t,e):((e=i(e,n)).return=t,e)}function u(t,e,n,r){return null!==e&&e.elementType===n.type?((r=i(e,n.props)).ref=ko(t,e,n),r.return=t,r):((r=Ul(n.type,n.key,n.props,null,t.mode,r)).ref=ko(t,e,n),r.return=t,r)}function c(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Xl(n,t.mode,r)).return=t,e):((e=i(e,n.children||[])).return=t,e)}function d(t,e,n,r,o){return null===e||7!==e.tag?((e=$l(n,t.mode,r,o)).return=t,e):((e=i(e,n)).return=t,e)}function f(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=ql(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case w:return(n=Ul(e.type,e.key,e.props,null,t.mode,n)).ref=ko(t,null,e),n.return=t,n;case k:return(e=Xl(e,t.mode,n)).return=t,e}if(wo(e)||W(e))return(e=$l(e,t.mode,n,null)).return=t,e;So(t,e)}return null}function h(t,e,n,r){var i=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?n.type===S?d(t,e,n.props.children,r,i):u(t,e,n,r):null;case k:return n.key===i?c(t,e,n,r):null}if(wo(n)||W(n))return null!==i?null:d(t,e,n,r,null);So(t,n)}return null}function p(t,e,n,r,i){if("string"==typeof r||"number"==typeof r)return l(e,t=t.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return t=t.get(null===r.key?n:r.key)||null,r.type===S?d(e,t,r.props.children,i,r.key):u(e,t,r,i);case k:return c(e,t=t.get(null===r.key?n:r.key)||null,r,i)}if(wo(r)||W(r))return d(e,t=t.get(n)||null,r,i,null);So(e,r)}return null}function g(i,a,s,l){for(var u=null,c=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=h(i,d,s[g],l);if(null===b){null===d&&(d=m);break}t&&d&&null===b.alternate&&e(i,d),a=o(b,a,g),null===c?u=b:c.sibling=b,c=b,d=m}if(g===s.length)return n(i,d),u;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],l))&&(a=o(d,a,g),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],l))&&(t&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===c?u=m:c.sibling=m,c=m);return t&&d.forEach((function(t){return e(i,t)})),u}function m(i,s,l,u){var c=W(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,g=s,m=s=0,b=null,y=l.next();null!==g&&!y.done;m++,y=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var v=h(i,g,y.value,u);if(null===v){null===g&&(g=b);break}t&&g&&null===v.alternate&&e(i,g),s=o(v,s,m),null===d?c=v:d.sibling=v,d=v,g=b}if(y.done)return n(i,g),c;if(null===g){for(;!y.done;m++,y=l.next())null!==(y=f(i,y.value,u))&&(s=o(y,s,m),null===d?c=y:d.sibling=y,d=y);return c}for(g=r(i,g);!y.done;m++,y=l.next())null!==(y=p(g,i,m,y.value,u))&&(t&&null!==y.alternate&&g.delete(null===y.key?m:y.key),s=o(y,s,m),null===d?c=y:d.sibling=y,d=y);return t&&g.forEach((function(t){return e(i,t)})),c}return function(t,r,o,l){var u="object"==typeof o&&null!==o&&o.type===S&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case w:t:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(o.type===S){n(t,u.sibling),(r=i(u,o.props.children)).return=t,t=r;break t}}else if(u.elementType===o.type){n(t,u.sibling),(r=i(u,o.props)).ref=ko(t,u,o),r.return=t,t=r;break t}n(t,u);break}e(t,u),u=u.sibling}o.type===S?((r=$l(o.props.children,t.mode,l,o.key)).return=t,t=r):((l=Ul(o.type,o.key,o.props,null,t.mode,l)).ref=ko(t,r,o),l.return=t,t=l)}return s(t);case k:t:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(t,r.sibling),(r=i(r,o.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Xl(o,t.mode,l)).return=t,t=r}return s(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(t,r.sibling),(r=i(r,o)).return=t,t=r):(n(t,r),(r=ql(o,t.mode,l)).return=t,t=r),s(t);if(wo(o))return g(t,r,o,l);if(W(o))return m(t,r,o,l);if(c&&So(t,o),void 0===o&&!u)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(t.type)||"Component"))}return n(t,r)}}var Eo=Mo(!0),Co=Mo(!1),Po={},Oo=li(Po),To=li(Po),Do=li(Po);function Ao(t){if(t===Po)throw Error(a(174));return t}function Lo(t,e){switch(ci(Do,e),ci(To,t),ci(Oo,Po),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ht(null,"");break;default:e=ht(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}ui(Oo),ci(Oo,e)}function Ro(){ui(Oo),ui(To),ui(Do)}function zo(t){Ao(Do.current);var e=Ao(Oo.current),n=ht(e,t.type);e!==n&&(ci(To,t),ci(Oo,n))}function No(t){To.current===t&&(ui(Oo),ui(To))}var Io=li(0);function Fo(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Bo=null,Vo=null,jo=!1;function Wo(t,e){var n=jl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Ho(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function Uo(t){if(jo){var e=Vo;if(e){var n=e;if(!Ho(t,e)){if(!(e=qr(n.nextSibling))||!Ho(t,e))return t.flags=-1025&t.flags|2,jo=!1,void(Bo=t);Wo(Bo,n)}Bo=t,Vo=qr(e.firstChild)}else t.flags=-1025&t.flags|2,jo=!1,Bo=t}}function $o(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Bo=t}function Yo(t){if(t!==Bo)return!1;if(!jo)return $o(t),jo=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Hr(e,t.memoizedProps))for(e=Vo;e;)Wo(t,e),e=qr(e.nextSibling);if($o(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){Vo=qr(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}Vo=null}}else Vo=Bo?qr(t.stateNode.nextSibling):null;return!0}function qo(){Vo=Bo=null,jo=!1}var Xo=[];function Qo(){for(var t=0;t<Xo.length;t++)Xo[t]._workInProgressVersionPrimary=null;Xo.length=0}var Ko=_.ReactCurrentDispatcher,Zo=_.ReactCurrentBatchConfig,Go=0,Jo=null,ta=null,ea=null,na=!1,ra=!1;function ia(){throw Error(a(321))}function oa(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!ur(t[n],e[n]))return!1;return!0}function aa(t,e,n,r,i,o){if(Go=o,Jo=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Ko.current=null===t||null===t.memoizedState?Aa:La,t=n(r,i),ra){o=0;do{if(ra=!1,!(25>o))throw Error(a(301));o+=1,ea=ta=null,e.updateQueue=null,Ko.current=Ra,t=n(r,i)}while(ra)}if(Ko.current=Da,e=null!==ta&&null!==ta.next,Go=0,ea=ta=Jo=null,na=!1,e)throw Error(a(300));return t}function sa(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ea?Jo.memoizedState=ea=t:ea=ea.next=t,ea}function la(){if(null===ta){var t=Jo.alternate;t=null!==t?t.memoizedState:null}else t=ta.next;var e=null===ea?Jo.memoizedState:ea.next;if(null!==e)ea=e,ta=t;else{if(null===t)throw Error(a(310));t={memoizedState:(ta=t).memoizedState,baseState:ta.baseState,baseQueue:ta.baseQueue,queue:ta.queue,next:null},null===ea?Jo.memoizedState=ea=t:ea=ea.next=t}return ea}function ua(t,e){return"function"==typeof e?e(t):e}function ca(t){var e=la(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var r=ta,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,u=i;do{var c=u.lane;if((Go&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===t?u.eagerState:t(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,o=r):l=l.next=d,Jo.lanes|=c,Fs|=c}u=u.next}while(null!==u&&u!==i);null===l?o=r:l.next=s,ur(r,e.memoizedState)||(Na=!0),e.memoizedState=r,e.baseState=o,e.baseQueue=l,n.lastRenderedState=r}return[e.memoizedState,n.dispatch]}function da(t){var e=la(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var r=n.dispatch,i=n.pending,o=e.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=t(o,s.action),s=s.next}while(s!==i);ur(o,e.memoizedState)||(Na=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,r]}function fa(t,e,n){var r=e._getVersion;r=r(e._source);var i=e._workInProgressVersionPrimary;if(null!==i?t=i===r:(t=t.mutableReadLanes,(t=(Go&t)===t)&&(e._workInProgressVersionPrimary=r,Xo.push(e))),t)return n(e._source);throw Xo.push(e),Error(a(350))}function ha(t,e,n,r){var i=Ts;if(null===i)throw Error(a(349));var o=e._getVersion,s=o(e._source),l=Ko.current,u=l.useState((function(){return fa(i,e,n)})),c=u[1],d=u[0];u=ea;var f=t.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=Jo;return t.memoizedState={refs:h,source:e,subscribe:r},l.useEffect((function(){h.getSnapshot=n,h.setSnapshot=c;var t=o(e._source);if(!ur(s,t)){t=n(e._source),ur(d,t)||(c(t),t=cl(m),i.mutableReadLanes|=t&i.pendingLanes),t=i.mutableReadLanes,i.entangledLanes|=t;for(var r=i.entanglements,a=t;0<a;){var l=31-He(a),u=1<<l;r[l]|=t,a&=~u}}}),[n,e,r]),l.useEffect((function(){return r(e._source,(function(){var t=h.getSnapshot,n=h.setSnapshot;try{n(t(e._source));var r=cl(m);i.mutableReadLanes|=r&i.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,r]),ur(p,n)&&ur(g,e)&&ur(f,r)||((t={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:d}).dispatch=c=Ta.bind(null,Jo,t),u.queue=t,u.baseQueue=null,d=fa(i,e,n),u.memoizedState=u.baseState=d),d}function pa(t,e,n){return ha(la(),t,e,n)}function ga(t){var e=sa();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:t}).dispatch=Ta.bind(null,Jo,t),[e.memoizedState,t]}function ma(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===(e=Jo.updateQueue)?(e={lastEffect:null},Jo.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t),t}function ba(t){return t={current:t},sa().memoizedState=t}function ya(){return la().memoizedState}function va(t,e,n,r){var i=sa();Jo.flags|=t,i.memoizedState=ma(1|e,n,void 0,void 0===r?null:r)}function xa(t,e,n,r){var i=la();r=void 0===r?null:r;var o=void 0;if(null!==ta){var a=ta.memoizedState;if(o=a.destroy,null!==r&&oa(r,a.deps))return void ma(e,n,o,r)}Jo.flags|=t,i.memoizedState=ma(1|e,n,o,r)}function _a(t,e){return va(516,4,t,e)}function wa(t,e){return xa(516,4,t,e)}function ka(t,e){return xa(4,2,t,e)}function Sa(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Ma(t,e,n){return n=null!=n?n.concat([t]):null,xa(4,2,Sa.bind(null,e,t),n)}function Ea(){}function Ca(t,e){var n=la();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&oa(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function Pa(t,e){var n=la();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&oa(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Oa(t,e){var n=Hi();$i(98>n?98:n,(function(){t(!0)})),$i(97<n?97:n,(function(){var n=Zo.transition;Zo.transition=1;try{t(!1),e()}finally{Zo.transition=n}}))}function Ta(t,e,n){var r=ul(),i=cl(t),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),e.pending=o,a=t.alternate,t===Jo||null!==a&&a===Jo)ra=na=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,ur(l,s))return}catch(t){}dl(t,i,r)}}var Da={readContext:oo,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},Aa={readContext:oo,useCallback:function(t,e){return sa().memoizedState=[t,void 0===e?null:e],t},useContext:oo,useEffect:_a,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,va(4,2,Sa.bind(null,e,t),n)},useLayoutEffect:function(t,e){return va(4,2,t,e)},useMemo:function(t,e){var n=sa();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=sa();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=Ta.bind(null,Jo,t),[r.memoizedState,t]},useRef:ba,useState:ga,useDebugValue:Ea,useDeferredValue:function(t){var e=ga(t),n=e[0],r=e[1];return _a((function(){var e=Zo.transition;Zo.transition=1;try{r(t)}finally{Zo.transition=e}}),[t]),n},useTransition:function(){var t=ga(!1),e=t[0];return ba(t=Oa.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var r=sa();return r.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},ha(r,t,e,n)},useOpaqueIdentifier:function(){if(jo){var t=!1,e=function(t){return{$$typeof:z,toString:t,valueOf:t}}((function(){throw t||(t=!0,n("r:"+(Qr++).toString(36))),Error(a(355))})),n=ga(e)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,ma(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),e}return ga(e="r:"+(Qr++).toString(36)),e},unstable_isNewReconciler:!1},La={readContext:oo,useCallback:Ca,useContext:oo,useEffect:wa,useImperativeHandle:Ma,useLayoutEffect:ka,useMemo:Pa,useReducer:ca,useRef:ya,useState:function(){return ca(ua)},useDebugValue:Ea,useDeferredValue:function(t){var e=ca(ua),n=e[0],r=e[1];return wa((function(){var e=Zo.transition;Zo.transition=1;try{r(t)}finally{Zo.transition=e}}),[t]),n},useTransition:function(){var t=ca(ua)[0];return[ya().current,t]},useMutableSource:pa,useOpaqueIdentifier:function(){return ca(ua)[0]},unstable_isNewReconciler:!1},Ra={readContext:oo,useCallback:Ca,useContext:oo,useEffect:wa,useImperativeHandle:Ma,useLayoutEffect:ka,useMemo:Pa,useReducer:da,useRef:ya,useState:function(){return da(ua)},useDebugValue:Ea,useDeferredValue:function(t){var e=da(ua),n=e[0],r=e[1];return wa((function(){var e=Zo.transition;Zo.transition=1;try{r(t)}finally{Zo.transition=e}}),[t]),n},useTransition:function(){var t=da(ua)[0];return[ya().current,t]},useMutableSource:pa,useOpaqueIdentifier:function(){return da(ua)[0]},unstable_isNewReconciler:!1},za=_.ReactCurrentOwner,Na=!1;function Ia(t,e,n,r){e.child=null===t?Co(e,null,n,r):Eo(e,t.child,n,r)}function Fa(t,e,n,r,i){n=n.render;var o=e.ref;return io(e,i),r=aa(t,e,n,r,o,i),null===t||Na?(e.flags|=1,Ia(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,ns(t,e,i))}function Ba(t,e,n,r,i,o){if(null===t){var a=n.type;return"function"!=typeof a||Wl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Ul(n.type,null,r,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Va(t,e,a,r,i,o))}return a=t.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:dr)(i,r)&&t.ref===e.ref)?ns(t,e,o):(e.flags|=1,(t=Hl(a,r)).ref=e.ref,t.return=e,e.child=t)}function Va(t,e,n,r,i,o){if(null!==t&&dr(t.memoizedProps,r)&&t.ref===e.ref){if(Na=!1,0==(o&i))return e.lanes=t.lanes,ns(t,e,o);0!=(16384&t.flags)&&(Na=!0)}return Ha(t,e,n,r,o)}function ja(t,e,n){var r=e.pendingProps,i=r.children,o=null!==t?t.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},vl(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},vl(0,t),null;e.memoizedState={baseLanes:0},vl(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,e.memoizedState=null):r=n,vl(0,r);return Ia(t,e,i,n),e.child}function Wa(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Ha(t,e,n,r,i){var o=mi(n)?pi:fi.current;return o=gi(e,o),io(e,i),n=aa(t,e,n,r,o,i),null===t||Na?(e.flags|=1,Ia(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,ns(t,e,i))}function Ua(t,e,n,r,i){if(mi(n)){var o=!0;xi(e)}else o=!1;if(io(e,i),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),vo(e,n,r),_o(e,n,r,i),r=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?oo(u):gi(e,u=mi(n)?pi:fi.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&xo(e,a,r,u),ao=!1;var f=e.memoizedState;a.state=f,ho(e,r,a,i),l=e.memoizedState,s!==r||f!==l||hi.current||ao?("function"==typeof c&&(mo(e,n,c,r),l=e.memoizedState),(s=ao||yo(e,n,s,r,f,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(e.flags|=4),r=!1)}else{a=e.stateNode,lo(t,e),s=e.memoizedProps,u=e.type===e.elementType?s:Ki(e.type,s),a.props=u,d=e.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?oo(l):gi(e,l=mi(n)?pi:fi.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&xo(e,a,r,l),ao=!1,f=e.memoizedState,a.state=f,ho(e,r,a,i);var p=e.memoizedState;s!==d||f!==p||hi.current||ao?("function"==typeof h&&(mo(e,n,h,r),p=e.memoizedState),(u=ao||yo(e,n,u,r,f,p,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=256),e.memoizedProps=r,e.memoizedState=p),a.props=r,a.state=p,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=256),r=!1)}return $a(t,e,n,r,o,i)}function $a(t,e,n,r,i,o){Wa(t,e);var a=0!=(64&e.flags);if(!r&&!a)return i&&_i(e,n,!1),ns(t,e,o);r=e.stateNode,za.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.flags|=1,null!==t&&a?(e.child=Eo(e,t.child,null,o),e.child=Eo(e,null,s,o)):Ia(t,e,s,o),e.memoizedState=r.state,i&&_i(e,n,!0),e.child}function Ya(t){var e=t.stateNode;e.pendingContext?yi(0,e.pendingContext,e.pendingContext!==e.context):e.context&&yi(0,e.context,!1),Lo(t,e.containerInfo)}var qa,Xa,Qa,Ka={dehydrated:null,retryLane:0};function Za(t,e,n){var r,i=e.pendingProps,o=Io.current,a=!1;return(r=0!=(64&e.flags))||(r=(null===t||null!==t.memoizedState)&&0!=(2&o)),r?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),ci(Io,1&o),null===t?(void 0!==i.fallback&&Uo(e),t=i.children,o=i.fallback,a?(t=Ga(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ka,t):"number"==typeof i.unstable_expectedLoadTime?(t=Ga(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ka,e.lanes=33554432,t):((n=Yl({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,a?(i=function(t,e,n,r,i){var o=e.mode,a=t.child;t=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&e.child!==a?((n=e.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):n=Hl(a,s),null!==t?r=Hl(t,r):(r=$l(r,o,i,null)).flags|=2,r.return=e,n.return=e,n.sibling=r,e.child=n,r}(t,e,i.children,i.fallback,n),a=e.child,o=t.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=t.childLanes&~n,e.memoizedState=Ka,i):(n=function(t,e,n,r){var i=t.child;return t=i.sibling,n=Hl(i,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=r),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,i.children,n),e.memoizedState=null,n))}function Ga(t,e,n,r){var i=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=Yl(e,i,0,null),n=$l(n,i,r,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function Ja(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),ro(t.return,e)}function ts(t,e,n,r,i,o){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function es(t,e,n){var r=e.pendingProps,i=r.revealOrder,o=r.tail;if(Ia(t,e,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&Ja(t,n);else if(19===t.tag)Ja(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(ci(Io,r),0==(2&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(n=e.child,i=null;null!==n;)null!==(t=n.alternate)&&null===Fo(t)&&(i=n),n=n.sibling;null===(n=i)?(i=e.child,e.child=null):(i=n.sibling,n.sibling=null),ts(e,!1,i,n,o,e.lastEffect);break;case"backwards":for(n=null,i=e.child,e.child=null;null!==i;){if(null!==(t=i.alternate)&&null===Fo(t)){e.child=i;break}t=i.sibling,i.sibling=n,n=i,i=t}ts(e,!0,n,null,o,e.lastEffect);break;case"together":ts(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function ns(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),Fs|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(n=Hl(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Hl(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function rs(t,e){if(!jo)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e||null===t.tail?t.tail=null:t.tail.sibling=null:r.sibling=null}}function is(t,e,n){var r=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mi(e.type)&&bi(),null;case 3:return Ro(),ui(hi),ui(fi),Qo(),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(Yo(e)?e.flags|=4:r.hydrate||(e.flags|=256)),null;case 5:No(e);var o=Ao(Do.current);if(n=e.type,null!==t&&null!=e.stateNode)Xa(t,e,n,r),t.ref!==e.ref&&(e.flags|=128);else{if(!r){if(null===e.stateNode)throw Error(a(166));return null}if(t=Ao(Oo.current),Yo(e)){r=e.stateNode,n=e.type;var s=e.memoizedProps;switch(r[Zr]=e,r[Gr]=s,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(t=0;t<Mr.length;t++)Or(Mr[t],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":tt(r,s),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Or("invalid",r);break;case"textarea":lt(r,s),Or("invalid",r)}for(var u in kt(n,s),t=null,s)s.hasOwnProperty(u)&&(o=s[u],"children"===u?"string"==typeof o?r.textContent!==o&&(t=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(t=["children",""+o]):l.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Or("scroll",r));switch(n){case"input":K(r),rt(r,s,!0);break;case"textarea":K(r),ct(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Br)}r=t,e.updateQueue=r,null!==r&&(e.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,t===dt&&(t=ft(n)),t===dt?"script"===n?((t=u.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof r.is?t=u.createElement(n,{is:r.is}):(t=u.createElement(n),"select"===n&&(u=t,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):t=u.createElementNS(t,n),t[Zr]=e,t[Gr]=r,qa(t,e),e.stateNode=t,u=St(n,r),n){case"dialog":Or("cancel",t),Or("close",t),o=r;break;case"iframe":case"object":case"embed":Or("load",t),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)Or(Mr[o],t);o=r;break;case"source":Or("error",t),o=r;break;case"img":case"image":case"link":Or("error",t),Or("load",t),o=r;break;case"details":Or("toggle",t),o=r;break;case"input":tt(t,r),o=J(t,r),Or("invalid",t);break;case"option":o=ot(t,r);break;case"select":t._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Or("invalid",t);break;case"textarea":lt(t,r),o=st(t,r),Or("invalid",t);break;default:o=r}kt(n,o);var c=o;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?_t(t,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&mt(t,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&bt(t,d):"number"==typeof d&&bt(t,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Or("scroll",t):null!=d&&x(t,s,d,u))}switch(n){case"input":K(t),rt(t,r,!1);break;case"textarea":K(t),ct(t);break;case"option":null!=r.value&&t.setAttribute("value",""+X(r.value));break;case"select":t.multiple=!!r.multiple,null!=(s=r.value)?at(t,!!r.multiple,s,!1):null!=r.defaultValue&&at(t,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(t.onclick=Br)}Wr(n,r)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)Qa(0,e,t.memoizedProps,r);else{if("string"!=typeof r&&null===e.stateNode)throw Error(a(166));n=Ao(Do.current),Ao(Oo.current),Yo(e)?(r=e.stateNode,n=e.memoizedProps,r[Zr]=e,r.nodeValue!==n&&(e.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Zr]=e,e.stateNode=r)}return null;case 13:return ui(Io),r=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(r=null!==r,n=!1,null===t?void 0!==e.memoizedProps.fallback&&Yo(e):n=null!==t.memoizedState,r&&!n&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?0===zs&&(zs=3):(0!==zs&&3!==zs||(zs=4),null===Ts||0==(134217727&Fs)&&0==(134217727&Bs)||gl(Ts,As))),(r||n)&&(e.flags|=4),null);case 4:return Ro(),null===t&&Dr(e.stateNode.containerInfo),null;case 10:return no(e),null;case 19:if(ui(Io),null===(r=e.memoizedState))return null;if(s=0!=(64&e.flags),null===(u=r.rendering))if(s)rs(r,!1);else{if(0!==zs||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(u=Fo(t))){for(e.flags|=64,rs(r,!1),null!==(s=u.updateQueue)&&(e.updateQueue=s,e.flags|=4),null===r.lastEffect&&(e.firstEffect=null),e.lastEffect=r.lastEffect,r=n,n=e.child;null!==n;)t=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=t,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,t=u.dependencies,s.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return ci(Io,1&Io.current|2),e.child}t=t.sibling}null!==r.tail&&Wi()>Hs&&(e.flags|=64,s=!0,rs(r,!1),e.lanes=33554432)}else{if(!s)if(null!==(t=Fo(u))){if(e.flags|=64,s=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!jo)return null!==(e=e.lastEffect=r.lastEffect)&&(e.nextEffect=null),null}else 2*Wi()-r.renderingStartTime>Hs&&1073741824!==n&&(e.flags|=64,s=!0,rs(r,!1),e.lanes=33554432);r.isBackwards?(u.sibling=e.child,e.child=u):(null!==(n=r.last)?n.sibling=u:e.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=e.lastEffect,r.renderingStartTime=Wi(),n.sibling=null,e=Io.current,ci(Io,s?1&e|2:1&e),n):null;case 23:case 24:return xl(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function os(t){switch(t.tag){case 1:mi(t.type)&&bi();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Ro(),ui(hi),ui(fi),Qo(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return No(t),null;case 13:return ui(Io),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return ui(Io),null;case 4:return Ro(),null;case 10:return no(t),null;case 23:case 24:return xl(),null;default:return null}}function as(t,e){try{var n="",r=e;do{n+=Y(r),r=r.return}while(r);var i=n}catch(t){i="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:i}}function ss(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}qa=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Xa=function(t,e,n,r){var o=t.memoizedProps;if(o!==r){t=e.stateNode,Ao(Oo.current);var a,s=null;switch(n){case"input":o=J(t,o),r=J(t,r),s=[];break;case"option":o=ot(t,o),r=ot(t,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=st(t,o),r=st(t,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(t.onclick=Br)}for(d in kt(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var u=o[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Or("scroll",t),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===z?c.toString():(s=s||[]).push(d,c))}n&&(s=s||[]).push("style",n);var d=s;(e.updateQueue=d)&&(e.flags|=4)}},Qa=function(t,e,n,r){n!==r&&(e.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function us(t,e,n){(n=uo(-1,n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){qs||(qs=!0,Xs=r),ss(0,e)},n}function cs(t,e,n){(n=uo(-1,n)).tag=3;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var i=e.value;n.payload=function(){return ss(0,e),r(i)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Qs?Qs=new Set([this]):Qs.add(this),ss(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function fs(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Il(t,e)}else e.current=null}function hs(t,e){switch(e.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,r=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:Ki(e.type,n),r),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&Yr(e.stateNode.containerInfo))}throw Error(a(163))}function ps(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var r=t.create;t.destroy=r()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var i=t;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Rl(n,t),Ll(n,t)),t=r}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(r=n.elementType===n.type?e.memoizedProps:Ki(n.type,e.memoizedProps),t.componentDidUpdate(r,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&po(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}po(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&Wr(n.type,n.memoizedProps)&&t.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_e(n)))))}throw Error(a(163))}function gs(t,e){for(var n=t;;){if(5===n.tag){var r=n.stateNode;if(e)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=xt("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(t,e){if(ki&&"function"==typeof ki.onCommitFiberUnmount)try{ki.onCommitFiberUnmount(wi,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Rl(e,n);else{r=e;try{i()}catch(t){Il(r,t)}}n=n.next}while(n!==t)}break;case 1:if(fs(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Il(e,t)}break;case 5:fs(e);break;case 4:ws(t,e)}}function bs(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function ys(t){return 5===t.tag||3===t.tag||4===t.tag}function vs(t){t:{for(var e=t.return;null!==e;){if(ys(e))break t;e=e.return}throw Error(a(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:e=e.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(bt(e,""),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||ys(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}r?xs(t,n,e):_s(t,n,e)}function xs(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=Br));else if(4!==r&&null!==(t=t.child))for(xs(t,e,n),t=t.sibling;null!==t;)xs(t,e,n),t=t.sibling}function _s(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==r&&null!==(t=t.child))for(_s(t,e,n),t=t.sibling;null!==t;)_s(t,e,n),t=t.sibling}function ws(t,e){for(var n,r,i=e,o=!1;;){if(!o){o=i.return;t:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break t;case 3:case 4:n=n.containerInfo,r=!0;break t}o=o.return}o=!0}if(5===i.tag||6===i.tag){t:for(var s=t,l=i,u=l;;)if(ms(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break t;for(;null===u.sibling;){if(null===u.return||u.return===l)break t;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(ms(t,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ks(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(t=r.destroy,r.destroy=void 0,void 0!==t&&t()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=e.stateNode)){r=e.memoizedProps;var i=null!==t?t.memoizedProps:r;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[Gr]=r,"input"===t&&"radio"===r.type&&null!=r.name&&et(n,r),St(t,i),e=St(t,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?_t(n,l):"dangerouslySetInnerHTML"===s?mt(n,l):"children"===s?bt(n,l):x(n,s,l,e)}switch(t){case"input":nt(n,r);break;case"textarea":ut(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?at(n,!!r.multiple,o,!1):t!==!!r.multiple&&(null!=r.defaultValue?at(n,!!r.multiple,r.defaultValue,!0):at(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((n=e.stateNode).hydrate&&(n.hydrate=!1,_e(n.containerInfo)));case 13:return null!==e.memoizedState&&(Ws=Wi(),gs(e.child,!0)),void Ss(e);case 19:return void Ss(e);case 23:case 24:return void gs(e,null!==e.memoizedState)}throw Error(a(163))}function Ss(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new ds),e.forEach((function(e){var r=Bl.bind(null,t,e);n.has(e)||(n.add(e),e.then(r,r))}))}}function Ms(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Es=Math.ceil,Cs=_.ReactCurrentDispatcher,Ps=_.ReactCurrentOwner,Os=0,Ts=null,Ds=null,As=0,Ls=0,Rs=li(0),zs=0,Ns=null,Is=0,Fs=0,Bs=0,Vs=0,js=null,Ws=0,Hs=1/0;function Us(){Hs=Wi()+500}var $s,Ys=null,qs=!1,Xs=null,Qs=null,Ks=!1,Zs=null,Gs=90,Js=[],tl=[],el=null,nl=0,rl=null,il=-1,ol=0,al=0,sl=null,ll=!1;function ul(){return 0!=(48&Os)?Wi():-1!==il?il:il=Wi()}function cl(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hi()?1:2;if(0===ol&&(ol=Is),0!==Qi.transition){0!==al&&(al=null!==js?js.pendingLanes:0),t=ol;var e=4186112&~al;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hi(),t=Be(0!=(4&Os)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),ol)}function dl(t,e,n){if(50<nl)throw nl=0,rl=null,Error(a(185));if(null===(t=fl(t,e)))return null;We(t,e,n),t===Ts&&(Bs|=e,4===zs&&gl(t,As));var r=Hi();1===e?0!=(8&Os)&&0==(48&Os)?ml(t):(hl(t,n),0===Os&&(Us(),qi())):(0==(4&Os)||98!==r&&99!==r||(null===el?el=new Set([t]):el.add(t)),hl(t,n)),js=t}function fl(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function hl(t,e){for(var n=t.callbackNode,r=t.suspendedLanes,i=t.pingedLanes,o=t.expirationTimes,s=t.pendingLanes;0<s;){var l=31-He(s),u=1<<l,c=o[l];if(-1===c){if(0==(u&r)||0!=(u&i)){c=e,Ne(u);var d=ze;o[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=e&&(t.expiredLanes|=u);s&=~u}if(r=Ie(t,t===Ts?As:0),e=ze,0===r)null!==n&&(n!==Ni&&Ei(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Ni&&Ei(n)}15===e?(n=ml.bind(null,t),null===Fi?(Fi=[n],Bi=Mi(Di,Xi)):Fi.push(n),n=Ni):14===e?n=Yi(99,ml.bind(null,t)):(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),n=Yi(n,pl.bind(null,t))),t.callbackPriority=e,t.callbackNode=n}}function pl(t){if(il=-1,al=ol=0,0!=(48&Os))throw Error(a(327));var e=t.callbackNode;if(Al()&&t.callbackNode!==e)return null;var n=Ie(t,t===Ts?As:0);if(0===n)return null;var r=n,i=Os;Os|=16;var o=kl();for(Ts===t&&As===r||(Us(),_l(t,r));;)try{El();break}catch(e){wl(t,e)}if(eo(),Cs.current=o,Os=i,null!==Ds?r=0:(Ts=null,As=0,r=zs),0!=(Is&Bs))_l(t,0);else if(0!==r){if(2===r&&(Os|=64,t.hydrate&&(t.hydrate=!1,Yr(t.containerInfo)),0!==(n=Fe(t))&&(r=Sl(t,n))),1===r)throw e=Ns,_l(t,0),gl(t,n),hl(t,Wi()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Ol(t);break;case 3:if(gl(t,n),(62914560&n)===n&&10<(r=Ws+500-Wi())){if(0!==Ie(t,0))break;if(((i=t.suspendedLanes)&n)!==n){ul(),t.pingedLanes|=t.suspendedLanes&i;break}t.timeoutHandle=Ur(Ol.bind(null,t),r);break}Ol(t);break;case 4:if(gl(t,n),(4186112&n)===n)break;for(r=t.eventTimes,i=-1;0<n;){var s=31-He(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Wi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Es(n/1960))-n)){t.timeoutHandle=Ur(Ol.bind(null,t),n);break}Ol(t);break;default:throw Error(a(329))}}return hl(t,Wi()),t.callbackNode===e?pl.bind(null,t):null}function gl(t,e){for(e&=~Vs,e&=~Bs,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-He(e),r=1<<n;t[n]=-1,e&=~r}}function ml(t){if(0!=(48&Os))throw Error(a(327));if(Al(),t===Ts&&0!=(t.expiredLanes&As)){var e=As,n=Sl(t,e);0!=(Is&Bs)&&(n=Sl(t,e=Ie(t,e)))}else n=Sl(t,e=Ie(t,0));if(0!==t.tag&&2===n&&(Os|=64,t.hydrate&&(t.hydrate=!1,Yr(t.containerInfo)),0!==(e=Fe(t))&&(n=Sl(t,e))),1===n)throw n=Ns,_l(t,0),gl(t,e),hl(t,Wi()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Ol(t),hl(t,Wi()),null}function bl(t,e){var n=Os;Os|=1;try{return t(e)}finally{0===(Os=n)&&(Us(),qi())}}function yl(t,e){var n=Os;Os&=-2,Os|=8;try{return t(e)}finally{0===(Os=n)&&(Us(),qi())}}function vl(t,e){ci(Rs,Ls),Ls|=e,Is|=e}function xl(){Ls=Rs.current,ui(Rs)}function _l(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,$r(n)),null!==Ds)for(n=Ds.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bi();break;case 3:Ro(),ui(hi),ui(fi),Qo();break;case 5:No(r);break;case 4:Ro();break;case 13:case 19:ui(Io);break;case 10:no(r);break;case 23:case 24:xl()}n=n.return}Ts=t,Ds=Hl(t.current,null),As=Ls=Is=e,zs=0,Ns=null,Vs=Bs=Fs=0}function wl(t,e){for(;;){var n=Ds;try{if(eo(),Ko.current=Da,na){for(var r=Jo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}na=!1}if(Go=0,ea=ta=Jo=null,ra=!1,Ps.current=null,null===n||null===n.return){zs=1,Ns=e,Ds=null;break}t:{var o=t,a=n.return,s=n,l=e;if(e=As,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Io.current),f=a;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var b=new Set;b.add(u),f.updateQueue=b}else m.add(u);if(0==(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=uo(-1,1);y.tag=2,co(s,y)}s.lanes|=1;break t}l=void 0,s=e;var v=o.pingCache;if(null===v?(v=o.pingCache=new ls,l=new Set,v.set(u,l)):void 0===(l=v.get(u))&&(l=new Set,v.set(u,l)),!l.has(s)){l.add(s);var x=Fl.bind(null,o,u,s);u.then(x,x)}f.flags|=4096,f.lanes=e;break t}f=f.return}while(null!==f);l=Error((q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==zs&&(zs=2),l=as(l,s),f=a;do{switch(f.tag){case 3:o=l,f.flags|=4096,e&=-e,f.lanes|=e,fo(f,us(0,o,e));break t;case 1:o=l;var _=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Qs||!Qs.has(w)))){f.flags|=4096,e&=-e,f.lanes|=e,fo(f,cs(f,o,e));break t}}f=f.return}while(null!==f)}Pl(n)}catch(t){e=t,Ds===n&&null!==n&&(Ds=n=n.return);continue}break}}function kl(){var t=Cs.current;return Cs.current=Da,null===t?Da:t}function Sl(t,e){var n=Os;Os|=16;var r=kl();for(Ts===t&&As===e||_l(t,e);;)try{Ml();break}catch(e){wl(t,e)}if(eo(),Os=n,Cs.current=r,null!==Ds)throw Error(a(261));return Ts=null,As=0,zs}function Ml(){for(;null!==Ds;)Cl(Ds)}function El(){for(;null!==Ds&&!Ci();)Cl(Ds)}function Cl(t){var e=$s(t.alternate,t,Ls);t.memoizedProps=t.pendingProps,null===e?Pl(t):Ds=e,Ps.current=null}function Pl(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=is(n,e,Ls)))return void(Ds=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ls)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=os(e)))return n.flags&=2047,void(Ds=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(Ds=e);Ds=e=t}while(null!==e);0===zs&&(zs=5)}function Ol(t){var e=Hi();return $i(99,Tl.bind(null,t,e)),null}function Tl(t,e){do{Al()}while(null!==Zs);if(0!=(48&Os))throw Error(a(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(a(177));t.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=t.pendingLanes&~i;t.pendingLanes=i,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=i,t.mutableReadLanes&=i,t.entangledLanes&=i,i=t.entanglements;for(var s=t.eventTimes,l=t.expirationTimes;0<o;){var u=31-He(o),c=1<<u;i[u]=0,s[u]=-1,l[u]=-1,o&=~c}if(null!==el&&0==(24&r)&&el.has(t)&&el.delete(t),t===Ts&&(Ds=Ts=null,As=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Os,Os|=32,Ps.current=null,Vr=Xe,mr(s=gr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else t:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,o=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(t){l=null;break t}var d=0,f=-1,h=-1,p=0,g=0,m=s,b=null;e:for(;;){for(var y;m!==l||0!==o&&3!==m.nodeType||(f=d+o),m!==u||0!==c&&3!==m.nodeType||(h=d+c),3===m.nodeType&&(d+=m.nodeValue.length),null!==(y=m.firstChild);)b=m,m=y;for(;;){if(m===s)break e;if(b===l&&++p===o&&(f=d),b===u&&++g===c&&(h=d),null!==(y=m.nextSibling))break;b=(m=b).parentNode}m=y}l=-1===f||-1===h?null:{start:f,end:h}}else l=null;l=l||{start:0,end:0}}else l=null;jr={focusedElem:s,selectionRange:l},Xe=!1,sl=null,ll=!1,Ys=r;do{try{Dl()}catch(t){if(null===Ys)throw Error(a(330));Il(Ys,t),Ys=Ys.nextEffect}}while(null!==Ys);sl=null,Ys=r;do{try{for(s=t;null!==Ys;){var v=Ys.flags;if(16&v&&bt(Ys.stateNode,""),128&v){var x=Ys.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&v){case 2:vs(Ys),Ys.flags&=-3;break;case 6:vs(Ys),Ys.flags&=-3,ks(Ys.alternate,Ys);break;case 1024:Ys.flags&=-1025;break;case 1028:Ys.flags&=-1025,ks(Ys.alternate,Ys);break;case 4:ks(Ys.alternate,Ys);break;case 8:ws(s,l=Ys);var w=l.alternate;bs(l),null!==w&&bs(w)}Ys=Ys.nextEffect}}catch(t){if(null===Ys)throw Error(a(330));Il(Ys,t),Ys=Ys.nextEffect}}while(null!==Ys);if(_=jr,x=gr(),v=_.focusedElem,s=_.selectionRange,x!==v&&v&&v.ownerDocument&&pr(v.ownerDocument.documentElement,v)){null!==s&&mr(v)&&(x=s.start,void 0===(_=s.end)&&(_=x),"selectionStart"in v?(v.selectionStart=x,v.selectionEnd=Math.min(_,v.value.length)):(_=(x=v.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),l=v.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!_.extend&&w>s&&(l=s,s=w,w=l),l=hr(v,w),o=hr(v,s),l&&o&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==o.node||_.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),w>s?(_.addRange(x),_.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),_.addRange(x))))),x=[];for(_=v;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<x.length;v++)(_=x[v]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Xe=!!Vr,jr=Vr=null,t.current=n,Ys=r;do{try{for(v=t;null!==Ys;){var k=Ys.flags;if(36&k&&ps(v,Ys.alternate,Ys),128&k){x=void 0;var S=Ys.ref;if(null!==S){var M=Ys.stateNode;Ys.tag,x=M,"function"==typeof S?S(x):S.current=x}}Ys=Ys.nextEffect}}catch(t){if(null===Ys)throw Error(a(330));Il(Ys,t),Ys=Ys.nextEffect}}while(null!==Ys);Ys=null,Ii(),Os=i}else t.current=n;if(Ks)Ks=!1,Zs=t,Gs=e;else for(Ys=r;null!==Ys;)e=Ys.nextEffect,Ys.nextEffect=null,8&Ys.flags&&((k=Ys).sibling=null,k.stateNode=null),Ys=e;if(0===(r=t.pendingLanes)&&(Qs=null),1===r?t===rl?nl++:(nl=0,rl=t):nl=0,n=n.stateNode,ki&&"function"==typeof ki.onCommitFiberRoot)try{ki.onCommitFiberRoot(wi,n,void 0,64==(64&n.current.flags))}catch(t){}if(hl(t,Wi()),qs)throw qs=!1,t=Xs,Xs=null,t;return 0!=(8&Os)||qi(),null}function Dl(){for(;null!==Ys;){var t=Ys.alternate;ll||null===sl||(0!=(8&Ys.flags)?Jt(Ys,sl)&&(ll=!0):13===Ys.tag&&Ms(t,Ys)&&Jt(Ys,sl)&&(ll=!0));var e=Ys.flags;0!=(256&e)&&hs(t,Ys),0==(512&e)||Ks||(Ks=!0,Yi(97,(function(){return Al(),null}))),Ys=Ys.nextEffect}}function Al(){if(90!==Gs){var t=97<Gs?97:Gs;return Gs=90,$i(t,zl)}return!1}function Ll(t,e){Js.push(e,t),Ks||(Ks=!0,Yi(97,(function(){return Al(),null})))}function Rl(t,e){tl.push(e,t),Ks||(Ks=!0,Yi(97,(function(){return Al(),null})))}function zl(){if(null===Zs)return!1;var t=Zs;if(Zs=null,0!=(48&Os))throw Error(a(331));var e=Os;Os|=32;var n=tl;tl=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(t){if(null===o)throw Error(a(330));Il(o,t)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(t){if(null===o)throw Error(a(330));Il(o,t)}}for(l=t.current.firstEffect;null!==l;)t=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=t;return Os=e,qi(),!0}function Nl(t,e,n){co(t,e=us(0,e=as(n,e),1)),e=ul(),null!==(t=fl(t,1))&&(We(t,1,e),hl(t,e))}function Il(t,e){if(3===t.tag)Nl(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){Nl(n,t,e);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r))){var i=cs(n,t=as(e,t),1);if(co(n,i),i=ul(),null!==(n=fl(n,1)))We(n,1,i),hl(n,i);else if("function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r)))try{r.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function Fl(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),e=ul(),t.pingedLanes|=t.suspendedLanes&n,Ts===t&&(As&n)===n&&(4===zs||3===zs&&(62914560&As)===As&&500>Wi()-Ws?_l(t,0):Vs|=n),hl(t,e)}function Bl(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hi()?1:2:(0===ol&&(ol=Is),0===(e=Ve(62914560&~ol))&&(e=4194304))),n=ul(),null!==(t=fl(t,e))&&(We(t,e,n),hl(t,n))}function Vl(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function jl(t,e,n,r){return new Vl(t,e,n,r)}function Wl(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Hl(t,e){var n=t.alternate;return null===n?((n=jl(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Ul(t,e,n,r,i,o){var s=2;if(r=t,"function"==typeof t)Wl(t)&&(s=1);else if("string"==typeof t)s=5;else t:switch(t){case S:return $l(n.children,i,o,e);case N:s=8,i|=16;break;case M:s=8,i|=1;break;case E:return(t=jl(12,n,e,8|i)).elementType=E,t.type=E,t.lanes=o,t;case T:return(t=jl(13,n,e,i)).type=T,t.elementType=T,t.lanes=o,t;case D:return(t=jl(19,n,e,i)).elementType=D,t.lanes=o,t;case I:return Yl(n,i,o,e);case F:return(t=jl(24,n,e,i)).elementType=F,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case C:s=10;break t;case P:s=9;break t;case O:s=11;break t;case A:s=14;break t;case L:s=16,r=null;break t;case R:s=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=jl(s,n,e,i)).elementType=t,e.type=r,e.lanes=o,e}function $l(t,e,n,r){return(t=jl(7,t,r,e)).lanes=n,t}function Yl(t,e,n,r){return(t=jl(23,t,r,e)).elementType=I,t.lanes=n,t}function ql(t,e,n){return(t=jl(6,t,null,e)).lanes=n,t}function Xl(t,e,n){return(e=jl(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Ql(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=je(0),this.expirationTimes=je(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=je(0),this.mutableSourceEagerHydrationData=null}function Kl(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}function Zl(t,e,n,r){var i=e.current,o=ul(),s=cl(i);t:if(n){e:{if(Qt(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(mi(u)){n=vi(n,u,l);break t}}n=l}else n=di;return null===e.context?e.context=n:e.pendingContext=n,(e=uo(o,s)).payload={element:t},null!==(r=void 0===r?null:r)&&(e.callback=r),co(i,e),dl(i,s,o),s}function Gl(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Jl(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function tu(t,e){Jl(t,e),(t=t.alternate)&&Jl(t,e)}function eu(t,e,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ql(t,e,null!=n&&!0===n.hydrate),e=jl(3,null,null,2===e?7:1===e?3:0),n.current=e,e.stateNode=n,so(e),t[Jr]=n.current,Dr(8===t.nodeType?t.parentNode:t),r)for(t=0;t<r.length;t++){var i=(e=r[t])._getVersion;i=i(e._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[e,i]:n.mutableSourceEagerHydrationData.push(e,i)}this._internalRoot=n}function nu(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function ru(t,e,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var t=Gl(a);s.call(t)}}Zl(e,a,t,i)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new eu(t,0,e?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var t=Gl(a);l.call(t)}}yl((function(){Zl(e,a,t,i)}))}return Gl(a)}function iu(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(e))throw Error(a(200));return Kl(t,e,null,n)}$s=function(t,e,n){var r=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||hi.current)Na=!0;else{if(0==(n&r)){switch(Na=!1,e.tag){case 3:Ya(e),qo();break;case 5:zo(e);break;case 1:mi(e.type)&&xi(e);break;case 4:Lo(e,e.stateNode.containerInfo);break;case 10:r=e.memoizedProps.value;var i=e.type._context;ci(Zi,i._currentValue),i._currentValue=r;break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?Za(t,e,n):(ci(Io,1&Io.current),null!==(e=ns(t,e,n))?e.sibling:null);ci(Io,1&Io.current);break;case 19:if(r=0!=(n&e.childLanes),0!=(64&t.flags)){if(r)return es(t,e,n);e.flags|=64}if(null!==(i=e.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ci(Io,Io.current),r)break;return null;case 23:case 24:return e.lanes=0,ja(t,e,n)}return ns(t,e,n)}Na=0!=(16384&t.flags)}else Na=!1;switch(e.lanes=0,e.tag){case 2:if(r=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=gi(e,fi.current),io(e,n),i=aa(null,e,r,t,i,n),e.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,mi(r)){var o=!0;xi(e)}else o=!1;e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,so(e);var s=r.getDerivedStateFromProps;"function"==typeof s&&mo(e,r,s,t),i.updater=bo,e.stateNode=i,i._reactInternals=e,_o(e,r,t,n),e=$a(null,e,r,!0,o,n)}else e.tag=0,Ia(null,e,i,n),e=e.child;return e;case 16:i=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=(o=i._init)(i._payload),e.type=i,o=e.tag=function(t){if("function"==typeof t)return Wl(t)?1:0;if(null!=t){if((t=t.$$typeof)===O)return 11;if(t===A)return 14}return 2}(i),t=Ki(i,t),o){case 0:e=Ha(null,e,i,t,n);break t;case 1:e=Ua(null,e,i,t,n);break t;case 11:e=Fa(null,e,i,t,n);break t;case 14:e=Ba(null,e,i,Ki(i.type,t),r,n);break t}throw Error(a(306,i,""))}return e;case 0:return r=e.type,i=e.pendingProps,Ha(t,e,r,i=e.elementType===r?i:Ki(r,i),n);case 1:return r=e.type,i=e.pendingProps,Ua(t,e,r,i=e.elementType===r?i:Ki(r,i),n);case 3:if(Ya(e),r=e.updateQueue,null===t||null===r)throw Error(a(282));if(r=e.pendingProps,i=null!==(i=e.memoizedState)?i.element:null,lo(t,e),ho(e,r,null,n),(r=e.memoizedState.element)===i)qo(),e=ns(t,e,n);else{if((o=(i=e.stateNode).hydrate)&&(Vo=qr(e.stateNode.containerInfo.firstChild),Bo=e,o=jo=!0),o){if(null!=(t=i.mutableSourceEagerHydrationData))for(i=0;i<t.length;i+=2)(o=t[i])._workInProgressVersionPrimary=t[i+1],Xo.push(o);for(n=Co(e,null,r,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(t,e,r,n),qo();e=e.child}return e;case 5:return zo(e),null===t&&Uo(e),r=e.type,i=e.pendingProps,o=null!==t?t.memoizedProps:null,s=i.children,Hr(r,i)?s=null:null!==o&&Hr(r,o)&&(e.flags|=16),Wa(t,e),Ia(t,e,s,n),e.child;case 6:return null===t&&Uo(e),null;case 13:return Za(t,e,n);case 4:return Lo(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=Eo(e,null,r,n):Ia(t,e,r,n),e.child;case 11:return r=e.type,i=e.pendingProps,Fa(t,e,r,i=e.elementType===r?i:Ki(r,i),n);case 7:return Ia(t,e,e.pendingProps,n),e.child;case 8:case 12:return Ia(t,e,e.pendingProps.children,n),e.child;case 10:t:{r=e.type._context,i=e.pendingProps,s=e.memoizedProps,o=i.value;var l=e.type._context;if(ci(Zi,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=ur(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!hi.current){e=ns(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=uo(-1,n&-n)).tag=2,co(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ro(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===e.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===e){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ia(t,e,i.children,n),e=e.child}return e;case 9:return i=e.type,r=(o=e.pendingProps).children,io(e,n),r=r(i=oo(i,o.unstable_observedBits)),e.flags|=1,Ia(t,e,r,n),e.child;case 14:return o=Ki(i=e.type,e.pendingProps),Ba(t,e,i,o=Ki(i.type,o),r,n);case 15:return Va(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,i=e.pendingProps,i=e.elementType===r?i:Ki(r,i),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,mi(r)?(t=!0,xi(e)):t=!1,io(e,n),vo(e,r,i),_o(e,r,i,n),$a(null,e,r,!0,t,n);case 19:return es(t,e,n);case 23:case 24:return ja(t,e,n)}throw Error(a(156,e.tag))},eu.prototype.render=function(t){Zl(t,this._internalRoot,null,null)},eu.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Zl(null,t,null,(function(){e[Jr]=null}))},te=function(t){13===t.tag&&(dl(t,4,ul()),tu(t,4))},ee=function(t){13===t.tag&&(dl(t,67108864,ul()),tu(t,67108864))},ne=function(t){if(13===t.tag){var e=ul(),n=cl(t);dl(t,n,e),tu(t,n)}},re=function(t,e){return e()},Et=function(t,e,n){switch(e){case"input":if(nt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var i=ii(r);if(!i)throw Error(a(90));Z(r),nt(r,i)}}}break;case"textarea":ut(t,n);break;case"select":null!=(e=n.value)&&at(t,!!n.multiple,e,!1)}},At=bl,Lt=function(t,e,n,r,i){var o=Os;Os|=4;try{return $i(98,t.bind(null,e,n,r,i))}finally{0===(Os=o)&&(Us(),qi())}},Rt=function(){0==(49&Os)&&(function(){if(null!==el){var t=el;el=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,hl(t,Wi())}))}qi()}(),Al())},zt=function(t,e){var n=Os;Os|=2;try{return t(e)}finally{0===(Os=n)&&(Us(),qi())}};var ou={Events:[ni,ri,ii,Tt,Dt,Al,{current:!1}]},au={findFiberByHostInstance:ei,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},su={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=Gt(t))?null:t.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lu.isDisabled&&lu.supportsFiber)try{wi=lu.inject(su),ki=lu}catch(gt){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ou,e.createPortal=iu,e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw Error(a(268,Object.keys(t)))}return null===(t=Gt(e))?null:t.stateNode},e.flushSync=function(t,e){var n=Os;if(0!=(48&n))return t(e);Os|=1;try{if(t)return $i(99,t.bind(null,e))}finally{Os=n,qi()}},e.hydrate=function(t,e,n){if(!nu(e))throw Error(a(200));return ru(null,t,e,!0,n)},e.render=function(t,e,n){if(!nu(e))throw Error(a(200));return ru(null,t,e,!1,n)},e.unmountComponentAtNode=function(t){if(!nu(t))throw Error(a(40));return!!t._reactRootContainer&&(yl((function(){ru(null,null,t,!1,(function(){t._reactRootContainer=null,t[Jr]=null}))})),!0)},e.unstable_batchedUpdates=bl,e.unstable_createPortal=function(t,e){return iu(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},e.unstable_renderSubtreeIntoContainer=function(t,e,n,r){if(!nu(n))throw Error(a(200));if(null==t||void 0===t._reactInternals)throw Error(a(38));return ru(t,e,n,!1,r)},e.version="17.0.2"},935:(t,e,n)=>{!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(448)},408:(t,e,n)=>{var r=n(418),i=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,s=60110,l=60112;e.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;i=d("react.element"),o=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),e.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}function b(){}function y(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(h(85));this.updater.enqueueSetState(this,t,e,"setState")},m.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},b.prototype=m.prototype;var v=y.prototype=new b;v.constructor=y,r(v,m.prototype),v.isPureReactComponent=!0;var x={current:null},_=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,n){var r,o={},a=null,s=null;if(null!=e)for(r in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)_.call(e,r)&&!w.hasOwnProperty(r)&&(o[r]=e[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(t&&t.defaultProps)for(r in l=t.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:t,key:a,ref:s,props:o,_owner:x.current}}function S(t){return"object"==typeof t&&null!==t&&t.$$typeof===i}var M=/\/+/g;function E(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function C(t,e,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=t),t=""===r?"."+E(l,0):r,Array.isArray(a)?(n="",null!=t&&(n=t.replace(M,"$&/")+"/"),C(a,e,n,"",(function(t){return t}))):null!=a&&(S(a)&&(a=function(t,e){return{$$typeof:i,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(M,"$&/")+"/")+t)),e.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=r+E(s=t[u],u);l+=C(s,e,n,c,a)}else if(c=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=f&&t[f]||t["@@iterator"])?t:null}(t),"function"==typeof c)for(t=c.call(t),u=0;!(s=t.next()).done;)l+=C(s=s.value,e,n,c=r+E(s,u++),a);else if("object"===s)throw e=""+t,Error(h(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return l}function P(t,e,n){if(null==t)return t;var r=[],i=0;return C(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function O(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var T={current:null};function D(){var t=T.current;if(null===t)throw Error(h(321));return t}var A={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};e.Children={map:P,forEach:function(t,e,n){P(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return P(t,(function(){e++})),e},toArray:function(t){return P(t,(function(t){return t}))||[]},only:function(t){if(!S(t))throw Error(h(143));return t}},e.Component=m,e.PureComponent=y,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,e.cloneElement=function(t,e,n){if(null==t)throw Error(h(267,t));var o=r({},t.props),a=t.key,s=t.ref,l=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,l=x.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var u=t.type.defaultProps;for(c in e)_.call(e,c)&&!w.hasOwnProperty(c)&&(o[c]=void 0===e[c]&&void 0!==u?u[c]:e[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];o.children=u}return{$$typeof:i,type:t.type,key:a,ref:s,props:o,_owner:l}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:s,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:l,render:t}},e.isValidElement=S,e.lazy=function(t){return{$$typeof:c,_payload:{_status:-1,_result:t},_init:O}},e.memo=function(t,e){return{$$typeof:u,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return D().useCallback(t,e)},e.useContext=function(t,e){return D().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return D().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return D().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return D().useLayoutEffect(t,e)},e.useMemo=function(t,e){return D().useMemo(t,e)},e.useReducer=function(t,e,n){return D().useReducer(t,e,n)},e.useRef=function(t){return D().useRef(t)},e.useState=function(t){return D().useState(t)},e.version="17.0.2"},294:(t,e,n)=>{t.exports=n(408)},53:(t,e)=>{var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var t=e.unstable_now();u(!0,t),u=null}catch(t){throw setTimeout(d,0),t}};n=function(t){null!==u?setTimeout(n,0,t):(u=t,setTimeout(d,0))},r=function(t,e){c=setTimeout(t,e)},i=function(){clearTimeout(c)},e.unstable_shouldYield=function(){return!1},o=e.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,y=5,v=0;e.unstable_shouldYield=function(){return e.unstable_now()>=v},o=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<t?Math.floor(1e3/t):5};var x=new MessageChannel,_=x.port2;x.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();v=t+y;try{m(!0,t)?_.postMessage(null):(g=!1,m=null)}catch(t){throw _.postMessage(null),t}}else g=!1},n=function(t){m=t,g||(g=!0,_.postMessage(null))},r=function(t,n){b=f((function(){t(e.unstable_now())}),n)},i=function(){h(b),b=-1}}function w(t,e){var n=t.length;t.push(e);t:for(;;){var r=n-1>>>1,i=t[r];if(!(void 0!==i&&0<M(i,e)))break t;t[r]=e,t[n]=i,n=r}}function k(t){return void 0===(t=t[0])?null:t}function S(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var r=0,i=t.length;r<i;){var o=2*(r+1)-1,a=t[o],s=o+1,l=t[s];if(void 0!==a&&0>M(a,n))void 0!==l&&0>M(l,a)?(t[r]=l,t[s]=n,r=s):(t[r]=a,t[o]=n,r=o);else{if(!(void 0!==l&&0>M(l,n)))break t;t[r]=l,t[s]=n,r=s}}}return e}return null}function M(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var E=[],C=[],P=1,O=null,T=3,D=!1,A=!1,L=!1;function R(t){for(var e=k(C);null!==e;){if(null===e.callback)S(C);else{if(!(e.startTime<=t))break;S(C),e.sortIndex=e.expirationTime,w(E,e)}e=k(C)}}function z(t){if(L=!1,R(t),!A)if(null!==k(E))A=!0,n(N);else{var e=k(C);null!==e&&r(z,e.startTime-t)}}function N(t,n){A=!1,L&&(L=!1,i()),D=!0;var o=T;try{for(R(n),O=k(E);null!==O&&(!(O.expirationTime>n)||t&&!e.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,T=O.priorityLevel;var s=a(O.expirationTime<=n);n=e.unstable_now(),"function"==typeof s?O.callback=s:O===k(E)&&S(E),R(n)}else S(E);O=k(E)}if(null!==O)var l=!0;else{var u=k(C);null!==u&&r(z,u.startTime-n),l=!1}return l}finally{O=null,T=o,D=!1}}var I=o;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){A||D||(A=!0,n(N))},e.unstable_getCurrentPriorityLevel=function(){return T},e.unstable_getFirstCallbackNode=function(){return k(E)},e.unstable_next=function(t){switch(T){case 1:case 2:case 3:var e=3;break;default:e=T}var n=T;T=e;try{return t()}finally{T=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=I,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=T;T=t;try{return e()}finally{T=n}},e.unstable_scheduleCallback=function(t,o,a){var s=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,t){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return t={id:P++,callback:o,priorityLevel:t,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(t.sortIndex=a,w(C,t),null===k(E)&&t===k(C)&&(L?i():L=!0,r(z,a-s))):(t.sortIndex=l,w(E,t),A||D||(A=!0,n(N))),t},e.unstable_wrapCallback=function(t){var e=T;return function(){var n=T;T=e;try{return t.apply(this,arguments)}finally{T=n}}}},840:(t,e,n)=>{t.exports=n(53)},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var l=t[s],u=r.base?l[0]+r.base:l[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var f=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)e[f].references++,e[f].updater(h);else{var p=i(h,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var l=r(t,i),u=0;u<o.length;u++){var c=n(o[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(294),e=n(935),r=n(379),i=n.n(r),o=n(795),a=n.n(o),s=n(569),l=n.n(s),u=n(565),c=n.n(u),d=n(216),f=n.n(d),h=n(589),p=n.n(h),g=n(921),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=l().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=f(),i()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;const b="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function y(t,e,n){const r=n||(t=>Array.prototype.slice.call(t));let i=!1,o=[];return function(...n){o=r(n),i||(i=!0,b.call(window,(()=>{i=!1,t.apply(e,o)})))}}const v=t=>"start"===t?"left":"end"===t?"right":"center",x=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function _(){}const w=function(){let t=0;return function(){return t++}}();function k(t){return null==t}function S(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function M(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const E=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function C(t,e){return E(t)?t:e}function P(t,e){return void 0===t?e:t}const O=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function T(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function D(t,e,n,r){let i,o,a;if(S(t))if(o=t.length,r)for(i=o-1;i>=0;i--)e.call(n,t[i],i);else for(i=0;i<o;i++)e.call(n,t[i],i);else if(M(t))for(a=Object.keys(t),o=a.length,i=0;i<o;i++)e.call(n,t[a[i]],a[i])}function A(t,e){let n,r,i,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,r=t.length;n<r;++n)if(i=t[n],o=e[n],i.datasetIndex!==o.datasetIndex||i.index!==o.index)return!1;return!0}function L(t){if(S(t))return t.map(L);if(M(t)){const e=Object.create(null),n=Object.keys(t),r=n.length;let i=0;for(;i<r;++i)e[n[i]]=L(t[n[i]]);return e}return t}function R(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function z(t,e,n,r){if(!R(t))return;const i=e[t],o=n[t];M(i)&&M(o)?N(i,o,r):e[t]=L(o)}function N(t,e,n){const r=S(e)?e:[e],i=r.length;if(!M(t))return t;const o=(n=n||{}).merger||z;for(let a=0;a<i;++a){if(!M(e=r[a]))continue;const i=Object.keys(e);for(let r=0,a=i.length;r<a;++r)o(i[r],t,e,n)}return t}function I(t,e){return N(t,e,{merger:F})}function F(t,e,n){if(!R(t))return;const r=e[t],i=n[t];M(r)&&M(i)?I(r,i):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=L(i))}function B(t,e){const n=t.indexOf(".",e);return-1===n?t.length:n}function V(t,e){if(""===e)return t;let n=0,r=B(e,n);for(;t&&r>n;)t=t[e.substr(n,r-n)],n=r+1,r=B(e,n);return t}function j(t){return t.charAt(0).toUpperCase()+t.slice(1)}const W=t=>void 0!==t,H=t=>"function"==typeof t,U=Math.PI,$=2*U,Y=$+U,q=Number.POSITIVE_INFINITY,X=U/180,Q=U/2,K=U/4,Z=2*U/3,G=Math.log10,J=Math.sign;function tt(t){const e=Math.round(t);t=nt(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(G(t))),r=t/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n}function et(t){return!isNaN(parseFloat(t))&&isFinite(t)}function nt(t,e,n){return Math.abs(t-e)<n}function rt(t,e,n){let r,i,o;for(r=0,i=t.length;r<i;r++)o=t[r][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function it(t){return t*(U/180)}function ot(t){return t*(180/U)}function at(t){if(!E(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function st(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function lt(t,e){return(t-e+Y)%$-U}function ut(t){return(t%$+$)%$}function ct(t,e,n,r){const i=ut(t),o=ut(e),a=ut(n),s=ut(o-i),l=ut(a-i),u=ut(i-o),c=ut(i-a);return i===o||i===a||r&&o===a||s>l&&u<c}function dt(t,e,n){return Math.max(e,Math.min(n,t))}const ft=t=>0===t||1===t,ht=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*$/n),pt=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*$/n)+1,gt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Q),easeOutSine:t=>Math.sin(t*Q),easeInOutSine:t=>-.5*(Math.cos(U*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ft(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ft(t)?t:ht(t,.075,.3),easeOutElastic:t=>ft(t)?t:pt(t,.075,.3),easeInOutElastic(t){const e=.1125;return ft(t)?t:t<.5?.5*ht(2*t,e,.45):.5+.5*pt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-gt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*gt.easeInBounce(2*t):.5*gt.easeOutBounce(2*t-1)+.5},mt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},bt="0123456789ABCDEF",yt=t=>bt[15&t],vt=t=>bt[(240&t)>>4]+bt[15&t],xt=t=>(240&t)>>4==(15&t);function _t(t){return t+.5|0}const wt=(t,e,n)=>Math.max(Math.min(t,n),e);function kt(t){return wt(_t(2.55*t),0,255)}function St(t){return wt(_t(255*t),0,255)}function Mt(t){return wt(_t(t/2.55)/100,0,1)}function Et(t){return wt(_t(100*t),0,100)}const Ct=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Pt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Ot(t,e,n){const r=e*Math.min(n,1-n),i=(e,i=(e+t/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function Tt(t,e,n){const r=(r,i=(r+t/60)%6)=>n-n*e*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function Dt(t,e,n){const r=Ot(t,1,.5);let i;for(e+n>1&&(i=1/(e+n),e*=i,n*=i),i=0;i<3;i++)r[i]*=1-e-n,r[i]+=e;return r}function At(t){const e=t.r/255,n=t.g/255,r=t.b/255,i=Math.max(e,n,r),o=Math.min(e,n,r),a=(i+o)/2;let s,l,u;return i!==o&&(u=i-o,l=a>.5?u/(2-i-o):u/(i+o),s=i===e?(n-r)/u+(n<r?6:0):i===n?(r-e)/u+2:(e-n)/u+4,s=60*s+.5),[0|s,l||0,a]}function Lt(t,e,n,r){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,r)).map(St)}function Rt(t,e,n){return Lt(Ot,t,e,n)}function zt(t){return(t%360+360)%360}const Nt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},It={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ft;function Bt(t,e,n){if(t){let r=At(t);r[e]=Math.max(0,Math.min(r[e]+r[e]*n,0===e?360:1)),r=Rt(r),t.r=r[0],t.g=r[1],t.b=r[2]}}function Vt(t,e){return t?Object.assign(e||{},t):t}function jt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=St(t[3]))):(e=Vt(t,{r:0,g:0,b:0,a:1})).a=St(e.a),e}function Wt(t){return"r"===t.charAt(0)?function(t){const e=Ct.exec(t);let n,r,i,o=255;if(e){if(e[7]!==n){const t=+e[7];o=255&(e[8]?kt(t):255*t)}return n=+e[1],r=+e[3],i=+e[5],n=255&(e[2]?kt(n):n),r=255&(e[4]?kt(r):r),i=255&(e[6]?kt(i):i),{r:n,g:r,b:i,a:o}}}(t):function(t){const e=Pt.exec(t);let n,r=255;if(!e)return;e[5]!==n&&(r=e[6]?kt(+e[5]):St(+e[5]));const i=zt(+e[2]),o=+e[3]/100,a=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return Lt(Dt,t,e,n)}(i,o,a):"hsv"===e[1]?function(t,e,n){return Lt(Tt,t,e,n)}(i,o,a):Rt(i,o,a),{r:n[0],g:n[1],b:n[2],a:r}}(t)}class Ht{constructor(t){if(t instanceof Ht)return t;const e=typeof t;let n;var r,i,o;"object"===e?n=jt(t):"string"===e&&(o=(r=t).length,"#"===r[0]&&(4===o||5===o?i={r:255&17*mt[r[1]],g:255&17*mt[r[2]],b:255&17*mt[r[3]],a:5===o?17*mt[r[4]]:255}:7!==o&&9!==o||(i={r:mt[r[1]]<<4|mt[r[2]],g:mt[r[3]]<<4|mt[r[4]],b:mt[r[5]]<<4|mt[r[6]],a:9===o?mt[r[7]]<<4|mt[r[8]]:255})),n=i||function(t){Ft||(Ft=function(){const t={},e=Object.keys(It),n=Object.keys(Nt);let r,i,o,a,s;for(r=0;r<e.length;r++){for(a=s=e[r],i=0;i<n.length;i++)o=n[i],s=s.replace(o,Nt[o]);o=parseInt(It[a],16),t[s]=[o>>16&255,o>>8&255,255&o]}return t}(),Ft.transparent=[0,0,0,0]);const e=Ft[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Wt(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=Vt(this._rgb);return t&&(t.a=Mt(t.a)),t}set rgb(t){this._rgb=jt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${Mt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return xt(t.r)&&xt(t.g)&&xt(t.b)&&xt(t.a)}(t)?yt:vt,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=At(t),n=e[0],r=Et(e[1]),i=Et(e[2]);return t.a<255?`hsla(${n}, ${r}%, ${i}%, ${Mt(t.a)})`:`hsl(${n}, ${r}%, ${i}%)`}(this._rgb):this._rgb}mix(t,e){const n=this;if(t){const r=n.rgb,i=t.rgb;let o;const a=e===o?.5:e,s=2*a-1,l=r.a-i.a,u=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;o=1-u,r.r=255&u*r.r+o*i.r+.5,r.g=255&u*r.g+o*i.g+.5,r.b=255&u*r.b+o*i.b+.5,r.a=a*r.a+(1-a)*i.a,n.rgb=r}return n}clone(){return new Ht(this.rgb)}alpha(t){return this._rgb.a=St(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=_t(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Bt(this._rgb,2,t),this}darken(t){return Bt(this._rgb,2,-t),this}saturate(t){return Bt(this._rgb,1,t),this}desaturate(t){return Bt(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=At(t);n[0]=zt(n[0]+e),n=Rt(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function Ut(t){return new Ht(t)}const $t=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Yt(t){return $t(t)?t:Ut(t)}function qt(t){return $t(t)?t:Ut(t).saturate(.5).darken(.1).hexString()}const Xt=Object.create(null),Qt=Object.create(null);function Kt(t,e){if(!e)return t;const n=e.split(".");for(let e=0,r=n.length;e<r;++e){const r=n[e];t=t[r]||(t[r]=Object.create(null))}return t}function Zt(t,e,n){return"string"==typeof e?N(Kt(t,e),n):N(Kt(t,""),e)}var Gt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>qt(e.backgroundColor),this.hoverBorderColor=(t,e)=>qt(e.borderColor),this.hoverColor=(t,e)=>qt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(t)}set(t,e){return Zt(this,t,e)}get(t){return Kt(this,t)}describe(t,e){return Zt(Qt,t,e)}override(t,e){return Zt(Xt,t,e)}route(t,e,n,r){const i=Kt(this,t),o=Kt(this,n),a="_"+e;Object.defineProperties(i,{[a]:{value:i[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[r];return M(t)?Object.assign({},e,t):P(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Jt(t,e,n,r,i){let o=e[i];return o||(o=e[i]=t.measureText(i).width,n.push(i)),o>r&&(r=o),r}function te(t,e,n,r){let i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==e&&(i=r.data={},o=r.garbageCollect=[],r.font=e),t.save(),t.font=e;let a=0;const s=n.length;let l,u,c,d,f;for(l=0;l<s;l++)if(d=n[l],null!=d&&!0!==S(d))a=Jt(t,i,o,a,d);else if(S(d))for(u=0,c=d.length;u<c;u++)f=d[u],null==f||S(f)||(a=Jt(t,i,o,a,f));t.restore();const h=o.length/2;if(h>n.length){for(l=0;l<h;l++)delete i[o[l]];o.splice(0,h)}return a}function ee(t,e,n){const r=t.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((e-i)*r)/r+i}function ne(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function re(t,e,n,r){let i,o,a,s,l;const u=e.pointStyle,c=e.rotation,d=e.radius;let f=(c||0)*X;if(u&&"object"==typeof u&&(i=u.toString(),"[object HTMLImageElement]"===i||"[object HTMLCanvasElement]"===i))return t.save(),t.translate(n,r),t.rotate(f),t.drawImage(u,-u.width/2,-u.height/2,u.width,u.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),u){default:t.arc(n,r,d,0,$),t.closePath();break;case"triangle":t.moveTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=Z,t.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=Z,t.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),t.closePath();break;case"rectRounded":l=.516*d,s=d-l,o=Math.cos(f+K)*s,a=Math.sin(f+K)*s,t.arc(n-o,r-a,l,f-U,f-Q),t.arc(n+a,r-o,l,f-Q,f),t.arc(n+o,r+a,l,f,f+Q),t.arc(n-a,r+o,l,f+Q,f+U),t.closePath();break;case"rect":if(!c){s=Math.SQRT1_2*d,t.rect(n-s,r-s,2*s,2*s);break}f+=K;case"rectRot":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+a,r-o),t.lineTo(n+o,r+a),t.lineTo(n-a,r+o),t.closePath();break;case"crossRot":f+=K;case"cross":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a),t.moveTo(n+a,r-o),t.lineTo(n-a,r+o);break;case"star":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a),t.moveTo(n+a,r-o),t.lineTo(n-a,r+o),f+=K,o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a),t.moveTo(n+a,r-o),t.lineTo(n-a,r+o);break;case"line":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a);break;case"dash":t.moveTo(n,r),t.lineTo(n+Math.cos(f)*d,r+Math.sin(f)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function ie(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function oe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ae(t){t.restore()}function se(t,e,n,r,i){if(!e)return t.lineTo(n.x,n.y);if("middle"===i){const r=(e.x+n.x)/2;t.lineTo(r,e.y),t.lineTo(r,n.y)}else"after"===i!=!!r?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function le(t,e,n,r){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(r?e.cp1x:e.cp2x,r?e.cp1y:e.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function ue(t,e,n,r,i,o={}){const a=S(e)?e:[e],s=o.strokeWidth>0&&""!==o.strokeColor;let l,u;for(t.save(),t.font=i.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),k(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)u=a[l],s&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),k(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(u,n,r,o.maxWidth)),t.fillText(u,n,r,o.maxWidth),ce(t,n,r,u,o),r+=i.lineHeight;t.restore()}function ce(t,e,n,r,i){if(i.strikethrough||i.underline){const o=t.measureText(r),a=e-o.actualBoundingBoxLeft,s=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,u=n+o.actualBoundingBoxDescent,c=i.strikethrough?(l+u)/2:u;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=i.decorationWidth||2,t.moveTo(a,c),t.lineTo(s,c),t.stroke()}}function de(t,e){const{x:n,y:r,w:i,h:o,radius:a}=e;t.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-Q,U,!0),t.lineTo(n,r+o-a.bottomLeft),t.arc(n+a.bottomLeft,r+o-a.bottomLeft,a.bottomLeft,U,Q,!0),t.lineTo(n+i-a.bottomRight,r+o),t.arc(n+i-a.bottomRight,r+o-a.bottomRight,a.bottomRight,Q,0,!0),t.lineTo(n+i,r+a.topRight),t.arc(n+i-a.topRight,r+a.topRight,a.topRight,0,-Q,!0),t.lineTo(n+a.topLeft,r)}const fe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),he=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function pe(t,e){const n=(""+t).match(fe);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function ge(t,e){const n={},r=M(e),i=r?Object.keys(e):e,o=M(t)?r?n=>P(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of i)n[t]=+o(t)||0;return n}function me(t){return ge(t,{top:"y",right:"x",bottom:"y",left:"x"})}function be(t){return ge(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ye(t){const e=me(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ve(t,e){t=t||{},e=e||Gt.font;let n=P(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let r=P(t.style,e.style);r&&!(""+r).match(he)&&(console.warn('Invalid font style specified: "'+r+'"'),r="");const i={family:P(t.family,e.family),lineHeight:pe(P(t.lineHeight,e.lineHeight),n),size:n,style:r,weight:P(t.weight,e.weight),string:""};return i.string=function(t){return!t||k(t.size)||k(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(i),i}function xe(t,e,n,r){let i,o,a,s=!0;for(i=0,o=t.length;i<o;++i)if(a=t[i],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),s=!1),void 0!==n&&S(a)&&(a=a[n%a.length],s=!1),void 0!==a))return r&&!s&&(r.cacheable=!1),a}function _e(t,e,n){n=n||(n=>t[n]<e);let r,i=t.length-1,o=0;for(;i-o>1;)r=o+i>>1,n(r)?o=r:i=r;return{lo:o,hi:i}}const we=(t,e,n)=>_e(t,n,(r=>t[r][e]<n)),ke=(t,e,n)=>_e(t,n,(r=>t[r][e]>=n)),Se=["push","pop","shift","splice","unshift"];function Me(t,e){const n=t._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(e);-1!==i&&r.splice(i,1),r.length>0||(Se.forEach((e=>{delete t[e]})),delete t._chartjs)}function Ee(t){const e=new Set;let n,r;for(n=0,r=t.length;n<r;++n)e.add(t[n]);return e.size===r?t:Array.from(e)}function Ce(t,e=[""],n=t,r,i=(()=>t[0])){W(r)||(r=Fe("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:r,_getTarget:i,override:i=>Ce([i,...t],e,n,r)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,r)=>Ae(n,r,(()=>function(t,e,n,r){let i;for(const o of e)if(i=Fe(Te(o,t),n),W(i))return De(t,i)?Ne(n,r,t,i):i}(r,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Be(t).includes(e),ownKeys:t=>Be(t),set:(t,e,n)=>((t._storage||(t._storage=i()))[e]=n,delete t[e],delete t._keys,!0)})}function Pe(t,e,n,r){const i={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:Oe(t,r),setContext:e=>Pe(t,e,n,r),override:i=>Pe(t.override(i),e,n,r)};return new Proxy(i,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>Ae(t,e,(()=>function(t,e,n){const{_proxy:r,_context:i,_subProxy:o,_descriptors:a}=t;let s=r[e];return H(s)&&a.isScriptable(e)&&(s=function(t,e,n,r){const{_proxy:i,_context:o,_subProxy:a,_stack:s}=n;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(o,a||r),s.delete(t),M(e)&&(e=Ne(i._scopes,i,t,e)),e}(e,s,t,n)),S(s)&&s.length&&(s=function(t,e,n,r){const{_proxy:i,_context:o,_subProxy:a,_descriptors:s}=n;if(W(o.index)&&r(t))e=e[o.index%e.length];else if(M(e[0])){const n=e,r=i._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=Ne(r,i,t,l);e.push(Pe(n,o,a&&a[t],s))}}return e}(e,s,t,a.isIndexable)),De(e,s)&&(s=Pe(s,i,o&&o[e],a)),s}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,r)=>(t[n]=r,delete e[n],!0)})}function Oe(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:r=e.indexable,_allKeys:i=e.allKeys}=t;return{allKeys:i,scriptable:n,indexable:r,isScriptable:H(n)?n:()=>n,isIndexable:H(r)?r:()=>r}}const Te=(t,e)=>t?t+j(e):e,De=(t,e)=>M(e)&&"adapters"!==t;function Ae(t,e,n){let r=t[e];return W(r)||(r=n(),W(r)&&(t[e]=r)),r}function Le(t,e,n){return H(t)?t(e,n):t}const Re=(t,e)=>!0===t?e:"string"==typeof t?V(e,t):void 0;function ze(t,e,n,r){for(const i of e){const e=Re(n,i);if(e){t.add(e);const i=Le(e._fallback,n,e);if(W(i)&&i!==n&&i!==r)return i}else if(!1===e&&W(r)&&n!==r)return null}return!1}function Ne(t,e,n,r){const i=e._rootScopes,o=Le(e._fallback,n,r),a=[...t,...i],s=new Set;s.add(r);let l=Ie(s,a,n,o||n);return null!==l&&(!W(o)||o===n||(l=Ie(s,a,o,l),null!==l))&&Ce(Array.from(s),[""],i,o,(()=>function(t,e,n){const r=t._getTarget();e in r||(r[e]={});const i=r[e];return S(i)&&M(n)?n:i}(e,n,r)))}function Ie(t,e,n,r){for(;n;)n=ze(t,e,n,r);return n}function Fe(t,e){for(const n of e){if(!n)continue;const e=n[t];if(W(e))return e}}function Be(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Ve=Number.EPSILON||1e-14,je=(t,e)=>e<t.length&&!t[e].skip&&t[e],We=t=>"x"===t?"y":"x";function He(t,e,n,r){const i=t.skip?e:t,o=e,a=n.skip?e:n,s=st(o,i),l=st(a,o);let u=s/(s+l),c=l/(s+l);u=isNaN(u)?0:u,c=isNaN(c)?0:c;const d=r*u,f=r*c;return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+f*(a.x-i.x),y:o.y+f*(a.y-i.y)}}}function Ue(t,e,n){return Math.max(Math.min(t,n),e)}function $e(t,e,n,r,i){let o,a,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=We(e),r=t.length,i=Array(r).fill(0),o=Array(r);let a,s,l,u=je(t,0);for(a=0;a<r;++a)if(s=l,l=u,u=je(t,a+1),l){if(u){const t=u[e]-l[e];i[a]=0!==t?(u[n]-l[n])/t:0}o[a]=s?u?J(i[a-1])!==J(i[a])?0:(i[a-1]+i[a])/2:i[a-1]:i[a]}!function(t,e,n){const r=t.length;let i,o,a,s,l,u=je(t,0);for(let c=0;c<r-1;++c)l=u,u=je(t,c+1),l&&u&&(nt(e[c],0,Ve)?n[c]=n[c+1]=0:(i=n[c]/e[c],o=n[c+1]/e[c],s=Math.pow(i,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[c]=i*a*e[c],n[c+1]=o*a*e[c])))}(t,i,o),function(t,e,n="x"){const r=We(n),i=t.length;let o,a,s,l=je(t,0);for(let u=0;u<i;++u){if(a=s,s=l,l=je(t,u+1),!s)continue;const i=s[n],c=s[r];a&&(o=(i-a[n])/3,s[`cp1${n}`]=i-o,s[`cp1${r}`]=c-o*e[u]),l&&(o=(l[n]-i)/3,s[`cp2${n}`]=i+o,s[`cp2${r}`]=c+o*e[u])}}(t,o,e)}(t,i);else{let n=r?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)s=t[o],l=He(n,s,t[Math.min(o+1,a-(r?0:1))%a],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}e.capBezierPoints&&function(t,e){let n,r,i,o,a,s=ie(t[0],e);for(n=0,r=t.length;n<r;++n)a=o,o=s,s=n<r-1&&ie(t[n+1],e),o&&(i=t[n],a&&(i.cp1x=Ue(i.cp1x,e.left,e.right),i.cp1y=Ue(i.cp1y,e.top,e.bottom)),s&&(i.cp2x=Ue(i.cp2x,e.left,e.right),i.cp2y=Ue(i.cp2y,e.top,e.bottom)))}(t,n)}function Ye(){return"undefined"!=typeof window&&"undefined"!=typeof document}function qe(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Xe(t,e,n){let r;return"string"==typeof t?(r=parseInt(t,10),-1!==t.indexOf("%")&&(r=r/100*e.parentNode[n])):r=t,r}const Qe=t=>window.getComputedStyle(t,null),Ke=["top","right","bottom","left"];function Ze(t,e,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const o=Ke[i];r[o]=parseFloat(t[e+"-"+o+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}function Ge(t,e){const{canvas:n,currentDevicePixelRatio:r}=e,i=Qe(n),o="border-box"===i.boxSizing,a=Ze(i,"padding"),s=Ze(i,"border","width"),{x:l,y:u,box:c}=function(t,e){const n=t.native||t,r=n.touches,i=r&&r.length?r[0]:n,{offsetX:o,offsetY:a}=i;let s,l,u=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(o,a,n.target))s=o,l=a;else{const t=e.getBoundingClientRect();s=i.clientX-t.left,l=i.clientY-t.top,u=!0}return{x:s,y:l,box:u}}(t,n),d=a.left+(c&&s.left),f=a.top+(c&&s.top);let{width:h,height:p}=e;return o&&(h-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((u-f)/p*n.height/r)}}const Je=t=>Math.round(10*t)/10;function tn(t,e,n){const r=e||1,i=Math.floor(t.height*r),o=Math.floor(t.width*r);t.height=i/r,t.width=o/r;const a=t.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==r||a.height!==i||a.width!==o)&&(t.currentDevicePixelRatio=r,a.height=i,a.width=o,t.ctx.setTransform(r,0,0,r,0,0),!0)}const en=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function nn(t,e){const n=function(t,e){return Qe(t).getPropertyValue(e)}(t,e),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function rn(t,e,n,r){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function on(t,e,n,r){return{x:t.x+n*(e.x-t.x),y:"middle"===r?n<.5?t.y:e.y:"after"===r?n<1?t.y:e.y:n>0?e.y:t.y}}function an(t,e,n,r){const i={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=rn(t,i,n),s=rn(i,o,n),l=rn(o,e,n),u=rn(a,s,n),c=rn(s,l,n);return rn(u,c,n)}const sn=new Map;function ln(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let r=sn.get(n);return r||(r=new Intl.NumberFormat(t,e),sn.set(n,r)),r}(e,n).format(t)}function un(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function cn(t,e){let n,r;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=r)}function dn(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function fn(t){return"angle"===t?{between:ct,compare:lt,normalize:ut}:{between:(t,e,n)=>t>=Math.min(e,n)&&t<=Math.max(n,e),compare:(t,e)=>t-e,normalize:t=>t}}function hn({start:t,end:e,count:n,loop:r,style:i}){return{start:t%n,end:e%n,loop:r&&(e-t+1)%n==0,style:i}}function pn(t,e,n){if(!n)return[t];const{property:r,start:i,end:o}=n,a=e.length,{compare:s,between:l,normalize:u}=fn(r),{start:c,end:d,loop:f,style:h}=function(t,e,n){const{property:r,start:i,end:o}=n,{between:a,normalize:s}=fn(r),l=e.length;let u,c,{start:d,end:f,loop:h}=t;if(h){for(d+=l,f+=l,u=0,c=l;u<c&&a(s(e[d%l][r]),i,o);++u)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:t.style}}(t,e,n),p=[];let g,m,b,y=!1,v=null;for(let t=c,n=c;t<=d;++t)m=e[t%a],m.skip||(g=u(m[r]),g!==b&&(y=l(g,i,o),null===v&&(y||l(i,b,g)&&0!==s(i,b))&&(v=0===s(g,i)?t:n),null!==v&&(!y||0===s(o,g)||l(o,b,g))&&(p.push(hn({start:v,end:t,loop:f,count:a,style:h})),v=null),n=t,b=g));return null!==v&&p.push(hn({start:v,end:d,loop:f,count:a,style:h})),p}function gn(t,e){const n=[],r=t.segments;for(let i=0;i<r.length;i++){const o=pn(r[i],t.points,e);o.length&&n.push(...o)}return n}function mn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function bn(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var yn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,r){const i=e.listeners[r],o=e.duration;i.forEach((r=>r({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){const t=this;t._request||(t._running=!0,t._request=b.call(window,(()=>{t._update(),t._request=null,t._running&&t._refresh()})))}_update(t=Date.now()){const e=this;let n=0;e._charts.forEach(((r,i)=>{if(!r.running||!r.items.length)return;const o=r.items;let a,s=o.length-1,l=!1;for(;s>=0;--s)a=o[s],a._active?(a._total>r.duration&&(r.duration=a._total),a.tick(t),l=!0):(o[s]=o[o.length-1],o.pop());l&&(i.draw(),e._notify(i,r,t,"progress")),o.length||(r.running=!1,e._notify(i,r,t,"complete"),r.initial=!1),n+=o.length})),e._lastDate=t,0===n&&(e._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const vn="transparent",xn={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const r=Yt(t||vn),i=r.valid&&Yt(e||vn);return i&&i.valid?i.mix(r,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class _n{constructor(t,e,n,r){const i=e[n];r=xe([t.to,r,i,t.from]);const o=xe([t.from,i,r]);this._active=!0,this._fn=t.fn||xn[t.type||typeof o],this._easing=gt[t.easing]||gt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=r,this._promises=void 0}active(){return this._active}update(t,e,n){const r=this;if(r._active){r._notify(!1);const i=r._target[r._prop],o=n-r._start,a=r._duration-o;r._start=n,r._duration=Math.floor(Math.max(a,t.duration)),r._total+=o,r._loop=!!t.loop,r._to=xe([t.to,e,i,t.from]),r._from=xe([t.from,i,e])}}cancel(){const t=this;t._active&&(t.tick(Date.now()),t._active=!1,t._notify(!1))}tick(t){const e=this,n=t-e._start,r=e._duration,i=e._prop,o=e._from,a=e._loop,s=e._to;let l;if(e._active=o!==s&&(a||n<r),!e._active)return e._target[i]=s,void e._notify(!0);n<0?e._target[i]=o:(l=n/r%2,l=a&&l>1?2-l:l,l=e._easing(Math.min(1,Math.max(0,l))),e._target[i]=e._fn(o,s,l))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}Gt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const wn=Object.keys(Gt.animation);Gt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Gt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Gt.describe("animations",{_fallback:"animation"}),Gt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class kn{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!M(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const r=t[n];if(!M(r))return;const i={};for(const t of wn)i[t]=r[t];(S(r.properties)&&r.properties||[n]).forEach((t=>{t!==n&&e.has(t)||e.set(t,i)}))}))}_animateOptions(t,e){const n=e.options,r=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(t,e){const n=[],r=Object.keys(e);for(let e=0;e<r.length;e++){const i=t[r[e]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),i}_createAnimations(t,e){const n=this._properties,r=[],i=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){r.push(...this._animateOptions(t,e));continue}const u=e[l];let c=i[l];const d=n.get(l);if(c){if(d&&c.active()){c.update(d,u,a);continue}c.cancel()}d&&d.duration?(i[l]=c=new _n(d,t,l,u),r.push(c)):t[l]=u}return r}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(yn.add(this._chart,n),!0):void 0}}function Sn(t,e){const n=t&&t.options||{},r=n.reverse,i=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:r?o:i,end:r?i:o}}function Mn(t,e){const n=[],r=t._getSortedDatasetMetas(e);let i,o;for(i=0,o=r.length;i<o;++i)n.push(r[i].index);return n}function En(t,e,n,r){const i=t.keys,o="single"===r.mode;let a,s,l,u;if(null!==e){for(a=0,s=i.length;a<s;++a){if(l=+i[a],l===n){if(r.all)continue;break}u=t.values[l],E(u)&&(o||0===e||J(e)===J(u))&&(e+=u)}return e}}function Cn(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Pn(t,e,n){const r=t[e]||(t[e]={});return r[n]||(r[n]={})}function On(t,e,n){for(const r of e.getMatchingVisibleMetas("bar").reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function Tn(t,e){const{chart:n,_cachedMeta:r}=t,i=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=r,l=o.axis,u=a.axis,c=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,a,r),d=e.length;let f;for(let t=0;t<d;++t){const n=e[t],{[l]:r,[u]:o}=n;f=(n._stacks||(n._stacks={}))[u]=Pn(i,c,r),f[s]=o,f._top=On(f,a,!0),f._bottom=On(f,a,!1)}}function Dn(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function An(t,e){const n=t.controller.index,r=t.vScale&&t.vScale.axis;if(r){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[r]||void 0===e[r][n])return;delete e[r][n]}}}const Ln=t=>"reset"===t||"none"===t,Rn=(t,e)=>e?t:Object.assign({},t);class zn{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this,e=t._cachedMeta;t.configure(),t.linkScales(),e._stacked=Cn(e.vScale,e),t.addElements()}updateIndex(t){this.index!==t&&An(this._cachedMeta),this.index=t}linkScales(){const t=this,e=t.chart,n=t._cachedMeta,r=t.getDataset(),i=(t,e,n,r)=>"x"===t?e:"r"===t?r:n,o=n.xAxisID=P(r.xAxisID,Dn(e,"x")),a=n.yAxisID=P(r.yAxisID,Dn(e,"y")),s=n.rAxisID=P(r.rAxisID,Dn(e,"r")),l=n.indexAxis,u=n.iAxisID=i(l,o,a,s),c=n.vAxisID=i(l,a,o,s);n.xScale=t.getScaleForId(o),n.yScale=t.getScaleForId(a),n.rScale=t.getScaleForId(s),n.iScale=t.getScaleForId(u),n.vScale=t.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Me(this._data,this),t._stacked&&An(t)}_dataCheck(){const t=this,e=t.getDataset(),n=e.data||(e.data=[]),r=t._data;if(M(n))t._data=function(t){const e=Object.keys(t),n=new Array(e.length);let r,i,o;for(r=0,i=e.length;r<i;++r)o=e[r],n[r]={x:o,y:t[o]};return n}(n);else if(r!==n){if(r){Me(r,t);const e=t._cachedMeta;An(e),e._parsed=[]}n&&Object.isExtensible(n)&&function(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),Se.forEach((e=>{const n="_onData"+j(e),r=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const i=r.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[n]&&t[n](...e)})),i}})})))}(n,t),t._syncList=[],t._data=n}}addElements(){const t=this,e=t._cachedMeta;t._dataCheck(),t.datasetElementType&&(e.dataset=new t.datasetElementType)}buildOrUpdateElements(t){const e=this,n=e._cachedMeta,r=e.getDataset();let i=!1;e._dataCheck();const o=n._stacked;n._stacked=Cn(n.vScale,n),n.stack!==r.stack&&(i=!0,An(n),n.stack=r.stack),e._resyncElements(t),(i||o!==n._stacked)&&Tn(e,n._parsed)}configure(){const t=this,e=t.chart.config,n=e.datasetScopeKeys(t._type),r=e.getOptionScopes(t.getDataset(),n,!0);t.options=e.createResolver(r,t.getContext()),t._parsing=t.options.parsing}parse(t,e){const n=this,{_cachedMeta:r,_data:i}=n,{iScale:o,_stacked:a}=r,s=o.axis;let l,u,c,d=0===t&&e===i.length||r._sorted,f=t>0&&r._parsed[t-1];if(!1===n._parsing)r._parsed=i,r._sorted=!0,c=i;else{c=S(i[t])?n.parseArrayData(r,i,t,e):M(i[t])?n.parseObjectData(r,i,t,e):n.parsePrimitiveData(r,i,t,e);const o=()=>null===u[s]||f&&u[s]<f[s];for(l=0;l<e;++l)r._parsed[l+t]=u=c[l],d&&(o()&&(d=!1),f=u);r._sorted=d}a&&Tn(n,c)}parsePrimitiveData(t,e,n,r){const{iScale:i,vScale:o}=t,a=i.axis,s=o.axis,l=i.getLabels(),u=i===o,c=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,c[d]={[a]:u||i.parse(l[h],h),[s]:o.parse(e[h],h)};return c}parseArrayData(t,e,n,r){const{xScale:i,yScale:o}=t,a=new Array(r);let s,l,u,c;for(s=0,l=r;s<l;++s)u=s+n,c=e[u],a[s]={x:i.parse(c[0],u),y:o.parse(c[1],u)};return a}parseObjectData(t,e,n,r){const{xScale:i,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(r);let u,c,d,f;for(u=0,c=r;u<c;++u)d=u+n,f=e[d],l[u]={x:i.parse(V(f,a),d),y:o.parse(V(f,s),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const r=this.chart,i=this._cachedMeta,o=e[t.axis];return En({keys:Mn(r,!0),values:e._stacks[t.axis]},o,i.index,{mode:n})}updateRangeFromParsed(t,e,n,r){const i=n[e.axis];let o=null===i?NaN:i;const a=r&&n._stacks[e.axis];r&&a&&(r.values=a,t.min=Math.min(t.min,o),t.max=Math.max(t.max,o),o=En(r,i,this._cachedMeta.index,{all:!0})),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this,r=n._cachedMeta,i=r._parsed,o=r._sorted&&t===r.iScale,a=i.length,s=n._getOtherScale(t),l=e&&r._stacked&&{keys:Mn(n.chart,!0),values:null},u={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:d}=function(t){const{min:e,max:n,minDefined:r,maxDefined:i}=t.getUserBounds();return{min:r?e:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(s);let f,h,p,g;function m(){return p=i[f],h=p[t.axis],g=p[s.axis],!E(h)||c>g||d<g}for(f=0;f<a&&(m()||(n.updateRangeFromParsed(u,t,p,l),!o));++f);if(o)for(f=a-1;f>=0;--f)if(!m()){n.updateRangeFromParsed(u,t,p,l);break}return u}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let r,i,o;for(r=0,i=e.length;r<i;++r)o=e[r][t.axis],E(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,r=e.vScale,i=this.getParsed(t);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(t){const e=this,n=e._cachedMeta;e.configure(),e._cachedDataOpts={},e.update(t||"default"),n._clip=function(t){let e,n,r,i;return M(t)?(e=t.top,n=t.right,r=t.bottom,i=t.left):e=n=r=i=t,{top:e,right:n,bottom:r,left:i,disabled:!1===t}}(P(e.options.clip,function(t,e,n){if(!1===n)return!1;const r=Sn(t,n),i=Sn(e,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(n.xScale,n.yScale,e.getMaxOverflow())))}update(t){}draw(){const t=this,e=t._ctx,n=t.chart,r=t._cachedMeta,i=r.data||[],o=n.chartArea,a=[],s=t._drawStart||0,l=t._drawCount||i.length-s;let u;for(r.dataset&&r.dataset.draw(e,o,s,l),u=s;u<s+l;++u){const t=i[u];t.hidden||(t.active?a.push(t):t.draw(e,o))}for(u=0;u<a.length;++u)a[u].draw(e,o)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const r=this,i=r.getDataset();let o;if(t>=0&&t<r._cachedMeta.data.length){const e=r._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,n){return Object.assign(Object.create(t),{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(r.getContext(),t,e)),o.parsed=r.getParsed(t),o.raw=i.data[t],o.index=o.dataIndex=t}else o=r.$context||(r.$context=function(t,e){return Object.assign(Object.create(t),{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(r.chart.getContext(),r.index)),o.dataset=i,o.index=o.datasetIndex=r.index;return o.active=!!e,o.mode=n,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const r=this,i="active"===e,o=r._cachedDataOpts,a=t+"-"+e,s=o[a],l=r.enableOptionSharing&&W(n);if(s)return Rn(s,l);const u=r.chart.config,c=u.datasetElementScopeKeys(r._type,t),d=i?[`${t}Hover`,"hover",t,""]:[t,""],f=u.getOptionScopes(r.getDataset(),c),h=Object.keys(Gt.elements[t]),p=u.resolveNamedOptions(f,h,(()=>r.getContext(n,i)),d);return p.$shared&&(p.$shared=l,o[a]=Object.freeze(Rn(p,l))),p}_resolveAnimations(t,e,n){const r=this,i=r.chart,o=r._cachedDataOpts,a=`animation-${e}`,s=o[a];if(s)return s;let l;if(!1!==i.options.animation){const i=r.chart.config,o=i.datasetAnimationScopeKeys(r._type,e),a=i.getOptionScopes(r.getDataset(),o);l=i.createResolver(a,r.getContext(t,n,e))}const u=new kn(i,l&&l.animations);return l&&l._cacheable&&(o[a]=Object.freeze(u)),u}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ln(t)||this.chart._animationsDisabled}updateElement(t,e,n,r){Ln(r)?Object.assign(t,n):this._resolveAnimations(e,r).update(t,n)}updateSharedOptions(t,e,n){t&&!Ln(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,r){t.active=r;const i=this.getStyle(e,r);this._resolveAnimations(e,n,r).update(t,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this,n=e._data,r=e._cachedMeta.data;for(const[t,n,r]of e._syncList)e[t](n,r);e._syncList=[];const i=r.length,o=n.length,a=Math.min(o,i);a&&e.parse(0,a),o>i?e._insertElements(i,o-i,t):o<i&&e._removeElements(o,i-o)}_insertElements(t,e,n=!0){const r=this,i=r._cachedMeta,o=i.data,a=t+e;let s;const l=t=>{for(t.length+=e,s=t.length-1;s>=a;s--)t[s]=t[s-e]};for(l(o),s=t;s<a;++s)o[s]=new r.dataElementType;r._parsing&&l(i._parsed),r.parse(t,e),n&&r.updateElements(o,t,e,"reset")}updateElements(t,e,n,r){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(t,e);n._stacked&&An(n,r)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,r]=t;this[e](n,r)}}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){this._sync(["_removeElements",t,e]),this._sync(["_insertElements",t,arguments.length-2])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Nn(t){const e=function(t){if(!t._cache.$bar){const e=t.getMatchingVisibleMetas("bar");let n=[];for(let r=0,i=e.length;r<i;r++)n=n.concat(e[r].controller.getAllParsedValues(t));t._cache.$bar=Ee(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(t);let n,r,i,o,a=t._length;const s=()=>{32767!==i&&-32768!==i&&(W(o)&&(a=Math.min(a,Math.abs(i-o)||a)),o=i)};for(n=0,r=e.length;n<r;++n)i=t.getPixelForValue(e[n]),s();for(o=void 0,n=0,r=t.ticks.length;n<r;++n)i=t.getPixelForTick(n),s();return a}function In(t,e,n,r){return S(t)?function(t,e,n,r){const i=n.parse(t[0],r),o=n.parse(t[1],r),a=Math.min(i,o),s=Math.max(i,o);let l=a,u=s;Math.abs(a)>Math.abs(s)&&(l=s,u=a),e[n.axis]=u,e._custom={barStart:l,barEnd:u,start:i,end:o,min:a,max:s}}(t,e,n,r):e[n.axis]=n.parse(t,r),e}function Fn(t,e,n,r){const i=t.iScale,o=t.vScale,a=i.getLabels(),s=i===o,l=[];let u,c,d,f;for(u=n,c=n+r;u<c;++u)f=e[u],d={},d[i.axis]=s||i.parse(a[u],u),l.push(In(f,d,o,u));return l}function Bn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Vn(t,e,n,r){let i=e.borderSkipped;const o={};if(!i)return void(t.borderSkipped=o);const{start:a,end:s,reverse:l,top:u,bottom:c}=function(t){let e,n,r,i,o;return t.horizontal?(e=t.base>t.x,n="left",r="right"):(e=t.base<t.y,n="bottom",r="top"),e?(i="end",o="start"):(i="start",o="end"),{start:n,end:r,reverse:e,top:i,bottom:o}}(t);"middle"===i&&n&&(t.enableBorderRadius=!0,(n._top||0)===r?i=u:(n._bottom||0)===r?i=c:(o[jn(c,a,s,l)]=!0,i=u)),o[jn(i,a,s,l)]=!0,t.borderSkipped=o}function jn(t,e,n,r){var i,o,a;return r?(a=n,t=Wn(t=(i=t)===(o=e)?a:i===a?o:i,n,e)):t=Wn(t,e,n),t}function Wn(t,e,n){return"start"===t?e:"end"===t?n:t}zn.defaults={},zn.prototype.datasetElementType=null,zn.prototype.dataElementType=null;class Hn extends zn{parsePrimitiveData(t,e,n,r){return Fn(t,e,n,r)}parseArrayData(t,e,n,r){return Fn(t,e,n,r)}parseObjectData(t,e,n,r){const{iScale:i,vScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===i.axis?a:s,u="x"===o.axis?a:s,c=[];let d,f,h,p;for(d=n,f=n+r;d<f;++d)p=e[d],h={},h[i.axis]=i.parse(V(p,l),d),c.push(In(V(p,u),h,o,d));return c}updateRangeFromParsed(t,e,n,r){super.updateRangeFromParsed(t,e,n,r);const i=n._custom;i&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,i.min),t.max=Math.max(t.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:r}=e,i=this.getParsed(t),o=i._custom,a=Bn(o)?"["+o.start+", "+o.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:a}}initialize(){const t=this;t.enableOptionSharing=!0,super.initialize(),t._cachedMeta.stack=t.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,r){const i=this,o="reset"===r,{index:a,_cachedMeta:{vScale:s}}=i,l=s.getBasePixel(),u=s.isHorizontal(),c=i._getRuler(),d=i.resolveDataElementOptions(e,r),f=i.getSharedOptions(d),h=i.includeOptions(r,f);i.updateSharedOptions(f,r,d);for(let d=e;d<e+n;d++){const e=i.getParsed(d),n=o||k(e[s.axis])?{base:l,head:l}:i._calculateBarValuePixels(d),p=i._calculateBarIndexPixels(d,c),g=(e._stacks||{})[s.axis],m={horizontal:u,base:n.base,enableBorderRadius:!g||Bn(e._custom)||a===g._top||a===g._bottom,x:u?n.head:p.center,y:u?p.center:n.head,height:u?p.size:Math.abs(n.size),width:u?Math.abs(n.size):p.size};h&&(m.options=f||i.resolveDataElementOptions(d,t[d].active?"active":r)),Vn(m,m.options||t[d].options,g,a),i.updateElement(t[d],d,m,r)}}_getStacks(t,e){const n=this._cachedMeta.iScale,r=n.getMatchingVisibleMetas(this._type),i=n.options.stacked,o=r.length,a=[];let s,l;for(s=0;s<o;++s)if(l=r[s],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(k(t)||isNaN(t))continue}if((!1===i||-1===a.indexOf(l.stack)||void 0===i&&void 0===l.stack)&&a.push(l.stack),l.index===t)break}return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const r=this._getStacks(t,n),i=void 0!==e?r.indexOf(e):-1;return-1===i?r.length-1:i}_getRuler(){const t=this,e=t.options,n=t._cachedMeta,r=n.iScale,i=[];let o,a;for(o=0,a=n.data.length;o<a;++o)i.push(r.getPixelForValue(t.getParsed(o)[r.axis],o));const s=e.barThickness;return{min:s||Nn(r),pixels:i,start:r._startPixel,end:r._endPixel,stackCount:t._getStackCount(),scale:r,grouped:e.grouped,ratio:s?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(t){const e=this,{_cachedMeta:{vScale:n,_stacked:r},options:{base:i,minBarLength:o}}=e,a=i||0,s=e.getParsed(t),l=s._custom,u=Bn(l);let c,d,f=s[n.axis],h=0,p=r?e.applyStack(n,s,r):f;p!==f&&(h=p-f,p=f),u&&(f=l.barStart,p=l.barEnd-l.barStart,0!==f&&J(f)!==J(l.barEnd)&&(h=0),h+=f);const g=k(i)||u?h:i;let m=n.getPixelForValue(g);if(c=e.chart.getDataVisibility(t)?n.getPixelForValue(h+p):m,d=c-m,Math.abs(d)<o&&(d=function(t,e,n){return 0!==t?J(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(d,n,a)*o,f===a&&(m-=d/2),c=m+d),m===n.getPixelForValue(a)){const t=J(d)*n.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const n=this,r=e.scale,i=n.options,o=i.skipNull,a=P(i.maxBarThickness,1/0);let s,l;if(e.grouped){const r=o?n._getStackCount(t):e.stackCount,u="flex"===i.barThickness?function(t,e,n,r){const i=e.pixels,o=i[t];let a=t>0?i[t-1]:null,s=t<i.length-1?i[t+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?e.end-e.start:s-o)),null===s&&(s=o+o-a);const u=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:u}}(t,e,i,r):function(t,e,n,r){const i=n.barThickness;let o,a;return k(i)?(o=e.min*n.categoryPercentage,a=n.barPercentage):(o=i*r,a=1),{chunk:o/r,ratio:a,start:e.pixels[t]-o/2}}(t,e,i,r),c=n._getStackIndex(n.index,n._cachedMeta.stack,o?t:void 0);s=u.start+u.chunk*c+u.chunk/2,l=Math.min(a,u.chunk*u.ratio)}else s=r.getPixelForValue(n.getParsed(t)[r.axis],t),l=Math.min(a,e.min*e.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const t=this,e=t._cachedMeta,n=e.vScale,r=e.data,i=r.length;let o=0;for(;o<i;++o)null!==t.getParsed(o)[n.axis]&&r[o].draw(t._ctx)}}Hn.id="bar",Hn.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Hn.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Un extends zn{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(t,e,n,r){const{xScale:i,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=[];let u,c,d;for(u=n,c=n+r;u<c;++u)d=e[u],l.push({x:i.parse(V(d,a),u),y:o.parse(V(d,s),u),_custom:d&&d.r&&+d.r});return l}getMaxOverflow(){const{data:t,_parsed:e}=this._cachedMeta;let n=0;for(let r=t.length-1;r>=0;--r)n=Math.max(n,t[r].size()/2,e[r]._custom);return n>0&&n}getLabelAndValue(t){const e=this._cachedMeta,{xScale:n,yScale:r}=e,i=this.getParsed(t),o=n.getLabelForValue(i.x),a=r.getLabelForValue(i.y),s=i._custom;return{label:e.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s}=i._cachedMeta,l=i.resolveDataElementOptions(e,r),u=i.getSharedOptions(l),c=i.includeOptions(r,u),d=a.axis,f=s.axis;for(let l=e;l<e+n;l++){const e=t[l],n=!o&&i.getParsed(l),u={},h=u[d]=o?a.getPixelForDecimal(.5):a.getPixelForValue(n[d]),p=u[f]=o?s.getBasePixel():s.getPixelForValue(n[f]);u.skip=isNaN(h)||isNaN(p),c&&(u.options=i.resolveDataElementOptions(l,e.active?"active":r),o&&(u.options.radius=0)),i.updateElement(e,l,u,r)}i.updateSharedOptions(u,r,l)}resolveDataElementOptions(t,e){const n=this.getParsed(t);let r=super.resolveDataElementOptions(t,e);r.$shared&&(r=Object.assign({},r,{$shared:!1}));const i=r.radius;return"active"!==e&&(r.radius=0),r.radius+=P(n&&n._custom,i),r}}Un.id="bubble",Un.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Un.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class $n extends zn{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,r=this._cachedMeta;let i,o;for(i=t,o=t+e;i<o;++i)r._parsed[i]=+n[i]}_getRotation(){return it(this.options.rotation-90)}_getCircumference(){return it(this.options.circumference)}_getRotationExtents(){let t=$,e=-$;const n=this;for(let r=0;r<n.chart.data.datasets.length;++r)if(n.chart.isDatasetVisible(r)){const i=n.chart.getDatasetMeta(r).controller,o=i._getRotation(),a=i._getCircumference();t=Math.min(t,o),e=Math.max(e,o+a)}return{rotation:t,circumference:e-t}}update(t){const e=this,n=e.chart,{chartArea:r}=n,i=e._cachedMeta,o=i.data,a=e.getMaxBorderWidth()+e.getMaxOffset(o)+e.options.spacing,s=Math.max((Math.min(r.width,r.height)-a)/2,0),l=Math.min((c=s,"string"==typeof(u=e.options.cutout)&&u.endsWith("%")?parseFloat(u)/100:u/c),1);var u,c;const d=e._getRingWeight(e.index),{circumference:f,rotation:h}=e._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:m,offsetY:b}=function(t,e,n){let r=1,i=1,o=0,a=0;if(e<$){const s=t,l=s+e,u=Math.cos(s),c=Math.sin(s),d=Math.cos(l),f=Math.sin(l),h=(t,e,r)=>ct(t,s,l,!0)?1:Math.max(e,e*n,r,r*n),p=(t,e,r)=>ct(t,s,l,!0)?-1:Math.min(e,e*n,r,r*n),g=h(0,u,d),m=h(Q,c,f),b=p(U,u,d),y=p(U+Q,c,f);r=(g-b)/2,i=(m-y)/2,o=-(g+b)/2,a=-(m+y)/2}return{ratioX:r,ratioY:i,offsetX:o,offsetY:a}}(h,f,l),y=(r.width-a)/p,v=(r.height-a)/g,x=Math.max(Math.min(y,v)/2,0),_=O(e.options.radius,x),w=(_-Math.max(_*l,0))/e._getVisibleDatasetWeightTotal();e.offsetX=m*_,e.offsetY=b*_,i.total=e.calculateTotal(),e.outerRadius=_-w*e._getRingWeightOffset(e.index),e.innerRadius=Math.max(e.outerRadius-w*d,0),e.updateElements(o,0,o.length,t)}_circumference(t,e){const n=this,r=n.options,i=n._cachedMeta,o=n._getCircumference();return e&&r.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:n.calculateCircumference(i._parsed[t]*o/$)}updateElements(t,e,n,r){const i=this,o="reset"===r,a=i.chart,s=a.chartArea,l=a.options.animation,u=(s.left+s.right)/2,c=(s.top+s.bottom)/2,d=o&&l.animateScale,f=d?0:i.innerRadius,h=d?0:i.outerRadius,p=i.resolveDataElementOptions(e,r),g=i.getSharedOptions(p),m=i.includeOptions(r,g);let b,y=i._getRotation();for(b=0;b<e;++b)y+=i._circumference(b,o);for(b=e;b<e+n;++b){const e=i._circumference(b,o),n=t[b],a={x:u+i.offsetX,y:c+i.offsetY,startAngle:y,endAngle:y+e,circumference:e,outerRadius:h,innerRadius:f};m&&(a.options=g||i.resolveDataElementOptions(b,n.active?"active":r)),y+=e,i.updateElement(n,b,a,r)}i.updateSharedOptions(g,r,p)}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,r=0;for(n=0;n<e.length;n++){const i=t._parsed[n];null===i||isNaN(i)||!this.chart.getDataVisibility(n)||e[n].hidden||(r+=Math.abs(i))}return r}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?$*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=ln(e._parsed[t],n.options.locale);return{label:r[t]||"",value:i}}getMaxBorderWidth(t){const e=this;let n=0;const r=e.chart;let i,o,a,s,l;if(!t)for(i=0,o=r.data.datasets.length;i<o;++i)if(r.isDatasetVisible(i)){a=r.getDatasetMeta(i),t=a.data,s=a.controller,s!==e&&s.configure();break}if(!t)return 0;for(i=0,o=t.length;i<o;++i)l=s.resolveDataElementOptions(i),"inner"!==l.borderAlign&&(n=Math.max(n,l.borderWidth||0,l.hoverBorderWidth||0));return n}getMaxOffset(t){let e=0;for(let n=0,r=t.length;n<r;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(P(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}$n.id="doughnut",$n.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},$n.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},$n.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,r)=>{const i=t.getDatasetMeta(0).controller.getStyle(r);return{text:e,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(r),index:r}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const n=": "+t.formattedValue;return S(e)?(e=e.slice(),e[0]+=n):e+=n,e}}}}};class Yn extends zn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this,n=e._cachedMeta,{dataset:r,data:i=[],_dataset:o}=n,a=e.chart._animationsDisabled;let{start:s,count:l}=function(t,e,n){const r=e.length;let i=0,o=r;if(t._sorted){const{iScale:a,_parsed:s}=t,l=a.axis,{min:u,max:c,minDefined:d,maxDefined:f}=a.getUserBounds();d&&(i=dt(Math.min(we(s,a.axis,u).lo,n?r:we(e,l,a.getPixelForValue(u)).lo),0,r-1)),o=f?dt(Math.max(we(s,a.axis,c).hi+1,n?0:we(e,l,a.getPixelForValue(c)).hi+1),i,r)-i:r-i}return{start:i,count:o}}(n,i,a);e._drawStart=s,e._drawCount=l,function(t){const{xScale:e,yScale:n,_scaleRanges:r}=t,i={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!r)return t._scaleRanges=i,!0;const o=r.xmin!==e.min||r.xmax!==e.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),o}(n)&&(s=0,l=i.length),r._datasetIndex=e.index,r._decimated=!!o._decimated,r.points=i;const u=e.resolveDatasetElementOptions(t);e.options.showLine||(u.borderWidth=0),u.segment=e.options.segment,e.updateElement(r,void 0,{animated:!a,options:u},t),e.updateElements(i,s,l,t)}updateElements(t,e,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s,_stacked:l}=i._cachedMeta,u=i.resolveDataElementOptions(e,r),c=i.getSharedOptions(u),d=i.includeOptions(r,c),f=a.axis,h=s.axis,p=i.options.spanGaps,g=et(p)?p:Number.POSITIVE_INFINITY,m=i.chart._animationsDisabled||o||"none"===r;let b=e>0&&i.getParsed(e-1);for(let u=e;u<e+n;++u){const e=t[u],n=i.getParsed(u),p=m?e:{},y=k(n[h]),v=p[f]=a.getPixelForValue(n[f],u),x=p[h]=o||y?s.getBasePixel():s.getPixelForValue(l?i.applyStack(s,n,l):n[h],u);p.skip=isNaN(v)||isNaN(x)||y,p.stop=u>0&&n[f]-b[f]>g,p.parsed=n,d&&(p.options=c||i.resolveDataElementOptions(u,e.active?"active":r)),m||i.updateElement(e,u,p,r),b=n}i.updateSharedOptions(c,r,u)}getMaxOverflow(){const t=this,e=t._cachedMeta,n=e.dataset,r=n.options&&n.options.borderWidth||0,i=e.data||[];if(!i.length)return r;const o=i[0].size(t.resolveDataElementOptions(0)),a=i[i.length-1].size(t.resolveDataElementOptions(i.length-1));return Math.max(r,o,a)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Yn.id="line",Yn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Yn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class qn extends zn{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=ln(e._parsed[t].r,n.options.locale);return{label:r[t]||"",value:i}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this,e=t.chart,n=e.chartArea,r=e.options,i=Math.min(n.right-n.left,n.bottom-n.top),o=Math.max(i/2,0),a=(o-Math.max(r.cutoutPercentage?o/100*r.cutoutPercentage:1,0))/e.getVisibleDatasetCount();t.outerRadius=o-a*t.index,t.innerRadius=t.outerRadius-a}updateElements(t,e,n,r){const i=this,o="reset"===r,a=i.chart,s=i.getDataset(),l=a.options.animation,u=i._cachedMeta.rScale,c=u.xCenter,d=u.yCenter,f=u.getIndexAngle(0)-.5*U;let h,p=f;const g=360/i.countVisibleElements();for(h=0;h<e;++h)p+=i._computeAngle(h,r,g);for(h=e;h<e+n;h++){const e=t[h];let n=p,m=p+i._computeAngle(h,r,g),b=a.getDataVisibility(h)?u.getDistanceFromCenterForValue(s.data[h]):0;p=m,o&&(l.animateScale&&(b=0),l.animateRotate&&(n=m=f));const y={x:c,y:d,innerRadius:0,outerRadius:b,startAngle:n,endAngle:m,options:i.resolveDataElementOptions(h,e.active?"active":r)};i.updateElement(e,h,y,r)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let n=0;return e.data.forEach(((e,r)=>{!isNaN(t.data[r])&&this.chart.getDataVisibility(r)&&n++})),n}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?it(this.resolveDataElementOptions(t,e).angle||n):0}}qn.id="polarArea",qn.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},qn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,r)=>{const i=t.getDatasetMeta(0).controller.getStyle(r);return{text:e,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(r),index:r}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Xn extends $n{}Xn.id="pie",Xn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Qn extends zn{getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}update(t){const e=this,n=e._cachedMeta,r=n.dataset,i=n.data||[],o=n.iScale.getLabels();if(r.points=i,"resize"!==t){const n=e.resolveDatasetElementOptions(t);e.options.showLine||(n.borderWidth=0);const a={_loop:!0,_fullLoop:o.length===i.length,options:n};e.updateElement(r,void 0,a,t)}e.updateElements(i,0,i.length,t)}updateElements(t,e,n,r){const i=this,o=i.getDataset(),a=i._cachedMeta.rScale,s="reset"===r;for(let l=e;l<e+n;l++){const e=t[l],n=i.resolveDataElementOptions(l,e.active?"active":r),u=a.getPointPositionForValue(l,o.data[l]),c=s?a.xCenter:u.x,d=s?a.yCenter:u.y,f={x:c,y:d,angle:u.angle,skip:isNaN(c)||isNaN(d),options:n};i.updateElement(e,l,f,r)}}}Qn.id="radar",Qn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Qn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Kn extends Yn{}Kn.id="scatter",Kn.defaults={showLine:!1,fill:!1},Kn.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Zn=Object.freeze({__proto__:null,BarController:Hn,BubbleController:Un,DoughnutController:$n,LineController:Yn,PolarAreaController:qn,PieController:Xn,RadarController:Qn,ScatterController:Kn});function Gn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Jn{constructor(t){this.options=t||{}}formats(){return Gn()}parse(t,e){return Gn()}format(t,e){return Gn()}add(t,e,n){return Gn()}diff(t,e,n){return Gn()}startOf(t,e,n){return Gn()}endOf(t,e){return Gn()}}Jn.override=function(t){Object.assign(Jn.prototype,t)};var tr={_date:Jn};function er(t,e){return"native"in t?{x:t.x,y:t.y}:Ge(t,e)}function nr(t,e,n,r){const{controller:i,data:o,_sorted:a}=t,s=i._cachedMeta.iScale;if(s&&e===s.axis&&a&&o.length){const t=s._reversePixels?ke:we;if(!r)return t(o,e,n);if(i._sharedOptions){const r=o[0],i="function"==typeof r.getRange&&r.getRange(e);if(i){const r=t(o,e,n-i),a=t(o,e,n+i);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function rr(t,e,n,r,i){const o=t.getSortedVisibleDatasetMetas(),a=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:s}=o[t],{lo:l,hi:u}=nr(o[t],e,a,i);for(let t=l;t<=u;++t){const e=s[t];e.skip||r(e,n,t)}}}function ir(t,e,n,r){const i=[];return ie(e,t.chartArea,t._minPadding)?(rr(t,n,e,(function(t,n,o){t.inRange(e.x,e.y,r)&&i.push({element:t,datasetIndex:n,index:o})}),!0),i):i}function or(t,e,n,r,i){const o=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,r){const i=e?Math.abs(t.x-r.x):0,o=n?Math.abs(t.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}(n);let a=Number.POSITIVE_INFINITY,s=[];return ie(e,t.chartArea,t._minPadding)?(rr(t,n,e,(function(n,l,u){if(r&&!n.inRange(e.x,e.y,i))return;const c=n.getCenterPoint(i);if(!ie(c,t.chartArea,t._minPadding)&&!n.inRange(e.x,e.y,i))return;const d=o(e,c);d<a?(s=[{element:n,datasetIndex:l,index:u}],a=d):d===a&&s.push({element:n,datasetIndex:l,index:u})})),s):s}function ar(t,e,n,r){const i=er(e,t),o=[],a=n.axis,s="x"===a?"inXRange":"inYRange";let l=!1;return function(t,e){const n=t.getSortedVisibleDatasetMetas();let r,i,o;for(let t=0,a=n.length;t<a;++t){({index:r,data:i}=n[t]);for(let t=0,n=i.length;t<n;++t)o=i[t],o.skip||e(o,r,t)}}(t,((t,e,n)=>{t[s](i[a],r)&&o.push({element:t,datasetIndex:e,index:n}),t.inRange(i.x,i.y,r)&&(l=!0)})),n.intersect&&!l?[]:o}var sr={modes:{index(t,e,n,r){const i=er(e,t),o=n.axis||"x",a=n.intersect?ir(t,i,o,r):or(t,i,o,!1,r),s=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,n=t.data[e];n&&!n.skip&&s.push({element:n,datasetIndex:t.index,index:e})})),s):[]},dataset(t,e,n,r){const i=er(e,t),o=n.axis||"xy";let a=n.intersect?ir(t,i,o,r):or(t,i,o,!1,r);if(a.length>0){const e=a[0].datasetIndex,n=t.getDatasetMeta(e).data;a=[];for(let t=0;t<n.length;++t)a.push({element:n[t],datasetIndex:e,index:t})}return a},point:(t,e,n,r)=>ir(t,er(e,t),n.axis||"xy",r),nearest:(t,e,n,r)=>or(t,er(e,t),n.axis||"xy",n.intersect,r),x:(t,e,n,r)=>(n.axis="x",ar(t,e,n,r)),y:(t,e,n,r)=>(n.axis="y",ar(t,e,n,r))}};const lr=["left","top","right","bottom"];function ur(t,e){return t.filter((t=>t.pos===e))}function cr(t,e){return t.filter((t=>-1===lr.indexOf(t.pos)&&t.box.axis===e))}function dr(t,e){return t.sort(((t,n)=>{const r=e?n:t,i=e?t:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function fr(t,e,n,r){return Math.max(t[n],e[n])+Math.max(t[r],e[r])}function hr(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function pr(t,e,n,r){const{pos:i,box:o}=n,a=t.maxPadding;if(!M(i)){n.size&&(t[i]-=n.size);const e=r[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[i]+=n.size}o.getPadding&&hr(a,o.getPadding());const s=Math.max(0,e.outerWidth-fr(a,t,"left","right")),l=Math.max(0,e.outerHeight-fr(a,t,"top","bottom")),u=s!==t.w,c=l!==t.h;return t.w=s,t.h=l,n.horizontal?{same:u,other:c}:{same:c,other:u}}function gr(t,e){const n=e.maxPadding;return function(t){const r={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{r[t]=Math.max(e[t],n[t])})),r}(t?["left","right"]:["top","bottom"])}function mr(t,e,n,r){const i=[];let o,a,s,l,u,c;for(o=0,a=t.length,u=0;o<a;++o){s=t[o],l=s.box,l.update(s.width||e.w,s.height||e.h,gr(s.horizontal,e));const{same:a,other:d}=pr(e,n,s,r);u|=a&&i.length,c=c||d,l.fullSize||i.push(s)}return u&&mr(i,e,n,r)||c}function br(t,e,n,r,i){t.top=n,t.left=e,t.right=e+r,t.bottom=n+i,t.width=r,t.height=i}function yr(t,e,n,r){const i=n.padding;let{x:o,y:a}=e;for(const s of t){const t=s.box,l=r[s.stack]||{count:1,placed:0,weight:1},u=s.stackWeight/l.weight||1;if(s.horizontal){const r=e.w*u,o=l.size||t.height;W(l.start)&&(a=l.start),t.fullSize?br(t,i.left,a,n.outerWidth-i.right-i.left,o):br(t,e.left+l.placed,a,r,o),l.start=a,l.placed+=r,a=t.bottom}else{const r=e.h*u,a=l.size||t.width;W(l.start)&&(o=l.start),t.fullSize?br(t,o,i.top,a,n.outerHeight-i.bottom-i.top):br(t,o,e.top+l.placed,a,r),l.start=o,l.placed+=r,o=t.right}}e.x=o,e.y=a}Gt.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var vr={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,r){if(!t)return;const i=ye(t.options.layout.padding),o=Math.max(e-i.width,0),a=Math.max(n-i.height,0),s=function(t){const e=function(t){const e=[];let n,r,i,o,a,s;for(n=0,r=(t||[]).length;n<r;++n)i=t[n],({position:o,options:{stack:a,stackWeight:s=1}}=i),e.push({index:n,box:i,pos:o,horizontal:i.isHorizontal(),weight:i.weight,stack:a&&o+a,stackWeight:s});return e}(t),n=dr(e.filter((t=>t.box.fullSize)),!0),r=dr(ur(e,"left"),!0),i=dr(ur(e,"right")),o=dr(ur(e,"top"),!0),a=dr(ur(e,"bottom")),s=cr(e,"x"),l=cr(e,"y");return{fullSize:n,leftAndTop:r.concat(o),rightAndBottom:i.concat(l).concat(a).concat(s),chartArea:ur(e,"chartArea"),vertical:r.concat(i).concat(l),horizontal:o.concat(a).concat(s)}}(t.boxes),l=s.vertical,u=s.horizontal;D(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:n,padding:i,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),f=Object.assign({},i);hr(f,ye(r));const h=Object.assign({maxPadding:f,w:o,h:a,x:i.left,y:i.top},i),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:r,stackWeight:i}=n;if(!t||!lr.includes(r))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=i}return e}(t),{vBoxMaxWidth:r,hBoxMaxHeight:i}=e;let o,a,s;for(o=0,a=t.length;o<a;++o){s=t[o];const{fullSize:a}=s.box,l=n[s.stack],u=l&&s.stackWeight/l.weight;s.horizontal?(s.width=u?u*r:a&&e.availableWidth,s.height=i):(s.width=r,s.height=u?u*i:a&&e.availableHeight)}return n}(l.concat(u),d);mr(s.fullSize,h,d,p),mr(l,h,d,p),mr(u,h,d,p)&&mr(l,h,d,p),function(t){const e=t.maxPadding;function n(n){const r=Math.max(e[n]-t[n],0);return t[n]+=r,r}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(h),yr(s.leftAndTop,h,d,p),h.x+=h.w,h.y+=h.h,yr(s.rightAndBottom,h,d,p),t.chartArea={left:h.left,top:h.top,right:h.left+h.w,bottom:h.top+h.h,height:h.h,width:h.w},D(s.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(h.w,h.h)}))}};class xr{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,r){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,r?Math.floor(e/r):n)}}isAttached(t){return!0}}class _r extends xr{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}}const wr={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},kr=t=>null===t||""===t,Sr=!!en&&{passive:!0};function Mr(t,e,n){t.canvas.removeEventListener(e,n,Sr)}function Er(t,e,n){const r=t.canvas,i=r&&qe(r)||r,o=new MutationObserver((t=>{const e=qe(i);t.forEach((t=>{for(let r=0;r<t.addedNodes.length;r++){const o=t.addedNodes[r];o!==i&&o!==e||n(t.target)}}))}));return o.observe(document,{childList:!0,subtree:!0}),o}function Cr(t,e,n){const r=t.canvas,i=r&&qe(r);if(!i)return;const o=new MutationObserver((t=>{t.forEach((t=>{for(let e=0;e<t.removedNodes.length;e++)if(t.removedNodes[e]===r){n();break}}))}));return o.observe(i,{childList:!0}),o}const Pr=new Map;let Or=0;function Tr(){const t=window.devicePixelRatio;t!==Or&&(Or=t,Pr.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Dr(t,e,n){const r=t.canvas,i=r&&qe(r);if(!i)return;const o=y(((t,e)=>{const r=i.clientWidth;n(t,e),r<i.clientWidth&&n()}),window),a=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,r=e.contentRect.height;0===n&&0===r||o(n,r)}));return a.observe(i),function(t,e){Pr.size||window.addEventListener("resize",Tr),Pr.set(t,e)}(t,o),a}function Ar(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Pr.delete(t),Pr.size||window.removeEventListener("resize",Tr)}(t)}function Lr(t,e,n){const r=t.canvas,i=y((e=>{null!==t.ctx&&n(function(t,e){const n=wr[t.type]||t.type,{x:r,y:i}=Ge(t,e);return{type:n,chart:e,native:t,x:void 0!==r?r:null,y:void 0!==i?i:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,n){t.addEventListener(e,n,Sr)}(r,e,i),i}class Rr extends xr{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,r=t.getAttribute("height"),i=t.getAttribute("width");if(t.$chartjs={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",kr(i)){const e=nn(t,"width");void 0!==e&&(t.width=e)}if(kr(r))if(""===t.style.height)t.height=t.width/(e||2);else{const e=nn(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const r=n[t];k(r)?e.removeAttribute(t):e.setAttribute(t,r)}));const r=n.style||{};return Object.keys(r).forEach((t=>{e.style[t]=r[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const r=t.$proxies||(t.$proxies={}),i={attach:Er,detach:Cr,resize:Dr}[e]||Lr;r[e]=i(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),r=n[e];r&&(({attach:Ar,detach:Ar,resize:Ar}[e]||Mr)(t,e,r),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,r){return function(t,e,n,r){const i=Qe(t),o=Ze(i,"margin"),a=Xe(i.maxWidth,t,"clientWidth")||q,s=Xe(i.maxHeight,t,"clientHeight")||q,l=function(t,e,n){let r,i;if(void 0===e||void 0===n){const o=qe(t);if(o){const t=o.getBoundingClientRect(),a=Qe(o),s=Ze(a,"border","width"),l=Ze(a,"padding");e=t.width-l.width-s.width,n=t.height-l.height-s.height,r=Xe(a.maxWidth,o,"clientWidth"),i=Xe(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:r||q,maxHeight:i||q}}(t,e,n);let{width:u,height:c}=l;if("content-box"===i.boxSizing){const t=Ze(i,"border","width"),e=Ze(i,"padding");u-=e.width+t.width,c-=e.height+t.height}return u=Math.max(0,u-o.width),c=Math.max(0,r?Math.floor(u/r):c-o.height),u=Je(Math.min(u,a,l.maxWidth)),c=Je(Math.min(c,s,l.maxHeight)),u&&!c&&(c=Je(u/2)),{width:u,height:c}}(t,e,n,r)}isAttached(t){const e=qe(t);return!(!e||!e.isConnected)}}class zr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return et(this.x)&&et(this.y)}getProps(t,e){const n=this,r=this.$animations;if(!e||!r)return n;const i={};return t.forEach((t=>{i[t]=r[t]&&r[t].active()?r[t]._to:n[t]})),i}}zr.defaults={},zr.defaultRoutes=void 0;const Nr={values:t=>S(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const r=this.chart.options.locale;let i,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(i="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const a=G(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:i,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),ln(t,r,l)},logarithmic(t,e,n){if(0===t)return"0";const r=t/Math.pow(10,Math.floor(G(t)));return 1===r||2===r||5===r?Nr.numeric.call(this,t,e,n):""}};var Ir={formatters:Nr};function Fr(t,e,n,r,i){const o=P(r,0),a=Math.min(P(i,t.length),t.length);let s,l,u,c=0;for(n=Math.ceil(n),i&&(s=i-r,n=s/Math.floor(s/n)),u=o;u<0;)c++,u=Math.round(o+c*n);for(l=Math.max(o,0);l<a;l++)l===u&&(e.push(t[l]),c++,u=Math.round(o+c*n))}Gt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ir.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Gt.route("scale.ticks","color","","color"),Gt.route("scale.grid","color","","borderColor"),Gt.route("scale.grid","borderColor","","borderColor"),Gt.route("scale.title","color","","color"),Gt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Gt.describe("scales",{_fallback:"scale"}),Gt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Br=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function Vr(t,e){const n=[],r=t.length/e,i=t.length;let o=0;for(;o<i;o+=r)n.push(t[Math.floor(o)]);return n}function jr(t,e,n){const r=t.ticks.length,i=Math.min(e,r-1),o=t._startPixel,a=t._endPixel,s=1e-6;let l,u=t.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(u-o,a-u):0===e?(t.getPixelForTick(1)-u)/2:(u-t.getPixelForTick(i-1))/2,u+=i<e?l:-l,u<o-s||u>a+s)))return u}function Wr(t){return t.drawTicks?t.tickLength:0}function Hr(t,e){if(!t.display)return 0;const n=ve(t.font,e),r=ye(t.padding);return(S(t.text)?t.text.length:1)*n.lineHeight+r.height}function Ur(t,e,n){let r=v(t);return(n&&"right"!==e||!n&&"right"===e)&&(r=(t=>"left"===t?"right":"right"===t?"left":t)(r)),r}class $r extends zr{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){const e=this;e.options=t.setContext(e.getContext()),e.axis=t.axis,e._userMin=e.parse(t.min),e._userMax=e.parse(t.max),e._suggestedMin=e.parse(t.suggestedMin),e._suggestedMax=e.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:r}=this;return t=C(t,Number.POSITIVE_INFINITY),e=C(e,Number.NEGATIVE_INFINITY),n=C(n,Number.POSITIVE_INFINITY),r=C(r,Number.NEGATIVE_INFINITY),{min:C(t,n),max:C(e,r),minDefined:E(t),maxDefined:E(e)}}getMinMax(t){const e=this;let n,{min:r,max:i,minDefined:o,maxDefined:a}=e.getUserBounds();if(o&&a)return{min:r,max:i};const s=e.getMatchingVisibleMetas();for(let l=0,u=s.length;l<u;++l)n=s[l].controller.getMinMax(e,t),o||(r=Math.min(r,n.min)),a||(i=Math.max(i,n.max));return{min:C(r,C(i,r)),max:C(i,C(r,i))}}getPadding(){const t=this;return{left:t.paddingLeft||0,top:t.paddingTop||0,right:t.paddingRight||0,bottom:t.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){T(this.options.beforeUpdate,[this])}update(t,e,n){const r=this,i=r.options.ticks,o=i.sampleSize;r.beforeUpdate(),r.maxWidth=t,r.maxHeight=e,r._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),r.ticks=null,r._labelSizes=null,r._gridLineItems=null,r._labelItems=null,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r._maxLength=r.isHorizontal()?r.width+n.left+n.right:r.height+n.top+n.bottom,r._dataLimitsCached||(r.beforeDataLimits(),r.determineDataLimits(),r.afterDataLimits(),r._range=function(t,e){const{min:n,max:r}=t;return{min:n-Math.abs(O(e,n)),max:r+O(e,r)}}(r,r.options.grace),r._dataLimitsCached=!0),r.beforeBuildTicks(),r.ticks=r.buildTicks()||[],r.afterBuildTicks();const a=o<r.ticks.length;r._convertTicksToLabels(a?Vr(r.ticks,o):r.ticks),r.configure(),r.beforeCalculateLabelRotation(),r.calculateLabelRotation(),r.afterCalculateLabelRotation(),i.display&&(i.autoSkip||"auto"===i.source)&&(r.ticks=function(t,e){const n=t.options.ticks,r=n.maxTicksLimit||function(t){const e=t.options.offset,n=t._tickSize(),r=t._length/n+(e?0:1),i=t._maxLength/n;return Math.floor(Math.min(r,i))}(t),i=n.major.enabled?function(t){const e=[];let n,r;for(n=0,r=t.length;n<r;n++)t[n].major&&e.push(n);return e}(e):[],o=i.length,a=i[0],s=i[o-1],l=[];if(o>r)return function(t,e,n,r){let i,o=0,a=n[0];for(r=Math.ceil(r),i=0;i<t.length;i++)i===a&&(e.push(t[i]),o++,a=n[o*r])}(e,l,i,o/r),l;const u=function(t,e,n){const r=function(t){const e=t.length;let n,r;if(e<2)return!1;for(r=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==r)return!1;return r}(t),i=e.length/n;if(!r)return Math.max(i,1);const o=function(t){const e=[],n=Math.sqrt(t);let r;for(r=1;r<n;r++)t%r==0&&(e.push(r),e.push(t/r));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(r);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>i)return e}return Math.max(i,1)}(i,e,r);if(o>0){let t,n;const r=o>1?Math.round((s-a)/(o-1)):null;for(Fr(e,l,u,k(r)?0:a-r,a),t=0,n=o-1;t<n;t++)Fr(e,l,u,i[t],i[t+1]);return Fr(e,l,u,s,k(r)?e.length:s+r),l}return Fr(e,l,u),l}(r,r.ticks),r._labelSizes=null),a&&r._convertTicksToLabels(r.ticks),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate()}configure(){const t=this;let e,n,r=t.options.reverse;t.isHorizontal()?(e=t.left,n=t.right):(e=t.top,n=t.bottom,r=!r),t._startPixel=e,t._endPixel=n,t._reversePixels=r,t._length=n-e,t._alignToPixels=t.options.alignToPixels}afterUpdate(){T(this.options.afterUpdate,[this])}beforeSetDimensions(){T(this.options.beforeSetDimensions,[this])}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0}afterSetDimensions(){T(this.options.afterSetDimensions,[this])}_callHooks(t){const e=this;e.chart.notifyPlugins(t,e.getContext()),T(e.options[t],[e])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){T(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this,n=e.options.ticks;let r,i,o;for(r=0,i=t.length;r<i;r++)o=t[r],o.label=T(n.callback,[o.value,r,t],e)}afterTickToLabelConversion(){T(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){T(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this,e=t.options,n=e.ticks,r=t.ticks.length,i=n.minRotation||0,o=n.maxRotation;let a,s,l,u=i;if(!t._isVisible()||!n.display||i>=o||r<=1||!t.isHorizontal())return void(t.labelRotation=i);const c=t._getLabelSizes(),d=c.widest.width,f=c.highest.height,h=dt(t.chart.width-d,0,t.maxWidth);a=e.offset?t.maxWidth/r:h/(r-1),d+6>a&&(a=h/(r-(e.offset?.5:1)),s=t.maxHeight-Wr(e.grid)-n.padding-Hr(e.title,t.chart.options.font),l=Math.sqrt(d*d+f*f),u=ot(Math.min(Math.asin(dt((c.highest.height+6)/a,-1,1)),Math.asin(dt(s/l,-1,1))-Math.asin(dt(f/l,-1,1)))),u=Math.max(i,Math.min(o,u))),t.labelRotation=u}afterCalculateLabelRotation(){T(this.options.afterCalculateLabelRotation,[this])}beforeFit(){T(this.options.beforeFit,[this])}fit(){const t=this,e={width:0,height:0},{chart:n,options:{ticks:r,title:i,grid:o}}=t,a=t._isVisible(),s=t.isHorizontal();if(a){const a=Hr(i,n.options.font);if(s?(e.width=t.maxWidth,e.height=Wr(o)+a):(e.height=t.maxHeight,e.width=Wr(o)+a),r.display&&t.ticks.length){const{first:n,last:i,widest:o,highest:a}=t._getLabelSizes(),l=2*r.padding,u=it(t.labelRotation),c=Math.cos(u),d=Math.sin(u);if(s){const n=r.mirror?0:d*o.width+c*a.height;e.height=Math.min(t.maxHeight,e.height+n+l)}else{const n=r.mirror?0:c*o.width+d*a.height;e.width=Math.min(t.maxWidth,e.width+n+l)}t._calculatePadding(n,i,d,c)}}t._handleMargins(),s?(t.width=t._length=n.width-t._margins.left-t._margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t._margins.top-t._margins.bottom)}_calculatePadding(t,e,n,r){const i=this,{ticks:{align:o,padding:a},position:s}=i.options,l=0!==i.labelRotation,u="top"!==s&&"x"===i.axis;if(i.isHorizontal()){const s=i.getPixelForTick(0)-i.left,c=i.right-i.getPixelForTick(i.ticks.length-1);let d=0,f=0;l?u?(d=r*t.width,f=n*e.height):(d=n*t.height,f=r*e.width):"start"===o?f=e.width:"end"===o?d=t.width:(d=t.width/2,f=e.width/2),i.paddingLeft=Math.max((d-s+a)*i.width/(i.width-s),0),i.paddingRight=Math.max((f-c+a)*i.width/(i.width-c),0)}else{let n=e.height/2,r=t.height/2;"start"===o?(n=0,r=t.height):"end"===o&&(n=e.height,r=0),i.paddingTop=n+a,i.paddingBottom=r+a}}_handleMargins(){const t=this;t._margins&&(t._margins.left=Math.max(t.paddingLeft,t._margins.left),t._margins.top=Math.max(t.paddingTop,t._margins.top),t._margins.right=Math.max(t.paddingRight,t._margins.right),t._margins.bottom=Math.max(t.paddingBottom,t._margins.bottom))}afterFit(){T(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){const e=this;let n,r;for(e.beforeTickToLabelConversion(),e.generateTickLabels(t),n=0,r=t.length;n<r;n++)k(t[n].label)&&(t.splice(n,1),r--,n--);e.afterTickToLabelConversion()}_getLabelSizes(){const t=this;let e=t._labelSizes;if(!e){const n=t.options.ticks.sampleSize;let r=t.ticks;n<r.length&&(r=Vr(r,n)),t._labelSizes=e=t._computeLabelSizes(r,r.length)}return e}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:r}=this,i=[],o=[];let a,s,l,u,c,d,f,h,p,g,m,b=0,y=0;for(a=0;a<e;++a){if(u=t[a].label,c=this._resolveTickFontOptions(a),n.font=d=c.string,f=r[d]=r[d]||{data:{},gc:[]},h=c.lineHeight,p=g=0,k(u)||S(u)){if(S(u))for(s=0,l=u.length;s<l;++s)m=u[s],k(m)||S(m)||(p=Jt(n,f.data,f.gc,p,m),g+=h)}else p=Jt(n,f.data,f.gc,p,u),g=h;i.push(p),o.push(g),b=Math.max(p,b),y=Math.max(g,y)}!function(t,e){D(t,(t=>{const n=t.gc,r=n.length/2;let i;if(r>e){for(i=0;i<r;++i)delete t.data[n[i]];n.splice(0,r)}}))}(r,e);const v=i.indexOf(b),x=o.indexOf(y),_=t=>({width:i[t]||0,height:o[t]||0});return{first:_(0),last:_(e-1),widest:_(v),highest:_(x),widths:i,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){const e=this;e._reversePixels&&(t=1-t);const n=e._startPixel+t*e._length;return dt(e._alignToPixels?ee(e.chart,n,0):n,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this,n=e.ticks||[];if(t>=0&&t<n.length){const r=n[t];return r.$context||(r.$context=function(t,e,n){return Object.assign(Object.create(t),{tick:n,index:e,type:"tick"})}(e.getContext(),t,r))}return e.$context||(e.$context=(r=e.chart.getContext(),i=e,Object.assign(Object.create(r),{scale:i,type:"scale"})));var r,i}_tickSize(){const t=this,e=t.options.ticks,n=it(t.labelRotation),r=Math.abs(Math.cos(n)),i=Math.abs(Math.sin(n)),o=t._getLabelSizes(),a=e.autoSkipPadding||0,s=o?o.widest.width+a:0,l=o?o.highest.height+a:0;return t.isHorizontal()?l*r>s*i?s/r:l/i:l*i<s*r?l/r:s/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this,n=e.axis,r=e.chart,i=e.options,{grid:o,position:a}=i,s=o.offset,l=e.isHorizontal(),u=e.ticks.length+(s?1:0),c=Wr(o),d=[],f=o.setContext(e.getContext()),h=f.drawBorder?f.borderWidth:0,p=h/2,g=function(t){return ee(r,t,h)};let m,b,y,v,x,_,w,k,S,E,C,O;if("top"===a)m=g(e.bottom),_=e.bottom-c,k=m-p,E=g(t.top)+p,O=t.bottom;else if("bottom"===a)m=g(e.top),E=t.top,O=g(t.bottom)-p,_=m+p,k=e.top+c;else if("left"===a)m=g(e.right),x=e.right-c,w=m-p,S=g(t.left)+p,C=t.right;else if("right"===a)m=g(e.left),S=t.left,C=g(t.right)-p,x=m+p,w=e.left+c;else if("x"===n){if("center"===a)m=g((t.top+t.bottom)/2+.5);else if(M(a)){const t=Object.keys(a)[0],n=a[t];m=g(e.chart.scales[t].getPixelForValue(n))}E=t.top,O=t.bottom,_=m+p,k=_+c}else if("y"===n){if("center"===a)m=g((t.left+t.right)/2);else if(M(a)){const t=Object.keys(a)[0],n=a[t];m=g(e.chart.scales[t].getPixelForValue(n))}x=m-p,w=x-c,S=t.left,C=t.right}const T=P(i.ticks.maxTicksLimit,u),D=Math.max(1,Math.ceil(u/T));for(b=0;b<u;b+=D){const t=o.setContext(e.getContext(b)),n=t.lineWidth,i=t.color,a=o.borderDash||[],u=t.borderDashOffset,c=t.tickWidth,f=t.tickColor,h=t.tickBorderDash||[],p=t.tickBorderDashOffset;y=jr(e,b,s),void 0!==y&&(v=ee(r,y,n),l?x=w=S=C=v:_=k=E=O=v,d.push({tx1:x,ty1:_,tx2:w,ty2:k,x1:S,y1:E,x2:C,y2:O,width:n,color:i,borderDash:a,borderDashOffset:u,tickWidth:c,tickColor:f,tickBorderDash:h,tickBorderDashOffset:p}))}return e._ticksLength=u,e._borderValue=m,d}_computeLabelItems(t){const e=this,n=e.axis,r=e.options,{position:i,ticks:o}=r,a=e.isHorizontal(),s=e.ticks,{align:l,crossAlign:u,padding:c,mirror:d}=o,f=Wr(r.grid),h=f+c,p=d?-c:h,g=-it(e.labelRotation),m=[];let b,y,v,x,_,w,k,E,C,P,O,T,D="middle";if("top"===i)w=e.bottom-p,k=e._getXAxisLabelAlignment();else if("bottom"===i)w=e.top+p,k=e._getXAxisLabelAlignment();else if("left"===i){const t=e._getYAxisLabelAlignment(f);k=t.textAlign,_=t.x}else if("right"===i){const t=e._getYAxisLabelAlignment(f);k=t.textAlign,_=t.x}else if("x"===n){if("center"===i)w=(t.top+t.bottom)/2+h;else if(M(i)){const t=Object.keys(i)[0],n=i[t];w=e.chart.scales[t].getPixelForValue(n)+h}k=e._getXAxisLabelAlignment()}else if("y"===n){if("center"===i)_=(t.left+t.right)/2-h;else if(M(i)){const t=Object.keys(i)[0],n=i[t];_=e.chart.scales[t].getPixelForValue(n)}k=e._getYAxisLabelAlignment(f).textAlign}"y"===n&&("start"===l?D="top":"end"===l&&(D="bottom"));const A=e._getLabelSizes();for(b=0,y=s.length;b<y;++b){v=s[b],x=v.label;const t=o.setContext(e.getContext(b));E=e.getPixelForTick(b)+o.labelOffset,C=e._resolveTickFontOptions(b),P=C.lineHeight,O=S(x)?x.length:1;const n=O/2,r=t.color,l=t.textStrokeColor,c=t.textStrokeWidth;let f;if(a?(_=E,T="top"===i?"near"===u||0!==g?-O*P+P/2:"center"===u?-A.highest.height/2-n*P+P:-A.highest.height+P/2:"near"===u||0!==g?P/2:"center"===u?A.highest.height/2-n*P:A.highest.height-O*P,d&&(T*=-1)):(w=E,T=(1-O)*P/2),t.showLabelBackdrop){const e=ye(t.backdropPadding),n=A.heights[b],r=A.widths[b];let i=w+T-e.top,o=_-e.left;switch(D){case"middle":i-=n/2;break;case"bottom":i-=n}switch(k){case"center":o-=r/2;break;case"right":o-=r}f={left:o,top:i,width:r+e.width,height:n+e.height,color:t.backdropColor}}m.push({rotation:g,label:x,font:C,color:r,strokeColor:l,strokeWidth:c,textOffset:T,textAlign:k,textBaseline:D,translation:[_,w],backdrop:f})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-it(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align&&(n="right"),n}_getYAxisLabelAlignment(t){const e=this,{position:n,ticks:{crossAlign:r,mirror:i,padding:o}}=e.options,a=t+o,s=e._getLabelSizes().widest.width;let l,u;return"left"===n?i?(u=e.right+o,"near"===r?l="left":"center"===r?(l="center",u+=s/2):(l="right",u+=s)):(u=e.right-a,"near"===r?l="right":"center"===r?(l="center",u-=s/2):(l="left",u=e.left)):"right"===n?i?(u=e.left+o,"near"===r?l="right":"center"===r?(l="center",u-=s/2):(l="left",u-=s)):(u=e.left+a,"near"===r?l="left":"center"===r?(l="center",u+=s/2):(l="right",u=e.right)):l="right",{textAlign:l,x:u}}_computeLabelArea(){const t=this;if(t.options.ticks.mirror)return;const e=t.chart,n=t.options.position;return"left"===n||"right"===n?{top:0,left:t.left,bottom:e.height,right:t.right}:"top"===n||"bottom"===n?{top:t.top,left:0,bottom:t.bottom,right:e.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:r,width:i,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,r,i,o),t.restore())}getLineWidthForValue(t){const e=this,n=e.options.grid;if(!e._isVisible()||!n.display)return 0;const r=e.ticks.findIndex((e=>e.value===t));return r>=0?n.setContext(e.getContext(r)).lineWidth:0}drawGrid(t){const e=this,n=e.options.grid,r=e.ctx,i=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));let o,a;const s=(t,e,n)=>{n.width&&n.color&&(r.save(),r.lineWidth=n.width,r.strokeStyle=n.color,r.setLineDash(n.borderDash||[]),r.lineDashOffset=n.borderDashOffset,r.beginPath(),r.moveTo(t.x,t.y),r.lineTo(e.x,e.y),r.stroke(),r.restore())};if(n.display)for(o=0,a=i.length;o<a;++o){const t=i[o];n.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),n.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const t=this,{chart:e,ctx:n,options:{grid:r}}=t,i=r.setContext(t.getContext()),o=r.drawBorder?i.borderWidth:0;if(!o)return;const a=r.setContext(t.getContext(0)).lineWidth,s=t._borderValue;let l,u,c,d;t.isHorizontal()?(l=ee(e,t.left,o)-o/2,u=ee(e,t.right,a)+a/2,c=d=s):(c=ee(e,t.top,o)-o/2,d=ee(e,t.bottom,a)+a/2,l=u=s),n.save(),n.lineWidth=i.borderWidth,n.strokeStyle=i.borderColor,n.beginPath(),n.moveTo(l,c),n.lineTo(u,d),n.stroke(),n.restore()}drawLabels(t){const e=this;if(!e.options.ticks.display)return;const n=e.ctx,r=e._computeLabelArea();r&&oe(n,r);const i=e._labelItems||(e._labelItems=e._computeLabelItems(t));let o,a;for(o=0,a=i.length;o<a;++o){const t=i[o],e=t.font,r=t.label;t.backdrop&&(n.fillStyle=t.backdrop.color,n.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),ue(n,r,0,t.textOffset,e,t)}r&&ae(n)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:r}}=this;if(!n.display)return;const i=ve(n.font),o=ye(n.padding),a=n.align;let s=i.lineHeight/2;"bottom"===e||"center"===e||M(e)?(s+=o.bottom,S(n.text)&&(s+=i.lineHeight*(n.text.length-1))):s+=o.top;const{titleX:l,titleY:u,maxWidth:c,rotation:d}=function(t,e,n,r){const{top:i,left:o,bottom:a,right:s,chart:l}=t,{chartArea:u,scales:c}=l;let d,f,h,p=0;const g=a-i,m=s-o;if(t.isHorizontal()){if(f=x(r,o,s),M(n)){const t=Object.keys(n)[0],r=n[t];h=c[t].getPixelForValue(r)+g-e}else h="center"===n?(u.bottom+u.top)/2+g-e:Br(t,n,e);d=s-o}else{if(M(n)){const t=Object.keys(n)[0],r=n[t];f=c[t].getPixelForValue(r)-m+e}else f="center"===n?(u.left+u.right)/2-m+e:Br(t,n,e);h=x(r,a,i),p="left"===n?-Q:Q}return{titleX:f,titleY:h,maxWidth:d,rotation:p}}(this,s,e,a);ue(t,n.text,0,0,i,{color:n.color,maxWidth:c,rotation:d,textAlign:Ur(a,e,r),textBaseline:"middle",translation:[l,u]})}draw(t){const e=this;e._isVisible()&&(e.drawBackground(),e.drawGrid(t),e.drawBorder(),e.drawTitle(),e.drawLabels(t))}_layers(){const t=this,e=t.options,n=e.ticks&&e.ticks.z||0,r=P(e.grid&&e.grid.z,-1);return t._isVisible()&&t.draw===$r.prototype.draw?[{z:r,draw(e){t.drawBackground(),t.drawGrid(e),t.drawTitle()}},{z:r+1,draw(){t.drawBorder()}},{z:n,draw(e){t.drawLabels(e)}}]:[{z:n,draw(e){t.draw(e)}}]}getMatchingVisibleMetas(t){const e=this,n=e.chart.getSortedVisibleDatasetMetas(),r=e.axis+"AxisID",i=[];let o,a;for(o=0,a=n.length;o<a;++o){const a=n[o];a[r]!==e.id||t&&a.type!==t||i.push(a)}return i}_resolveTickFontOptions(t){return ve(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this,e=t._resolveTickFontOptions(0).lineHeight;return(t.isHorizontal()?t.width:t.height)/e}}class Yr{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=this,n=Object.getPrototypeOf(t);let r;(function(t){return"id"in t&&"defaults"in t})(n)&&(r=e.register(n));const i=e.items,o=t.id,a=e.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in i||(i[o]=t,function(t,e,n){const r=N(Object.create(null),[n?Gt.get(n):{},Gt.get(e),t.defaults]);Gt.set(e,r),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const r=n.split("."),i=r.pop(),o=[t].concat(r).join("."),a=e[n].split("."),s=a.pop(),l=a.join(".");Gt.route(o,i,l,s)}))}(e,t.defaultRoutes),t.descriptors&&Gt.describe(e,t.descriptors)}(t,a,r),e.override&&Gt.override(t.id,t.overrides)),a}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,r=this.scope;n in e&&delete e[n],r&&n in Gt[r]&&(delete Gt[r][n],this.override&&delete Xt[n])}}var qr=new class{constructor(){this.controllers=new Yr(zn,"datasets",!0),this.elements=new Yr(zr,"elements"),this.plugins=new Yr(Object,"plugins"),this.scales=new Yr($r,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){const r=this;[...e].forEach((e=>{const i=n||r._getRegistryForType(e);n||i.isForType(e)||i===r.plugins&&e.id?r._exec(t,i,e):D(e,(e=>{const i=n||r._getRegistryForType(e);r._exec(t,i,e)}))}))}_exec(t,e,n){const r=j(t);T(n["before"+r],[],n),e[t](n),T(n["after"+r],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const r=e.get(t);if(void 0===r)throw new Error('"'+t+'" is not a registered '+n+".");return r}};class Xr{constructor(){this._init=[]}notify(t,e,n,r){const i=this;"beforeInit"===e&&(i._init=i._createDescriptors(t,!0),i._notify(i._init,t,"install"));const o=r?i._descriptors(t).filter(r):i._descriptors(t),a=i._notify(o,t,e,n);return"destroy"===e&&(i._notify(o,t,"stop"),i._notify(i._init,t,"uninstall")),a}_notify(t,e,n,r){r=r||{};for(const i of t){const t=i.plugin;if(!1===T(t[n],[e,r,i.options],t)&&r.cancelable)return!1}return!0}invalidate(){k(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,r=P(n.options&&n.options.plugins,{}),i=function(t){const e=[],n=Object.keys(qr.plugins.items);for(let t=0;t<n.length;t++)e.push(qr.getPlugin(n[t]));const r=t.plugins||[];for(let t=0;t<r.length;t++){const n=r[t];-1===e.indexOf(n)&&e.push(n)}return e}(n);return!1!==r||e?function(t,e,n,r){const i=[],o=t.getContext();for(let a=0;a<e.length;a++){const s=e[a],l=Qr(n[s.id],r);null!==l&&i.push({plugin:s,options:Kr(t.config,s,l,o)})}return i}(t,i,r,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,r=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(r(e,n),t,"stop"),this._notify(r(n,e),t,"start")}}function Qr(t,e){return e||!1!==t?!0===t?{}:t:null}function Kr(t,e,n,r){const i=t.pluginScopeKeys(e),o=t.getOptionScopes(n,i);return t.createResolver(o,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Zr(t,e){const n=Gt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function Gr(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.charAt(0).toLowerCase();var n}function Jr(t){const e=t.options||(t.options={});e.plugins=P(e.plugins,{}),e.scales=function(t,e){const n=Xt[t.type]||{scales:{}},r=e.scales||{},i=Zr(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(r).forEach((t=>{const e=r[t],s=Gr(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(s,i),u=n.scales||{};o[s]=o[s]||t,a[t]=I(Object.create(null),[{axis:s},e,u[s],u[l]])})),t.data.datasets.forEach((n=>{const i=n.type||t.type,s=n.indexAxis||Zr(i,e),l=(Xt[i]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,s),i=n[e+"AxisID"]||o[e]||e;a[i]=a[i]||Object.create(null),I(a[i],[{axis:e},r[i],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];I(e,[Gt.scales[e.type],Gt.scale])})),a}(t,e)}function ti(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const ei=new Map,ni=new Set;function ri(t,e){let n=ei.get(t);return n||(n=e(),ei.set(t,n),ni.add(n)),n}const ii=(t,e,n)=>{const r=V(e,n);void 0!==r&&t.add(r)};class oi{constructor(t){this._config=function(t){return(t=t||{}).data=ti(t.data),Jr(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=ti(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Jr(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return ri(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return ri(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return ri(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return ri(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let r=n.get(t);return r&&!e||(r=new Map,n.set(t,r)),r}getOptionScopes(t,e,n){const{options:r,type:i}=this,o=this._cachedScopes(t,n),a=o.get(e);if(a)return a;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>ii(s,t,e)))),e.forEach((t=>ii(s,r,t))),e.forEach((t=>ii(s,Xt[i]||{},t))),e.forEach((t=>ii(s,Gt,t))),e.forEach((t=>ii(s,Qt,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),ni.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Xt[e]||{},Gt.datasets[e]||{},{type:e},Gt,Qt]}resolveNamedOptions(t,e,n,r=[""]){const i={$shared:!0},{resolver:o,subPrefixes:a}=ai(this._resolverCache,t,r);let s=o;(function(t,e){const{isScriptable:n,isIndexable:r}=Oe(t);for(const i of e)if(n(i)&&H(t[i])||r(i)&&S(t[i]))return!0;return!1})(o,e)&&(i.$shared=!1,s=Pe(o,n=H(n)?n():n,this.createResolver(t,n,a)));for(const t of e)i[t]=s[t];return i}createResolver(t,e,n=[""],r){const{resolver:i}=ai(this._resolverCache,t,n);return M(e)?Pe(i,e,void 0,r):i}}function ai(t,e,n){let r=t.get(e);r||(r=new Map,t.set(e,r));const i=n.join();let o=r.get(i);return o||(o={resolver:Ce(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},r.set(i,o)),o}const si=["top","bottom","left","right","chartArea"];function li(t,e){return"top"===t||"bottom"===t||-1===si.indexOf(t)&&"x"===e}function ui(t,e){return function(n,r){return n[t]===r[t]?n[e]-r[e]:n[t]-r[t]}}function ci(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),T(n&&n.onComplete,[t],e)}function di(t){const e=t.chart,n=e.options.animation;T(n&&n.onProgress,[t],e)}function fi(t){return Ye()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const hi={},pi=t=>{const e=fi(t);return Object.values(hi).filter((t=>t.canvas===e)).pop()};class gi{constructor(t,e){const n=this,r=this.config=new oi(e),i=fi(t),o=pi(i);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas can be reused.");const a=r.createResolver(r.chartOptionScopes(),n.getContext());this.platform=new(r.platform||function(t){return!Ye()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?_r:Rr}(i));const s=n.platform.acquireContext(i,a.aspectRatio),l=s&&s.canvas,u=l&&l.height,c=l&&l.width;this.id=w(),this.ctx=s,this.canvas=l,this.width=c,this.height=u,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Xr,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(){return e?(clearTimeout(n),n=setTimeout(t,e)):t(),e}}((()=>this.update("resize")),a.resizeDelay||0),hi[n.id]=n,s&&l?(yn.listen(n,"complete",ci),yn.listen(n,"progress",di),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:r,_aspectRatio:i}=this;return k(t)?e&&i?i:r?n/r:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){const t=this;return t.notifyPlugins("beforeInit"),t.options.responsive?t.resize():tn(t,t.options.devicePixelRatio),t.bindEvents(),t.notifyPlugins("afterInit"),t}clear(){return ne(this.canvas,this.ctx),this}stop(){return yn.stop(this),this}resize(t,e){yn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this,r=n.options,i=n.canvas,o=r.maintainAspectRatio&&n.aspectRatio,a=n.platform.getMaximumSize(i,t,e,o),s=r.devicePixelRatio||n.platform.getDevicePixelRatio();n.width=a.width,n.height=a.height,n._aspectRatio=n.aspectRatio,tn(n,s,!0)&&(n.notifyPlugins("resize",{size:a}),T(r.onResize,[n,a],n),n.attached&&n._doResize()&&n.render())}ensureScalesHaveIDs(){D(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this,e=t.options,n=e.scales,r=t.scales,i=Object.keys(r).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];n&&(o=o.concat(Object.keys(n).map((t=>{const e=n[t],r=Gr(t,e),i="r"===r,o="x"===r;return{options:e,dposition:i?"chartArea":o?"bottom":"left",dtype:i?"radialLinear":o?"category":"linear"}})))),D(o,(n=>{const o=n.options,a=o.id,s=Gr(a,o),l=P(o.type,n.dtype);void 0!==o.position&&li(o.position,s)===li(n.dposition)||(o.position=n.dposition),i[a]=!0;let u=null;a in r&&r[a].type===l?u=r[a]:(u=new(qr.getScale(l))({id:a,type:l,ctx:t.ctx,chart:t}),r[u.id]=u),u.init(o,e)})),D(i,((t,e)=>{t||delete r[e]})),D(r,(e=>{vr.configure(t,e,e.options),vr.addBox(t,e)}))}_updateMetasets(){const t=this,e=t._metasets,n=t.data.datasets.length,r=e.length;if(e.sort(((t,e)=>t.index-e.index)),r>n){for(let e=n;e<r;++e)t._destroyDatasetMeta(e);e.splice(n,r-n)}t._sortedMetasets=e.slice(0).sort(ui("order","index"))}_removeUnreferencedMetasets(){const t=this,{_metasets:e,data:{datasets:n}}=t;e.length>n.length&&delete t._stacks,e.forEach(((e,r)=>{0===n.filter((t=>t===e._dataset)).length&&t._destroyDatasetMeta(r)}))}buildOrUpdateControllers(){const t=this,e=[],n=t.data.datasets;let r,i;for(t._removeUnreferencedMetasets(),r=0,i=n.length;r<i;r++){const i=n[r];let o=t.getDatasetMeta(r);const a=i.type||t.config.type;if(o.type&&o.type!==a&&(t._destroyDatasetMeta(r),o=t.getDatasetMeta(r)),o.type=a,o.indexAxis=i.indexAxis||Zr(a,t.options),o.order=i.order||0,o.index=r,o.label=""+i.label,o.visible=t.isDatasetVisible(r),o.controller)o.controller.updateIndex(r),o.controller.linkScales();else{const n=qr.getController(a),{datasetElementType:i,dataElementType:s}=Gt.datasets[a];Object.assign(n.prototype,{dataElementType:qr.getElement(s),datasetElementType:i&&qr.getElement(i)}),o.controller=new n(t,r),e.push(o.controller)}}return t._updateMetasets(),e}_resetElements(){const t=this;D(t.data.datasets,((e,n)=>{t.getDatasetMeta(n).controller.reset()}),t)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this,n=e.config;n.update(),e._options=n.createResolver(n.chartOptionScopes(),e.getContext()),D(e.scales,(t=>{vr.removeBox(e,t)}));const r=e._animationsDisabled=!e.options.animation;if(e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),((t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0})(new Set(Object.keys(e._listeners)),new Set(e.options.events))&&!!this._responsiveListeners===e.options.responsive||(e.unbindEvents(),e.bindEvents()),e._plugins.invalidate(),!1===e.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const i=e.buildOrUpdateControllers();e.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,n=e.data.datasets.length;t<n;t++){const{controller:n}=e.getDatasetMeta(t),a=!r&&-1===i.indexOf(n);n.buildOrUpdateElements(a),o=Math.max(+n.getMaxOverflow(),o)}e._minPadding=o,e._updateLayout(o),r||D(i,(t=>{t.reset()})),e._updateDatasets(t),e.notifyPlugins("afterUpdate",{mode:t}),e._layers.sort(ui("z","_idx")),e._lastEvent&&e._eventHandler(e._lastEvent,!0),e.render()}_updateLayout(t){const e=this;if(!1===e.notifyPlugins("beforeLayout",{cancelable:!0}))return;vr.update(e,e.width,e.height,t);const n=e.chartArea,r=n.width<=0||n.height<=0;e._layers=[],D(e.boxes,(t=>{r&&"chartArea"===t.position||(t.configure&&t.configure(),e._layers.push(...t._layers()))}),e),e._layers.forEach(((t,e)=>{t._idx=e})),e.notifyPlugins("afterLayout")}_updateDatasets(t){const e=this,n="function"==typeof t;if(!1!==e.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let r=0,i=e.data.datasets.length;r<i;++r)e._updateDataset(r,n?t({datasetIndex:r}):t);e.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this,r=n.getDatasetMeta(t),i={meta:r,index:t,mode:e,cancelable:!0};!1!==n.notifyPlugins("beforeDatasetUpdate",i)&&(r.controller._update(e),i.cancelable=!1,n.notifyPlugins("afterDatasetUpdate",i))}render(){const t=this;!1!==t.notifyPlugins("beforeRender",{cancelable:!0})&&(yn.has(t)?t.attached&&!yn.running(t)&&yn.start(t):(t.draw(),ci({chart:t})))}draw(){const t=this;let e;if(t._resizeBeforeDraw){const{width:e,height:n}=t._resizeBeforeDraw;t._resize(e,n),t._resizeBeforeDraw=null}if(t.clear(),t.width<=0||t.height<=0)return;if(!1===t.notifyPlugins("beforeDraw",{cancelable:!0}))return;const n=t._layers;for(e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(t.chartArea);for(t._drawDatasets();e<n.length;++e)n[e].draw(t.chartArea);t.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let r,i;for(r=0,i=e.length;r<i;++r){const i=e[r];t&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const t=this;if(!1===t.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=t.getSortedVisibleDatasetMetas();for(let n=e.length-1;n>=0;--n)t._drawDataset(e[n]);t.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this,n=e.ctx,r=t._clip,i=!r.disabled,o=e.chartArea,a={meta:t,index:t.index,cancelable:!0};!1!==e.notifyPlugins("beforeDatasetDraw",a)&&(i&&oe(n,{left:!1===r.left?0:o.left-r.left,right:!1===r.right?e.width:o.right+r.right,top:!1===r.top?0:o.top-r.top,bottom:!1===r.bottom?e.height:o.bottom+r.bottom}),t.controller.draw(),i&&ae(n),a.cancelable=!1,e.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(t,e,n,r){const i=sr.modes[e];return"function"==typeof i?i(this,t,n,r):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let r=n.filter((t=>t&&t._dataset===e)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const r=this,i=n?"show":"hide",o=r.getDatasetMeta(t),a=o.controller._resolveAnimations(void 0,i);W(e)?(o.data[e].hidden=!n,r.update()):(r.setDatasetVisibility(t,n),a.update(o,{visible:n}),r.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this,n=e._metasets&&e._metasets[t];n&&n.controller&&(n.controller._destroy(),delete e._metasets[t])}destroy(){const t=this,{canvas:e,ctx:n}=t;let r,i;for(t.stop(),yn.remove(t),r=0,i=t.data.datasets.length;r<i;++r)t._destroyDatasetMeta(r);t.config.clearCache(),e&&(t.unbindEvents(),ne(e,n),t.platform.releaseContext(n),t.canvas=null,t.ctx=null),t.notifyPlugins("destroy"),delete hi[t.id]}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this,e=t._listeners,n=t.platform,r=function(e,n,r){e.offsetX=n,e.offsetY=r,t._eventHandler(e)};D(t.options.events,(i=>((r,i)=>{n.addEventListener(t,r,i),e[r]=i})(i,r)))}bindResponsiveEvents(){const t=this;t._responsiveListeners||(t._responsiveListeners={});const e=t._responsiveListeners,n=t.platform,r=(r,i)=>{n.addEventListener(t,r,i),e[r]=i},i=(r,i)=>{e[r]&&(n.removeEventListener(t,r,i),delete e[r])},o=(e,n)=>{t.canvas&&t.resize(e,n)};let a;const s=()=>{i("attach",s),t.attached=!0,t.resize(),r("resize",o),r("detach",a)};a=()=>{t.attached=!1,i("resize",o),r("attach",s)},n.isAttached(t.canvas)?s():a()}unbindEvents(){const t=this;D(t._listeners,((e,n)=>{t.platform.removeEventListener(t,n,e)})),t._listeners={},D(t._responsiveListeners,((e,n)=>{t.platform.removeEventListener(t,n,e)})),t._responsiveListeners=void 0}updateHoverStyle(t,e,n){const r=n?"set":"remove";let i,o,a,s;for("dataset"===e&&(i=this.getDatasetMeta(t[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=t.length;a<s;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[r+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this,n=e._active||[],r=t.map((({datasetIndex:t,index:n})=>{const r=e.getDatasetMeta(t);if(!r)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:r.data[n],index:n}}));!A(r,n)&&(e._active=r,e._updateHoverStyles(r,n))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}_updateHoverStyles(t,e,n){const r=this,i=r.options.hover,o=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),a=o(e,t),s=n?t:o(t,e);a.length&&r.updateHoverStyle(a,i.mode,!1),s.length&&i.mode&&r.updateHoverStyle(s,i.mode,!0)}_eventHandler(t,e){const n=this,r={event:t,replay:e,cancelable:!0},i=e=>(e.options.events||this.options.events).includes(t.type);if(!1===n.notifyPlugins("beforeEvent",r,i))return;const o=n._handleEvent(t,e);return r.cancelable=!1,n.notifyPlugins("afterEvent",r,i),(o||r.changed)&&n.render(),n}_handleEvent(t,e){const n=this,{_active:r=[],options:i}=n,o=i.hover,a=e;let s=[],l=!1,u=null;return"mouseout"!==t.type&&(s=n.getElementsAtEventForMode(t,o.mode,o,a),u="click"===t.type?n._lastEvent:t),n._lastEvent=null,ie(t,n.chartArea,n._minPadding)&&(T(i.onHover,[t,s,n],n),"mouseup"!==t.type&&"click"!==t.type&&"contextmenu"!==t.type||T(i.onClick,[t,s,n],n)),l=!A(s,r),(l||e)&&(n._active=s,n._updateHoverStyles(s,r,e)),n._lastEvent=u,l}}const mi=()=>D(gi.instances,(t=>t._plugins.invalidate())),bi=!0;function yi(t,e,n){const{startAngle:r,pixelMargin:i,x:o,y:a,outerRadius:s,innerRadius:l}=e;let u=i/s;t.beginPath(),t.arc(o,a,s,r-u,n+u),l>i?(u=i/l,t.arc(o,a,l,n+u,r-u,!0)):t.arc(o,a,i,n+Q,r-Q),t.closePath(),t.clip()}function vi(t,e,n,r){return{x:n+t*Math.cos(e),y:r+t*Math.sin(e)}}function xi(t,e,n,r,i){const{x:o,y:a,startAngle:s,pixelMargin:l,innerRadius:u}=e,c=Math.max(e.outerRadius+r+n-l,0),d=u>0?u+r+n+l:0;let f=0;const h=i-s;if(r){const t=((u>0?u-r:0)+(c>0?c-r:0))/2;f=(h-(0!==t?h*t/(t+r):h))/2}const p=(h-Math.max(.001,h*c-n/U)/c)/2,g=s+p+f,m=i-p-f,{outerStart:b,outerEnd:y,innerStart:v,innerEnd:x}=function(t,e,n,r){const i=ge(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,a=Math.min(o,r*e/2),s=t=>{const e=(n-Math.min(o,t))*r/2;return dt(t,0,Math.min(o,e))};return{outerStart:s(i.outerStart),outerEnd:s(i.outerEnd),innerStart:dt(i.innerStart,0,a),innerEnd:dt(i.innerEnd,0,a)}}(e,d,c,m-g),_=c-b,w=c-y,k=g+b/_,S=m-y/w,M=d+v,E=d+x,C=g+v/M,P=m-x/E;if(t.beginPath(),t.arc(o,a,c,k,S),y>0){const e=vi(w,S,o,a);t.arc(e.x,e.y,y,S,m+Q)}const O=vi(E,m,o,a);if(t.lineTo(O.x,O.y),x>0){const e=vi(E,P,o,a);t.arc(e.x,e.y,x,m+Q,P+Math.PI)}if(t.arc(o,a,d,m-x/d,g+v/d,!0),v>0){const e=vi(M,C,o,a);t.arc(e.x,e.y,v,C+Math.PI,g-Q)}const T=vi(_,g,o,a);if(t.lineTo(T.x,T.y),b>0){const e=vi(_,k,o,a);t.arc(e.x,e.y,b,g-Q,k)}t.closePath()}Object.defineProperties(gi,{defaults:{enumerable:bi,value:Gt},instances:{enumerable:bi,value:hi},overrides:{enumerable:bi,value:Xt},registry:{enumerable:bi,value:qr},version:{enumerable:bi,value:"3.5.1"},getChart:{enumerable:bi,value:pi},register:{enumerable:bi,value:(...t)=>{qr.add(...t),mi()}},unregister:{enumerable:bi,value:(...t)=>{qr.remove(...t),mi()}}});class _i extends zr{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const r=this.getProps(["x","y"],n),{angle:i,distance:o}=function(t,e){const n=e.x-t.x,r=e.y-t.y,i=Math.sqrt(n*n+r*r);let o=Math.atan2(r,n);return o<-.5*U&&(o+=$),{angle:o,distance:i}}(r,{x:t,y:e}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:u,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),d=this.options.spacing/2;return(c>=$||ct(i,a,s))&&o>=l+d&&o<=u+d}getCenterPoint(t){const{x:e,y:n,startAngle:r,endAngle:i,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,u=(r+i)/2,c=(o+a+l+s)/2;return{x:e+Math.cos(u)*c,y:n+Math.sin(u)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const e=this,{options:n,circumference:r}=e,i=(n.offset||0)/2,o=(n.spacing||0)/2;if(e.pixelMargin="inner"===n.borderAlign?.33:0,e.fullCircles=r>$?Math.floor(r/$):0,0===r||e.innerRadius<0||e.outerRadius<0)return;t.save();let a=0;if(i){a=i/2;const n=(e.startAngle+e.endAngle)/2;t.translate(Math.cos(n)*a,Math.sin(n)*a),e.circumference>=U&&(a=i)}t.fillStyle=n.backgroundColor,t.strokeStyle=n.borderColor;const s=function(t,e,n,r){const{fullCircles:i,startAngle:o,circumference:a}=e;let s=e.endAngle;if(i){xi(t,e,n,r,o+$);for(let e=0;e<i;++e)t.fill();isNaN(a)||(s=o+a%$,a%$==0&&(s+=$))}return xi(t,e,n,r,s),t.fill(),s}(t,e,a,o);(function(t,e,n,r,i){const{options:o}=e,a="inner"===o.borderAlign;o.borderWidth&&(a?(t.lineWidth=2*o.borderWidth,t.lineJoin="round"):(t.lineWidth=o.borderWidth,t.lineJoin="bevel"),e.fullCircles&&function(t,e,n){const{x:r,y:i,startAngle:o,pixelMargin:a,fullCircles:s}=e,l=Math.max(e.outerRadius-a,0),u=e.innerRadius+a;let c;for(n&&yi(t,e,o+$),t.beginPath(),t.arc(r,i,u,o+$,o,!0),c=0;c<s;++c)t.stroke();for(t.beginPath(),t.arc(r,i,l,o,o+$),c=0;c<s;++c)t.stroke()}(t,e,a),a&&yi(t,e,i),xi(t,e,n,r,i),t.stroke())})(t,e,a,o,s),t.restore()}}function wi(t,e,n=e){t.lineCap=P(n.borderCapStyle,e.borderCapStyle),t.setLineDash(P(n.borderDash,e.borderDash)),t.lineDashOffset=P(n.borderDashOffset,e.borderDashOffset),t.lineJoin=P(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=P(n.borderWidth,e.borderWidth),t.strokeStyle=P(n.borderColor,e.borderColor)}function ki(t,e,n){t.lineTo(n.x,n.y)}function Si(t,e,n={}){const r=t.length,{start:i=0,end:o=r-1}=n,{start:a,end:s}=e,l=Math.max(i,a),u=Math.min(o,s),c=i<a&&o<a||i>s&&o>s;return{count:r,start:l,loop:e.loop,ilen:u<l&&!c?r+u-l:u-l}}function Mi(t,e,n,r){const{points:i,options:o}=e,{count:a,start:s,loop:l,ilen:u}=Si(i,n,r),c=function(t){return t.stepped?se:t.tension||"monotone"===t.cubicInterpolationMode?le:ki}(o);let d,f,h,{move:p=!0,reverse:g}=r||{};for(d=0;d<=u;++d)f=i[(s+(g?u-d:d))%a],f.skip||(p?(t.moveTo(f.x,f.y),p=!1):c(t,h,f,g,o.stepped),h=f);return l&&(f=i[(s+(g?u:0))%a],c(t,h,f,g,o.stepped)),!!l}function Ei(t,e,n,r){const i=e.points,{count:o,start:a,ilen:s}=Si(i,n,r),{move:l=!0,reverse:u}=r||{};let c,d,f,h,p,g,m=0,b=0;const y=t=>(a+(u?s-t:t))%o,v=()=>{h!==p&&(t.lineTo(m,p),t.lineTo(m,h),t.lineTo(m,g))};for(l&&(d=i[y(0)],t.moveTo(d.x,d.y)),c=0;c<=s;++c){if(d=i[y(c)],d.skip)continue;const e=d.x,n=d.y,r=0|e;r===f?(n<h?h=n:n>p&&(p=n),m=(b*m+e)/++b):(v(),t.lineTo(e,n),f=r,b=0,h=p=n),g=n}v()}function Ci(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Mi:Ei}_i.id="arc",_i.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},_i.defaultRoutes={backgroundColor:"backgroundColor"};const Pi="function"==typeof Path2D;class Oi extends zr{constructor(t){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this,r=n.options;if((r.tension||"monotone"===r.cubicInterpolationMode)&&!r.stepped&&!n._pointsUpdated){const i=r.spanGaps?n._loop:n._fullLoop;$e(n._points,r,t,i,e),n._pointsUpdated=!0}}set points(t){const e=this;e._points=t,delete e._segments,delete e._path,e._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,r=t.options.spanGaps,i=n.length;if(!i)return[];const o=!!t._loop,{start:a,end:s}=function(t,e,n,r){let i=0,o=e-1;if(n&&!r)for(;i<e&&!t[i].skip;)i++;for(;i<e&&t[i].skip;)i++;for(i%=e,n&&(o+=i);o>i&&t[o%e].skip;)o--;return o%=e,{start:i,end:o}}(n,i,o,r);return function(t,e,n,r){return r&&r.setContext&&n?function(t,e,n,r){const i=mn(t.options),o=n.length,a=[];let s=e[0].start,l=s;for(const u of e){let e,c=i,d=n[s%o];for(l=s+1;l<=u.end;l++){const i=n[l%o];e=mn(r.setContext({type:"segment",p0:d,p1:i,p0DataIndex:(l-1)%o,p1DataIndex:l%o,datasetIndex:t._datasetIndex})),bn(e,c)&&(a.push({start:s,end:l-1,loop:u.loop,style:c}),c=e,s=l-1),d=i,c=e}s<l-1&&(a.push({start:s,end:l-1,loop:u.loop,style:e}),s=l-1)}return a}(t,e,n,r):e}(t,!0===r?[{start:a,end:s,loop:o}]:function(t,e,n,r){const i=t.length,o=[];let a,s=e,l=t[e];for(a=e+1;a<=n;++a){const n=t[a%i];n.skip||n.stop?l.skip||(r=!1,o.push({start:e%i,end:(a-1)%i,loop:r}),e=s=n.stop?a:null):(s=a,l.skip&&(e=a)),l=n}return null!==s&&o.push({start:e%i,end:s%i,loop:r}),o}(n,a,s<a?s+i:s,!!t._fullLoop&&0===a&&s===i-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this,r=n.options,i=t[e],o=n.points,a=gn(n,{property:e,start:i,end:i});if(!a.length)return;const s=[],l=function(t){return t.stepped?on:t.tension||"monotone"===t.cubicInterpolationMode?an:rn}(r);let u,c;for(u=0,c=a.length;u<c;++u){const{start:n,end:c}=a[u],d=o[n],f=o[c];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((i-d[e])/(f[e]-d[e])),r.stepped);h[e]=t[e],s.push(h)}return 1===s.length?s[0]:s}pathSegment(t,e,n){return Ci(this)(t,this,e,n)}path(t,e,n){const r=this,i=r.segments,o=Ci(r);let a=r._loop;e=e||0,n=n||r.points.length-e;for(const s of i)a&=o(t,r,s,{start:e,end:e+n-1});return!!a}draw(t,e,n,r){const i=this,o=i.options||{};(i.points||[]).length&&o.borderWidth&&(t.save(),function(t,e,n,r){Pi&&1===e.segments.length?function(t,e,n,r){let i=e._path;i||(i=e._path=new Path2D,e.path(i,n,r)&&i.closePath()),wi(t,e.options),t.stroke(i)}(t,e,n,r):function(t,e,n,r){const{segments:i,options:o}=e,a=Ci(e);for(const s of i)wi(t,o,s.style),t.beginPath(),a(t,e,s,{start:n,end:n+r-1})&&t.closePath(),t.stroke()}(t,e,n,r)}(t,i,n,r),t.restore(),i.animated&&(i._pointsUpdated=!1,i._path=void 0))}}function Ti(t,e,n,r){const i=t.options,{[n]:o}=t.getProps([n],r);return Math.abs(e-o)<i.radius+i.hitRadius}Oi.id="line",Oi.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Oi.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Oi.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Di extends zr{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const r=this.options,{x:i,y:o}=this.getProps(["x","y"],n);return Math.pow(t-i,2)+Math.pow(e-o,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(t,e){return Ti(this,t,"x",e)}inYRange(t,e){return Ti(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this,r=n.options;n.skip||r.radius<.1||!ie(n,e,n.size(r)/2)||(t.strokeStyle=r.borderColor,t.lineWidth=r.borderWidth,t.fillStyle=r.backgroundColor,re(t,r,n.x,n.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ai(t,e){const{x:n,y:r,base:i,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let s,l,u,c,d;return t.horizontal?(d=a/2,s=Math.min(n,i),l=Math.max(n,i),u=r-d,c=r+d):(d=o/2,s=n-d,l=n+d,u=Math.min(r,i),c=Math.max(r,i)),{left:s,top:u,right:l,bottom:c}}function Li(t,e,n,r){return t?0:dt(e,n,r)}function Ri(t,e,n,r){const i=null===e,o=null===n,a=t&&!(i&&o)&&Ai(t,r);return a&&(i||e>=a.left&&e<=a.right)&&(o||n>=a.top&&n<=a.bottom)}function zi(t,e){t.rect(e.x,e.y,e.w,e.h)}function Ni(t,e,n={}){const r=t.x!==n.x?-e:0,i=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-r,a=(t.y+t.h!==n.y+n.h?e:0)-i;return{x:t.x+r,y:t.y+i,w:t.w+o,h:t.h+a,radius:t.radius}}Di.id="point",Di.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Di.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Ii extends zr{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,t&&Object.assign(this,t)}draw(t){const e=this.options,{inner:n,outer:r}=function(t){const e=Ai(t),n=e.right-e.left,r=e.bottom-e.top,i=function(t,e,n){const r=t.options.borderWidth,i=t.borderSkipped,o=me(r);return{t:Li(i.top,o.top,0,n),r:Li(i.right,o.right,0,e),b:Li(i.bottom,o.bottom,0,n),l:Li(i.left,o.left,0,e)}}(t,n/2,r/2),o=function(t,e,n){const{enableBorderRadius:r}=t.getProps(["enableBorderRadius"]),i=t.options.borderRadius,o=be(i),a=Math.min(e,n),s=t.borderSkipped,l=r||M(i);return{topLeft:Li(!l||s.top||s.left,o.topLeft,0,a),topRight:Li(!l||s.top||s.right,o.topRight,0,a),bottomLeft:Li(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:Li(!l||s.bottom||s.right,o.bottomRight,0,a)}}(t,n/2,r/2);return{outer:{x:e.left,y:e.top,w:n,h:r,radius:o},inner:{x:e.left+i.l,y:e.top+i.t,w:n-i.l-i.r,h:r-i.t-i.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(i.t,i.l)),topRight:Math.max(0,o.topRight-Math.max(i.t,i.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(i.b,i.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(i.b,i.r))}}}}(this),i=(o=r.radius).topLeft||o.topRight||o.bottomLeft||o.bottomRight?de:zi;var o;t.save(),r.w===n.w&&r.h===n.h||(t.beginPath(),i(t,Ni(r,.33,n)),t.clip(),i(t,Ni(n,-.33,r)),t.fillStyle=e.borderColor,t.fill("evenodd")),t.beginPath(),i(t,Ni(n,.33,r)),t.fillStyle=e.backgroundColor,t.fill(),t.restore()}inRange(t,e,n){return Ri(this,t,e,n)}inXRange(t,e){return Ri(this,t,null,e)}inYRange(t,e){return Ri(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],t);return{x:i?(e+r)/2:e,y:i?n:(n+r)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Ii.id="bar",Ii.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},Ii.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Fi=Object.freeze({__proto__:null,ArcElement:_i,LineElement:Oi,PointElement:Di,BarElement:Ii});function Bi(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Vi(t){t.data.datasets.forEach((t=>{Bi(t)}))}var ji={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void Vi(t);const r=t.width;t.data.datasets.forEach(((e,i)=>{const{_data:o,indexAxis:a}=e,s=t.getDatasetMeta(i),l=o||e.data;if("y"===xe([a,t.options.indexAxis]))return;if("line"!==s.type)return;const u=t.scales[s.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(t.options.parsing)return;let c,{start:d,count:f}=function(t,e){const n=e.length;let r,i=0;const{iScale:o}=t,{min:a,max:s,minDefined:l,maxDefined:u}=o.getUserBounds();return l&&(i=dt(we(e,o.axis,a).lo,0,n-1)),r=u?dt(we(e,o.axis,s).hi+1,i,n)-i:n-i,{start:i,count:r}}(s,l);if(f<=(n.threshold||4*r))Bi(e);else{switch(k(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":c=function(t,e,n,r,i){const o=i.samples||r;if(o>=n)return t.slice(e,e+n);const a=[],s=(n-2)/(o-2);let l=0;const u=e+n-1;let c,d,f,h,p,g=e;for(a[l++]=t[g],c=0;c<o-2;c++){let r,i=0,o=0;const u=Math.floor((c+1)*s)+1+e,m=Math.min(Math.floor((c+2)*s)+1,n)+e,b=m-u;for(r=u;r<m;r++)i+=t[r].x,o+=t[r].y;i/=b,o/=b;const y=Math.floor(c*s)+1+e,v=Math.min(Math.floor((c+1)*s)+1,n)+e,{x,y:_}=t[g];for(f=h=-1,r=y;r<v;r++)h=.5*Math.abs((x-i)*(t[r].y-_)-(x-t[r].x)*(o-_)),h>f&&(f=h,d=t[r],p=r);a[l++]=d,g=p}return a[l++]=t[u],a}(l,d,f,r,n);break;case"min-max":c=function(t,e,n,r){let i,o,a,s,l,u,c,d,f,h,p=0,g=0;const m=[],b=e+n-1,y=t[e].x,v=t[b].x-y;for(i=e;i<e+n;++i){o=t[i],a=(o.x-y)/v*r,s=o.y;const e=0|a;if(e===l)s<f?(f=s,u=i):s>h&&(h=s,c=i),p=(g*p+o.x)/++g;else{const n=i-1;if(!k(u)&&!k(c)){const e=Math.min(u,c),r=Math.max(u,c);e!==d&&e!==n&&m.push({...t[e],x:p}),r!==d&&r!==n&&m.push({...t[r],x:p})}i>0&&n!==d&&m.push(t[n]),m.push(o),l=e,g=0,f=h=s,u=c=d=i}}return m}(l,d,f,r);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=c}}))},destroy(t){Vi(t)}};function Wi(t,e,n){const r=function(t){const e=t.options,n=e.fill;let r=P(n&&n.target,n);return void 0===r&&(r=!!e.backgroundColor),!1!==r&&null!==r&&(!0===r?"origin":r)}(t);if(M(r))return!isNaN(r.value)&&r;let i=parseFloat(r);return E(i)&&Math.floor(i)===i?("-"!==r[0]&&"+"!==r[0]||(i=e+i),!(i===e||i<0||i>=n)&&i):["origin","start","end","stack","shape"].indexOf(r)>=0&&r}class Hi{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:r,y:i,radius:o}=this;return e=e||{start:0,end:$},t.arc(r,i,o,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:r}=this,i=t.angle;return{x:e+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function Ui(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}const $i=t=>"line"===t.type&&!t.hidden;function Yi(t,e,n){const r=[];for(let i=0;i<n.length;i++){const o=n[i],{first:a,last:s,point:l}=qi(o,e,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(t.push(l),!s)break}t.push(...r)}function qi(t,e,n){const r=t.interpolate(e,n);if(!r)return{};const i=r[n],o=t.segments,a=t.points;let s=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],r=a[e.start][n],u=a[e.end][n];if(i>=r&&i<=u){s=i===r,l=i===u;break}}return{first:s,last:l,point:r}}function Xi(t,e){let n=[],r=!1;return S(t)?(r=!0,n=t):n=function(t,e){const{x:n=null,y:r=null}=t||{},i=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Ui(t,e,i);const a=i[t],s=i[e];null!==r?(o.push({x:a.x,y:r}),o.push({x:s.x,y:r})):null!==n&&(o.push({x:n,y:a.y}),o.push({x:n,y:s.y}))})),o}(t,e),n.length?new Oi({points:n,options:{tension:0},_loop:r,_fullLoop:r}):null}function Qi(t,e,n){let r=t[e].fill;const i=[e];let o;if(!n)return r;for(;!1!==r&&-1===i.indexOf(r);){if(!E(r))return r;if(o=t[r],!o)return!1;if(o.visible)return r;i.push(r),r=o.fill}return!1}function Ki(t,e,n){t.beginPath(),e.path(t),t.lineTo(e.last().x,n),t.lineTo(e.first().x,n),t.closePath(),t.clip()}function Zi(t,e,n,r){if(r)return;let i=e[t],o=n[t];return"angle"===t&&(i=ut(i),o=ut(o)),{property:t,start:i,end:o}}function Gi(t,e,n,r){return t&&e?r(t[n],e[n]):t?t[n]:e?e[n]:0}function Ji(t,e,n){const{top:r,bottom:i}=e.chart.chartArea,{property:o,start:a,end:s}=n||{};"x"===o&&(t.beginPath(),t.rect(a,r,s-a,i-r),t.clip())}function to(t,e,n,r){const i=e.interpolate(n,r);i&&t.lineTo(i.x,i.y)}function eo(t,e){const{line:n,target:r,property:i,color:o,scale:a}=e,s=function(t,e,n){const r=t.segments,i=t.points,o=e.points,a=[];for(const t of r){let{start:r,end:s}=t;s=Ui(r,s,i);const l=Zi(n,i[r],i[s],t.loop);if(!e.segments){a.push({source:t,target:l,start:i[r],end:i[s]});continue}const u=gn(e,l);for(const e of u){const r=Zi(n,o[e.start],o[e.end],e.loop),s=pn(t,i,r);for(const t of s)a.push({source:t,target:e,start:{[n]:Gi(l,r,"start",Math.max)},end:{[n]:Gi(l,r,"end",Math.min)}})}}return a}(n,r,i);for(const{source:e,target:l,start:u,end:c}of s){const{style:{backgroundColor:s=o}={}}=e,d=!0!==r;t.save(),t.fillStyle=s,Ji(t,a,d&&Zi(i,u,c)),t.beginPath();const f=!!n.pathSegment(t,e);let h;if(d){f?t.closePath():to(t,r,c,i);const e=!!r.pathSegment(t,l,{move:f,reverse:!0});h=f&&e,h||to(t,r,u,i)}t.closePath(),t.fill(h?"evenodd":"nonzero"),t.restore()}}function no(t,e,n){const r=function(t){const{chart:e,fill:n,line:r}=t;if(E(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{chart:e,scale:n,index:r,line:i}=t,o=[],a=i.segments,s=i.points,l=function(t,e){const n=[],r=t.getSortedVisibleDatasetMetas();for(let t=0;t<r.length;t++){const i=r[t];if(i.index===e)break;$i(i)&&n.unshift(i.dataset)}return n}(e,r);l.push(Xi({x:null,y:n.bottom},i));for(let t=0;t<a.length;t++){const e=a[t];for(let t=e.start;t<=e.end;t++)Yi(o,s[t],l)}return new Oi({points:o,options:{}})}(t);if("shape"===n)return!0;const i=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,r=e.options,i=e.getLabels().length,o=[],a=r.reverse?e.max:e.min,s=r.reverse?e.min:e.max;let l,u,c;if(c="start"===n?a:"end"===n?s:M(n)?n.value:e.getBaseValue(),r.grid.circular)return u=e.getPointPositionForValue(0,a),new Hi({x:u.x,y:u.y,radius:e.getDistanceFromCenterForValue(c)});for(l=0;l<i;++l)o.push(e.getPointPositionForValue(l,c));return o}(t):function(t){const{scale:e={},fill:n}=t;let r,i=null;return"start"===n?i=e.bottom:"end"===n?i=e.top:M(n)?i=e.getPixelForValue(n.value):e.getBasePixel&&(i=e.getBasePixel()),E(i)?(r=e.isHorizontal(),{x:r?i:null,y:r?null:i}):null}(t)}(t);return i instanceof Hi?i:Xi(i,r)}(e),{line:i,scale:o,axis:a}=e,s=i.options,l=s.fill,u=s.backgroundColor,{above:c=u,below:d=u}=l||{};r&&i.points.length&&(oe(t,n),function(t,e){const{line:n,target:r,above:i,below:o,area:a,scale:s}=e,l=n._loop?"angle":e.axis;t.save(),"x"===l&&o!==i&&(Ki(t,r,a.top),eo(t,{line:n,target:r,color:i,scale:s,property:l}),t.restore(),t.save(),Ki(t,r,a.bottom)),eo(t,{line:n,target:r,color:o,scale:s,property:l}),t.restore()}(t,{line:i,target:r,above:c,below:d,area:n,scale:o,axis:a}),ae(t))}var ro={id:"filler",afterDatasetsUpdate(t,e,n){const r=(t.data.datasets||[]).length,i=[];let o,a,s,l;for(a=0;a<r;++a)o=t.getDatasetMeta(a),s=o.dataset,l=null,s&&s.options&&s instanceof Oi&&(l={visible:t.isDatasetVisible(a),index:a,fill:Wi(s,a,r),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:s}),o.$filler=l,i.push(l);for(a=0;a<r;++a)l=i[a],l&&!1!==l.fill&&(l.fill=Qi(i,a,n.propagate))},beforeDraw(t,e,n){const r="beforeDraw"===n.drawTime,i=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;n&&(n.line.updateControlPoints(o,n.axis),r&&no(t.ctx,n,o))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=t.getSortedVisibleDatasetMetas();for(let e=r.length-1;e>=0;--e){const n=r[e].$filler;n&&no(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const r=e.meta.$filler;r&&!1!==r.fill&&"beforeDatasetDraw"===n.drawTime&&no(t.ctx,r,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const io=(t,e)=>{let{boxHeight:n=e,boxWidth:r=e}=t;return t.usePointStyle&&(n=Math.min(n,e),r=Math.min(r,e)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(e,n)}};class oo extends zr{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){const r=this;r.maxWidth=t,r.maxHeight=e,r._margins=n,r.setDimensions(),r.buildLabels(),r.fit()}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=t._margins.left,t.right=t.width):(t.height=t.maxHeight,t.top=t._margins.top,t.bottom=t.height)}buildLabels(){const t=this,e=t.options.labels||{};let n=T(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter((n=>e.filter(n,t.chart.data)))),e.sort&&(n=n.sort(((n,r)=>e.sort(n,r,t.chart.data)))),t.options.reverse&&n.reverse(),t.legendItems=n}fit(){const t=this,{options:e,ctx:n}=t;if(!e.display)return void(t.width=t.height=0);const r=e.labels,i=ve(r.font),o=i.size,a=t._computeTitleHeight(),{boxWidth:s,itemHeight:l}=io(r,o);let u,c;n.font=i.string,t.isHorizontal()?(u=t.maxWidth,c=t._fitRows(a,o,s,l)+10):(c=t.maxHeight,u=t._fitCols(a,o,s,l)+10),t.width=Math.min(u,e.maxWidth||t.maxWidth),t.height=Math.min(c,e.maxHeight||t.maxHeight)}_fitRows(t,e,n,r){const i=this,{ctx:o,maxWidth:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],u=i.lineWidths=[0],c=r+s;let d=t;o.textAlign="left",o.textBaseline="middle";let f=-1,h=-c;return i.legendItems.forEach(((t,i)=>{const p=n+e/2+o.measureText(t.text).width;(0===i||u[u.length-1]+p+2*s>a)&&(d+=c,u[u.length-(i>0?0:1)]=0,h+=c,f++),l[i]={left:0,top:h,row:f,width:p,height:r},u[u.length-1]+=p+s})),d}_fitCols(t,e,n,r){const i=this,{ctx:o,maxHeight:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],u=i.columnSizes=[],c=a-t;let d=s,f=0,h=0,p=0,g=0;return i.legendItems.forEach(((t,i)=>{const a=n+e/2+o.measureText(t.text).width;i>0&&h+r+2*s>c&&(d+=f+s,u.push({width:f,height:h}),p+=f+s,g++,f=h=0),l[i]={left:p,top:h,col:g,width:a,height:r},f=Math.max(f,a),h+=r+s})),d+=f,u.push({width:f,height:h}),d}adjustHitBoxes(){const t=this;if(!t.options.display)return;const e=t._computeTitleHeight(),{legendHitBoxes:n,options:{align:r,labels:{padding:i},rtl:o}}=t,a=un(o,t.left,t.width);if(this.isHorizontal()){let o=0,s=x(r,t.left+i,t.right-t.lineWidths[o]);for(const l of n)o!==l.row&&(o=l.row,s=x(r,t.left+i,t.right-t.lineWidths[o])),l.top+=t.top+e+i,l.left=a.leftForLtr(a.x(s),l.width),s+=l.width+i}else{let o=0,s=x(r,t.top+e+i,t.bottom-t.columnSizes[o].height);for(const l of n)l.col!==o&&(o=l.col,s=x(r,t.top+e+i,t.bottom-t.columnSizes[o].height)),l.top=s,l.left+=t.left+i,l.left=a.leftForLtr(a.x(l.left),l.width),s+=l.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const t=this;if(t.options.display){const e=t.ctx;oe(e,t),t._draw(),ae(e)}}_draw(){const t=this,{options:e,columnSizes:n,lineWidths:r,ctx:i}=t,{align:o,labels:a}=e,s=Gt.color,l=un(e.rtl,t.left,t.width),u=ve(a.font),{color:c,padding:d}=a,f=u.size,h=f/2;let p;t.drawTitle(),i.textAlign=l.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=u.string;const{boxWidth:g,boxHeight:m,itemHeight:b}=io(a,f),y=t.isHorizontal(),v=this._computeTitleHeight();p=y?{x:x(o,t.left+d,t.right-r[0]),y:t.top+d+v,line:0}:{x:t.left+d,y:x(o,t.top+v+d,t.bottom-n[0].height),line:0},cn(t.ctx,e.textDirection);const _=b+d;t.legendItems.forEach(((w,k)=>{i.strokeStyle=w.fontColor||c,i.fillStyle=w.fontColor||c;const S=i.measureText(w.text).width,M=l.textAlign(w.textAlign||(w.textAlign=a.textAlign)),E=g+h+S;let C=p.x,O=p.y;l.setWidth(t.width),y?k>0&&C+E+d>t.right&&(O=p.y+=_,p.line++,C=p.x=x(o,t.left+d,t.right-r[p.line])):k>0&&O+_>t.bottom&&(C=p.x=C+n[p.line].width+d,p.line++,O=p.y=x(o,t.top+v+d,t.bottom-n[p.line].height)),function(t,e,n){if(isNaN(g)||g<=0||isNaN(m)||m<0)return;i.save();const r=P(n.lineWidth,1);if(i.fillStyle=P(n.fillStyle,s),i.lineCap=P(n.lineCap,"butt"),i.lineDashOffset=P(n.lineDashOffset,0),i.lineJoin=P(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=P(n.strokeStyle,s),i.setLineDash(P(n.lineDash,[])),a.usePointStyle){const o={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},a=l.xPlus(t,g/2);re(i,o,a,e+h)}else{const o=e+Math.max((f-m)/2,0),a=l.leftForLtr(t,g),s=be(n.borderRadius);i.beginPath(),Object.values(s).some((t=>0!==t))?de(i,{x:a,y:o,w:g,h:m,radius:s}):i.rect(a,o,g,m),i.fill(),0!==r&&i.stroke()}i.restore()}(l.x(C),O,w),C=((t,e,n,r)=>t===(r?"left":"right")?n:"center"===t?(e+n)/2:e)(M,C+g+h,y?C+E:t.right,e.rtl),function(t,e,n){ue(i,n.text,t,e+b/2,u,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(C),O,w),y?p.x+=E+d:p.y+=_})),dn(t.ctx,e.textDirection)}drawTitle(){const t=this,e=t.options,n=e.title,r=ve(n.font),i=ye(n.padding);if(!n.display)return;const o=un(e.rtl,t.left,t.width),a=t.ctx,s=n.position,l=r.size/2,u=i.top+l;let c,d=t.left,f=t.width;if(this.isHorizontal())f=Math.max(...t.lineWidths),c=t.top+u,d=x(e.align,d,t.right-f);else{const n=t.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=u+x(e.align,t.top,t.bottom-n-e.labels.padding-t._computeTitleHeight())}const h=x(s,d,d+f);a.textAlign=o.textAlign(v(s)),a.textBaseline="middle",a.strokeStyle=n.color,a.fillStyle=n.color,a.font=r.string,ue(a,n.text,h,c,r)}_computeTitleHeight(){const t=this.options.title,e=ve(t.font),n=ye(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){const n=this;let r,i,o;if(t>=n.left&&t<=n.right&&e>=n.top&&e<=n.bottom)for(o=n.legendHitBoxes,r=0;r<o.length;++r)if(i=o[r],t>=i.left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return n.legendItems[r];return null}handleEvent(t){const e=this,n=e.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,n))return;const r=e._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const a=e._hoveredItem,s=(o=r,null!==(i=a)&&null!==o&&i.datasetIndex===o.datasetIndex&&i.index===o.index);a&&!s&&T(n.onLeave,[t,a,e],e),e._hoveredItem=r,r&&!s&&T(n.onHover,[t,r,e],e)}else r&&T(n.onClick,[t,r,e],e);var i,o}}var ao={id:"legend",_element:oo,start(t,e,n){const r=t.legend=new oo({ctx:t.ctx,options:n,chart:t});vr.configure(t,r,n),vr.addBox(t,r)},stop(t){vr.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const r=t.legend;vr.configure(t,r,n),r.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const r=e.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),e.hidden=!0):(i.show(r),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:r,textAlign:i,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(n?0:void 0),s=ye(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:r||a.pointStyle,rotation:a.rotation,textAlign:i||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class so extends zr{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this,r=n.options;if(n.left=0,n.top=0,!r.display)return void(n.width=n.height=n.right=n.bottom=0);n.width=n.right=t,n.height=n.bottom=e;const i=S(r.text)?r.text.length:1;n._padding=ye(r.padding);const o=i*ve(r.font).lineHeight+n._padding.height;n.isHorizontal()?n.height=o:n.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:r,right:i,options:o}=this,a=o.align;let s,l,u,c=0;return this.isHorizontal()?(l=x(a,n,i),u=e+t,s=i-n):("left"===o.position?(l=n+t,u=x(a,r,e),c=-.5*U):(l=i-t,u=x(a,e,r),c=.5*U),s=r-e),{titleX:l,titleY:u,maxWidth:s,rotation:c}}draw(){const t=this,e=t.ctx,n=t.options;if(!n.display)return;const r=ve(n.font),i=r.lineHeight/2+t._padding.top,{titleX:o,titleY:a,maxWidth:s,rotation:l}=t._drawArgs(i);ue(e,n.text,0,0,r,{color:n.color,maxWidth:s,rotation:l,textAlign:v(n.align),textBaseline:"middle",translation:[o,a]})}}var lo={id:"title",_element:so,start(t,e,n){!function(t,e){const n=new so({ctx:t.ctx,options:e,chart:t});vr.configure(t,n,e),vr.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;vr.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const r=t.titleBlock;vr.configure(t,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const uo=new WeakMap;var co={id:"subtitle",start(t,e,n){const r=new so({ctx:t.ctx,options:n,chart:t});vr.configure(t,r,n),vr.addBox(t,r),uo.set(t,r)},stop(t){vr.removeBox(t,uo.get(t)),uo.delete(t)},beforeUpdate(t,e,n){const r=uo.get(t);vr.configure(t,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const fo={average(t){if(!t.length)return!1;let e,n,r=0,i=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();r+=t.x,i+=t.y,++o}}return{x:r/o,y:i/o}},nearest(t,e){if(!t.length)return!1;let n,r,i,o=e.x,a=e.y,s=Number.POSITIVE_INFINITY;for(n=0,r=t.length;n<r;++n){const r=t[n].element;if(r&&r.hasValue()){const t=st(e,r.getCenterPoint());t<s&&(s=t,i=r)}}if(i){const t=i.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function ho(t,e){return e&&(S(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function po(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function go(t,e){const{element:n,datasetIndex:r,index:i}=e,o=t.getDatasetMeta(r).controller,{label:a,value:s}=o.getLabelAndValue(i);return{chart:t,label:a,parsed:o.getParsed(i),raw:t.data.datasets[r].data[i],formattedValue:s,dataset:o.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function mo(t,e){const n=t._chart.ctx,{body:r,footer:i,title:o}=t,{boxWidth:a,boxHeight:s}=e,l=ve(e.bodyFont),u=ve(e.titleFont),c=ve(e.footerFont),d=o.length,f=i.length,h=r.length,p=ye(e.padding);let g=p.height,m=0,b=r.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*u.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(g+=h*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-h)*l.lineHeight+(b-1)*e.bodySpacing),f&&(g+=e.footerMarginTop+f*c.lineHeight+(f-1)*e.footerSpacing);let y=0;const v=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=u.string,D(t.title,v),n.font=l.string,D(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?a+2:0,D(r,(t=>{D(t.before,v),D(t.lines,v),D(t.after,v)})),y=0,n.font=c.string,D(t.footer,v),n.restore(),m+=p.width,{width:m,height:g}}function bo(t,e,n,r){const{x:i,width:o}=n,{width:a,chartArea:{left:s,right:l}}=t;let u="center";return"center"===r?u=i<=(s+l)/2?"left":"right":i<=o/2?u="left":i>=a-o/2&&(u="right"),function(t,e,n,r){const{x:i,width:o}=r,a=n.caretSize+n.caretPadding;return"left"===t&&i+o+a>e.width||"right"===t&&i-o-a<0||void 0}(u,t,e,n)&&(u="center"),u}function yo(t,e,n){const r=e.yAlign||function(t,e){const{y:n,height:r}=e;return n<r/2?"top":n>t.height-r/2?"bottom":"center"}(t,n);return{xAlign:e.xAlign||bo(t,e,n,r),yAlign:r}}function vo(t,e,n,r){const{caretSize:i,caretPadding:o,cornerRadius:a}=t,{xAlign:s,yAlign:l}=n,u=i+o,c=a+o;let d=function(t,e){let{x:n,width:r}=t;return"right"===e?n-=r:"center"===e&&(n-=r/2),n}(e,s);const f=function(t,e,n){let{y:r,height:i}=t;return"top"===e?r+=n:r-="bottom"===e?i+n:i/2,r}(e,l,u);return"center"===l?"left"===s?d+=u:"right"===s&&(d-=u):"left"===s?d-=c:"right"===s&&(d+=c),{x:dt(d,0,r.width-e.width),y:dt(f,0,r.height-e.height)}}function xo(t,e,n){const r=ye(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-r.right:t.x+r.left}function _o(t){return ho([],po(t))}function wo(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}class ko extends zr{constructor(t){super(),this.opacity=0,this._active=[],this._chart=t._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this,e=t._cachedAnimations;if(e)return e;const n=t._chart,r=t.options.setContext(t.getContext()),i=r.enabled&&n.options.animation&&r.animations,o=new kn(t._chart,i);return i._cacheable&&(t._cachedAnimations=Object.freeze(o)),o}getContext(){const t=this;return t.$context||(t.$context=(e=t._chart.getContext(),n=t,r=t._tooltipItems,Object.assign(Object.create(e),{tooltip:n,tooltipItems:r,type:"tooltip"})));var e,n,r}getTitle(t,e){const n=this,{callbacks:r}=e,i=r.beforeTitle.apply(n,[t]),o=r.title.apply(n,[t]),a=r.afterTitle.apply(n,[t]);let s=[];return s=ho(s,po(i)),s=ho(s,po(o)),s=ho(s,po(a)),s}getBeforeBody(t,e){return _o(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const n=this,{callbacks:r}=e,i=[];return D(t,(t=>{const e={before:[],lines:[],after:[]},o=wo(r,t);ho(e.before,po(o.beforeLabel.call(n,t))),ho(e.lines,o.label.call(n,t)),ho(e.after,po(o.afterLabel.call(n,t))),i.push(e)})),i}getAfterBody(t,e){return _o(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const n=this,{callbacks:r}=e,i=r.beforeFooter.apply(n,[t]),o=r.footer.apply(n,[t]),a=r.afterFooter.apply(n,[t]);let s=[];return s=ho(s,po(i)),s=ho(s,po(o)),s=ho(s,po(a)),s}_createItems(t){const e=this,n=e._active,r=e._chart.data,i=[],o=[],a=[];let s,l,u=[];for(s=0,l=n.length;s<l;++s)u.push(go(e._chart,n[s]));return t.filter&&(u=u.filter(((e,n,i)=>t.filter(e,n,i,r)))),t.itemSort&&(u=u.sort(((e,n)=>t.itemSort(e,n,r)))),D(u,(n=>{const r=wo(t.callbacks,n);i.push(r.labelColor.call(e,n)),o.push(r.labelPointStyle.call(e,n)),a.push(r.labelTextColor.call(e,n))})),e.labelColors=i,e.labelPointStyles=o,e.labelTextColors=a,e.dataPoints=u,u}update(t,e){const n=this,r=n.options.setContext(n.getContext()),i=n._active;let o,a=[];if(i.length){const t=fo[r.position].call(n,i,n._eventPosition);a=n._createItems(r),n.title=n.getTitle(a,r),n.beforeBody=n.getBeforeBody(a,r),n.body=n.getBody(a,r),n.afterBody=n.getAfterBody(a,r),n.footer=n.getFooter(a,r);const e=n._size=mo(n,r),s=Object.assign({},t,e),l=yo(n._chart,r,s),u=vo(r,s,l,n._chart);n.xAlign=l.xAlign,n.yAlign=l.yAlign,o={opacity:1,x:u.x,y:u.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==n.opacity&&(o={opacity:0});n._tooltipItems=a,n.$context=void 0,o&&n._resolveAnimations().update(n,o),t&&r.external&&r.external.call(n,{chart:n._chart,tooltip:n,replay:e})}drawCaret(t,e,n,r){const i=this.getCaretPosition(t,n,r);e.lineTo(i.x1,i.y1),e.lineTo(i.x2,i.y2),e.lineTo(i.x3,i.y3)}getCaretPosition(t,e,n){const{xAlign:r,yAlign:i}=this,{cornerRadius:o,caretSize:a}=n,{x:s,y:l}=t,{width:u,height:c}=e;let d,f,h,p,g,m;return"center"===i?(g=l+c/2,"left"===r?(d=s,f=d-a,p=g+a,m=g-a):(d=s+u,f=d+a,p=g-a,m=g+a),h=d):(f="left"===r?s+o+a:"right"===r?s+u-o-a:this.caretX,"top"===i?(p=l,g=p-a,d=f-a,h=f+a):(p=l+c,g=p+a,d=f+a,h=f-a),m=p),{x1:d,x2:f,x3:h,y1:p,y2:g,y3:m}}drawTitle(t,e,n){const r=this,i=r.title,o=i.length;let a,s,l;if(o){const u=un(n.rtl,r.x,r.width);for(t.x=xo(r,n.titleAlign,n),e.textAlign=u.textAlign(n.titleAlign),e.textBaseline="middle",a=ve(n.titleFont),s=n.titleSpacing,e.fillStyle=n.titleColor,e.font=a.string,l=0;l<o;++l)e.fillText(i[l],u.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+s,l+1===o&&(t.y+=n.titleMarginBottom-s)}}_drawColorBox(t,e,n,r,i){const o=this,a=o.labelColors[n],s=o.labelPointStyles[n],{boxHeight:l,boxWidth:u}=i,c=ve(i.bodyFont),d=xo(o,"left",i),f=r.x(d),h=l<c.lineHeight?(c.lineHeight-l)/2:0,p=e.y+h;if(i.usePointStyle){const e={radius:Math.min(u,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=r.leftForLtr(f,u)+u/2,o=p+l/2;t.strokeStyle=i.multiKeyBackground,t.fillStyle=i.multiKeyBackground,re(t,e,n,o),t.strokeStyle=a.borderColor,t.fillStyle=a.backgroundColor,re(t,e,n,o)}else{t.lineWidth=a.borderWidth||1,t.strokeStyle=a.borderColor,t.setLineDash(a.borderDash||[]),t.lineDashOffset=a.borderDashOffset||0;const e=r.leftForLtr(f,u),n=r.leftForLtr(r.xPlus(f,1),u-2),o=be(a.borderRadius);Object.values(o).some((t=>0!==t))?(t.beginPath(),t.fillStyle=i.multiKeyBackground,de(t,{x:e,y:p,w:u,h:l,radius:o}),t.fill(),t.stroke(),t.fillStyle=a.backgroundColor,t.beginPath(),de(t,{x:n,y:p+1,w:u-2,h:l-2,radius:o}),t.fill()):(t.fillStyle=i.multiKeyBackground,t.fillRect(e,p,u,l),t.strokeRect(e,p,u,l),t.fillStyle=a.backgroundColor,t.fillRect(n,p+1,u-2,l-2))}t.fillStyle=o.labelTextColors[n]}drawBody(t,e,n){const r=this,{body:i}=r,{bodySpacing:o,bodyAlign:a,displayColors:s,boxHeight:l,boxWidth:u}=n,c=ve(n.bodyFont);let d=c.lineHeight,f=0;const h=un(n.rtl,r.x,r.width),p=function(n){e.fillText(n,h.x(t.x+f),t.y+d/2),t.y+=d+o},g=h.textAlign(a);let m,b,y,v,x,_,w;for(e.textAlign=a,e.textBaseline="middle",e.font=c.string,t.x=xo(r,g,n),e.fillStyle=n.bodyColor,D(r.beforeBody,p),f=s&&"right"!==g?"center"===a?u/2+1:u+2:0,v=0,_=i.length;v<_;++v){for(m=i[v],b=r.labelTextColors[v],e.fillStyle=b,D(m.before,p),y=m.lines,s&&y.length&&(r._drawColorBox(e,t,v,h,n),d=Math.max(c.lineHeight,l)),x=0,w=y.length;x<w;++x)p(y[x]),d=c.lineHeight;D(m.after,p)}f=0,d=c.lineHeight,D(r.afterBody,p),t.y-=o}drawFooter(t,e,n){const r=this,i=r.footer,o=i.length;let a,s;if(o){const l=un(n.rtl,r.x,r.width);for(t.x=xo(r,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=l.textAlign(n.footerAlign),e.textBaseline="middle",a=ve(n.footerFont),e.fillStyle=n.footerColor,e.font=a.string,s=0;s<o;++s)e.fillText(i[s],l.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+n.footerSpacing}}drawBackground(t,e,n,r){const{xAlign:i,yAlign:o}=this,{x:a,y:s}=t,{width:l,height:u}=n,c=r.cornerRadius;e.fillStyle=r.backgroundColor,e.strokeStyle=r.borderColor,e.lineWidth=r.borderWidth,e.beginPath(),e.moveTo(a+c,s),"top"===o&&this.drawCaret(t,e,n,r),e.lineTo(a+l-c,s),e.quadraticCurveTo(a+l,s,a+l,s+c),"center"===o&&"right"===i&&this.drawCaret(t,e,n,r),e.lineTo(a+l,s+u-c),e.quadraticCurveTo(a+l,s+u,a+l-c,s+u),"bottom"===o&&this.drawCaret(t,e,n,r),e.lineTo(a+c,s+u),e.quadraticCurveTo(a,s+u,a,s+u-c),"center"===o&&"left"===i&&this.drawCaret(t,e,n,r),e.lineTo(a,s+c),e.quadraticCurveTo(a,s,a+c,s),e.closePath(),e.fill(),r.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this,n=e._chart,r=e.$animations,i=r&&r.x,o=r&&r.y;if(i||o){const r=fo[t.position].call(e,e._active,e._eventPosition);if(!r)return;const a=e._size=mo(e,t),s=Object.assign({},r,e._size),l=yo(n,t,s),u=vo(t,s,l,n);i._to===u.x&&o._to===u.y||(e.xAlign=l.xAlign,e.yAlign=l.yAlign,e.width=a.width,e.height=a.height,e.caretX=r.x,e.caretY=r.y,e._resolveAnimations().update(e,u))}}draw(t){const e=this,n=e.options.setContext(e.getContext());let r=e.opacity;if(!r)return;e._updateAnimationTarget(n);const i={width:e.width,height:e.height},o={x:e.x,y:e.y};r=Math.abs(r)<.001?0:r;const a=ye(n.padding),s=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;n.enabled&&s&&(t.save(),t.globalAlpha=r,e.drawBackground(o,t,i,n),cn(t,n.textDirection),o.y+=a.top,e.drawTitle(o,t,n),e.drawBody(o,t,n),e.drawFooter(o,t,n),dn(t,n.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this,r=n._active,i=t.map((({datasetIndex:t,index:e})=>{const r=n._chart.getDatasetMeta(t);if(!r)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:r.data[e],index:e}})),o=!A(r,i),a=n._positionChanged(i,e);(o||a)&&(n._active=i,n._eventPosition=e,n.update(!0))}handleEvent(t,e){const n=this,r=n.options,i=n._active||[];let o=!1,a=[];"mouseout"!==t.type&&(a=n._chart.getElementsAtEventForMode(t,r.mode,r,e),r.reverse&&a.reverse());const s=n._positionChanged(a,t);return o=e||!A(a,i)||s,o&&(n._active=a,(r.enabled||r.external)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0,e))),o}_positionChanged(t,e){const{caretX:n,caretY:r,options:i}=this,o=fo[i.position].call(this,t,e);return!1!==o&&(n!==o.x||r!==o.y)}}ko.positioners=fo;var So={id:"tooltip",_element:ko,positioners:fo,afterInit(t,e,n){n&&(t.tooltip=new ko({_chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip,n={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",n)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n))},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:_,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(r>0&&e.dataIndex<r)return n[e.dataIndex]}return""},afterTitle:_,beforeBody:_,beforeLabel:_,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return k(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:_,afterBody:_,beforeFooter:_,footer:_,afterFooter:_}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Mo=Object.freeze({__proto__:null,Decimation:ji,Filler:ro,Legend:ao,SubTitle:co,Title:lo,Tooltip:So});class Eo extends $r{constructor(t){super(t),this._startValue=void 0,this._valueRange=0}parse(t,e){if(k(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:dt(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n){const r=t.indexOf(e);return-1===r?((t,e,n)=>"string"==typeof e?t.push(e)-1:isNaN(e)?null:n)(t,e,n):r!==t.lastIndexOf(e)?n:r}(n,t,P(e,t)),n.length-1)}determineDataLimits(){const t=this,{minDefined:e,maxDefined:n}=t.getUserBounds();let{min:r,max:i}=t.getMinMax(!0);"ticks"===t.options.bounds&&(e||(r=0),n||(i=t.getLabels().length-1)),t.min=r,t.max=i}buildTicks(){const t=this,e=t.min,n=t.max,r=t.options.offset,i=[];let o=t.getLabels();o=0===e&&n===o.length-1?o:o.slice(e,n+1),t._valueRange=Math.max(o.length-(r?0:1),1),t._startValue=t.min-(r?.5:0);for(let t=e;t<=n;t++)i.push({value:t});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){const t=this;super.configure(),t.isHorizontal()||(t._reversePixels=!t._reversePixels)}getPixelForValue(t){const e=this;return"number"!=typeof t&&(t=e.parse(t)),null===t?NaN:e.getPixelForDecimal((t-e._startValue)/e._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){const e=this;return Math.round(e._startValue+e.getDecimalForPixel(t)*e._valueRange)}getBasePixel(){return this.bottom}}function Co(t,e,{horizontal:n,minRotation:r}){const i=it(r),o=(n?Math.sin(i):Math.cos(i))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}Eo.id="category",Eo.defaults={ticks:{callback:Eo.prototype.getLabelForValue}};class Po extends $r{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return k(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const t=this,{beginAtZero:e}=t.options,{minDefined:n,maxDefined:r}=t.getUserBounds();let{min:i,max:o}=t;const a=t=>i=n?i:t,s=t=>o=r?o:t;if(e){const t=J(i),e=J(o);t<0&&e<0?s(0):t>0&&e>0&&a(0)}if(i===o){let t=1;(o>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*o)),s(o+t),e||a(i-t)}t.min=i,t.max=o}getTickLimit(){const t=this,e=t.options.ticks;let n,{maxTicksLimit:r,stepSize:i}=e;return i?n=Math.ceil(t.max/i)-Math.floor(t.min/i)+1:(n=t.computeTickLimit(),r=r||11),r&&(n=Math.min(r,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this,e=t.options,n=e.ticks;let r=t.getTickLimit();r=Math.max(2,r);const i=function(t,e){const n=[],{bounds:r,step:i,min:o,max:a,precision:s,count:l,maxTicks:u,maxDigits:c,includeBounds:d}=t,f=i||1,h=u-1,{min:p,max:g}=e,m=!k(o),b=!k(a),y=!k(l),v=(g-p)/(c+1);let x,_,w,S,M=tt((g-p)/h/f)*f;if(M<1e-14&&!m&&!b)return[{value:p},{value:g}];S=Math.ceil(g/M)-Math.floor(p/M),S>h&&(M=tt(S*M/h/f)*f),k(s)||(x=Math.pow(10,s),M=Math.ceil(M*x)/x),"ticks"===r?(_=Math.floor(p/M)*M,w=Math.ceil(g/M)*M):(_=p,w=g),m&&b&&i&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((a-o)/i,M/1e3)?(S=Math.round(Math.min((a-o)/M,u)),M=(a-o)/S,_=o,w=a):y?(_=m?o:_,w=b?a:w,S=l-1,M=(w-_)/S):(S=(w-_)/M,S=nt(S,Math.round(S),M/1e3)?Math.round(S):Math.ceil(S));const E=Math.max(at(M),at(_));x=Math.pow(10,k(s)?E:s),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let C=0;for(m&&(d&&_!==o?(n.push({value:o}),_<o&&C++,nt(Math.round((_+C*M)*x)/x,o,Co(o,v,t))&&C++):_<o&&C++);C<S;++C)n.push({value:Math.round((_+C*M)*x)/x});return b&&d&&w!==a?nt(n[n.length-1].value,a,Co(a,v,t))?n[n.length-1].value=a:n.push({value:a}):b&&w!==a||n.push({value:w}),n}({maxTicks:r,bounds:e.bounds,min:e.min,max:e.max,precision:n.precision,step:n.stepSize,count:n.count,maxDigits:t._maxDigits(),horizontal:t.isHorizontal(),minRotation:n.minRotation||0,includeBounds:!1!==n.includeBounds},t._range||t);return"ticks"===e.bounds&&rt(i,t,"value"),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),i}configure(){const t=this,e=t.ticks;let n=t.min,r=t.max;if(super.configure(),t.options.offset&&e.length){const t=(r-n)/Math.max(e.length-1,1)/2;n-=t,r+=t}t._startValue=n,t._endValue=r,t._valueRange=r-n}getLabelForValue(t){return ln(t,this.chart.options.locale)}}class Oo extends Po{determineDataLimits(){const t=this,{min:e,max:n}=t.getMinMax(!0);t.min=E(e)?e:0,t.max=E(n)?n:1,t.handleTickRangeOptions()}computeTickLimit(){const t=this,e=t.isHorizontal(),n=e?t.width:t.height,r=it(t.options.ticks.minRotation),i=(e?Math.sin(r):Math.cos(r))||.001,o=t._resolveTickFontOptions(0);return Math.ceil(n/Math.min(40,o.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function To(t){return 1==t/Math.pow(10,Math.floor(G(t)))}Oo.id="linear",Oo.defaults={ticks:{callback:Ir.formatters.numeric}};class Do extends $r{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=Po.prototype.parse.apply(this,[t,e]);if(0!==n)return E(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const t=this,{min:e,max:n}=t.getMinMax(!0);t.min=E(e)?Math.max(0,e):null,t.max=E(n)?Math.max(0,n):null,t.options.beginAtZero&&(t._zero=!0),t.handleTickRangeOptions()}handleTickRangeOptions(){const t=this,{minDefined:e,maxDefined:n}=t.getUserBounds();let r=t.min,i=t.max;const o=t=>r=e?r:t,a=t=>i=n?i:t,s=(t,e)=>Math.pow(10,Math.floor(G(t))+e);r===i&&(r<=0?(o(1),a(10)):(o(s(r,-1)),a(s(i,1)))),r<=0&&o(s(i,-1)),i<=0&&a(s(r,1)),t._zero&&t.min!==t._suggestedMin&&r===s(t.min,0)&&o(s(r,-1)),t.min=r,t.max=i}buildTicks(){const t=this,e=t.options,n=function(t,e){const n=Math.floor(G(e.max)),r=Math.ceil(e.max/Math.pow(10,n)),i=[];let o=C(t.min,Math.pow(10,Math.floor(G(e.min)))),a=Math.floor(G(o)),s=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{i.push({value:o,major:To(o)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),o=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<r);const u=C(t.max,o);return i.push({value:u,major:To(o)}),i}({min:t._userMin,max:t._userMax},t);return"ticks"===e.bounds&&rt(n,t,"value"),e.reverse?(n.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n}getLabelForValue(t){return void 0===t?"0":ln(t,this.chart.options.locale)}configure(){const t=this,e=t.min;super.configure(),t._startValue=G(e),t._valueRange=G(t.max)-G(e)}getPixelForValue(t){const e=this;return void 0!==t&&0!==t||(t=e.min),null===t||isNaN(t)?NaN:e.getPixelForDecimal(t===e.min?0:(G(t)-e._startValue)/e._valueRange)}getValueForPixel(t){const e=this,n=e.getDecimalForPixel(t);return Math.pow(10,e._startValue+n*e._valueRange)}}function Ao(t){const e=t.ticks;if(e.display&&t.display){const t=ye(e.backdropPadding);return P(e.font&&e.font.size,Gt.font.size)+t.height}return 0}function Lo(t,e,n,r,i){return t===r||t===i?{start:e-n/2,end:e+n/2}:t<r||t>i?{start:e-n,end:e}:{start:e,end:e+n}}function Ro(t){return 0===t||180===t?"center":t<180?"left":"right"}function zo(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function No(t,e,n,r){const{ctx:i}=t;if(n)i.arc(t.xCenter,t.yCenter,e,0,$);else{let n=t.getPointPosition(0,e);i.moveTo(n.x,n.y);for(let o=1;o<r;o++)n=t.getPointPosition(o,e),i.lineTo(n.x,n.y)}}function Io(t){return et(t)?t:0}Do.id="logarithmic",Do.defaults={ticks:{callback:Ir.formatters.logarithmic,major:{enabled:!0}}};class Fo extends Po{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Ao(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2}determineDataLimits(){const t=this,{min:e,max:n}=t.getMinMax(!1);t.min=E(e)&&!isNaN(e)?e:0,t.max=E(n)&&!isNaN(n)?n:0,t.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Ao(this.options))}generateTickLabels(t){const e=this;Po.prototype.generateTickLabels.call(e,t),e._pointLabels=e.getLabels().map(((t,n)=>{const r=T(e.options.pointLabels.callback,[t,n],e);return r||0===r?r:""}))}fit(){const t=this,e=t.options;e.display&&e.pointLabels.display?function(t){const e={l:0,r:t.width,t:0,b:t.height-t.paddingTop},n={},r=[],i=[],o=t.getLabels().length;for(let u=0;u<o;u++){const o=t.options.pointLabels.setContext(t.getPointLabelContext(u));i[u]=o.padding;const c=t.getPointPosition(u,t.drawingArea+i[u]),d=ve(o.font),f=(a=t.ctx,s=d,l=S(l=t._pointLabels[u])?l:[l],{w:te(a,s.string,l),h:l.length*s.lineHeight});r[u]=f;const h=t.getIndexAngle(u),p=ot(h),g=Lo(p,c.x,f.w,0,180),m=Lo(p,c.y,f.h,90,270);g.start<e.l&&(e.l=g.start,n.l=h),g.end>e.r&&(e.r=g.end,n.r=h),m.start<e.t&&(e.t=m.start,n.t=h),m.end>e.b&&(e.b=m.end,n.b=h)}var a,s,l;t._setReductions(t.drawingArea,e,n),t._pointLabelItems=function(t,e,n){const r=[],i=t.getLabels().length,o=t.options,a=Ao(o),s=t.getDistanceFromCenterForValue(o.ticks.reverse?t.min:t.max);for(let o=0;o<i;o++){const i=0===o?a/2:0,d=t.getPointPosition(o,s+i+n[o]),f=ot(t.getIndexAngle(o)),h=e[o],p=zo(d.y,h.h,f),g=Ro(f),m=(l=d.x,u=h.w,"right"===(c=g)?l-=u:"center"===c&&(l-=u/2),l);r.push({x:d.x,y:p,textAlign:g,left:m,top:p,right:m+h.w,bottom:p+h.h})}var l,u,c;return r}(t,r,i)}(t):t.setCenterPoint(0,0,0,0)}_setReductions(t,e,n){const r=this;let i=e.l/Math.sin(n.l),o=Math.max(e.r-r.width,0)/Math.sin(n.r),a=-e.t/Math.cos(n.t),s=-Math.max(e.b-(r.height-r.paddingTop),0)/Math.cos(n.b);i=Io(i),o=Io(o),a=Io(a),s=Io(s),r.drawingArea=Math.max(t/2,Math.min(Math.floor(t-(i+o)/2),Math.floor(t-(a+s)/2))),r.setCenterPoint(i,o,a,s)}setCenterPoint(t,e,n,r){const i=this,o=i.width-e-i.drawingArea,a=t+i.drawingArea,s=n+i.drawingArea,l=i.height-i.paddingTop-r-i.drawingArea;i.xCenter=Math.floor((a+o)/2+i.left),i.yCenter=Math.floor((s+l)/2+i.top+i.paddingTop)}getIndexAngle(t){return ut(t*($/this.getLabels().length)+it(this.options.startAngle||0))}getDistanceFromCenterForValue(t){const e=this;if(k(t))return NaN;const n=e.drawingArea/(e.max-e.min);return e.options.reverse?(e.max-t)*n:(t-e.min)*n}getValueForDistanceFromCenter(t){if(k(t))return NaN;const e=this,n=t/(e.drawingArea/(e.max-e.min));return e.options.reverse?e.max-n:e.min+n}getPointLabelContext(t){const e=this,n=e._pointLabels||[];if(t>=0&&t<n.length){const r=n[t];return function(t,e,n){return Object.assign(Object.create(t),{label:n,index:e,type:"pointLabel"})}(e.getContext(),t,r)}}getPointPosition(t,e){const n=this,r=n.getIndexAngle(t)-Q;return{x:Math.cos(r)*e+n.xCenter,y:Math.sin(r)*e+n.yCenter,angle:r}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:r,bottom:i}=this._pointLabelItems[t];return{left:e,top:n,right:r,bottom:i}}drawBackground(){const t=this,{backgroundColor:e,grid:{circular:n}}=t.options;if(e){const r=t.ctx;r.save(),r.beginPath(),No(t,t.getDistanceFromCenterForValue(t._endValue),n,t.getLabels().length),r.closePath(),r.fillStyle=e,r.fill(),r.restore()}}drawGrid(){const t=this,e=t.ctx,n=t.options,{angleLines:r,grid:i}=n,o=t.getLabels().length;let a,s,l;if(n.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:r}}=t;for(let i=e-1;i>=0;i--){const e=r.setContext(t.getPointLabelContext(i)),o=ve(e.font),{x:a,y:s,textAlign:l,left:u,top:c,right:d,bottom:f}=t._pointLabelItems[i],{backdropColor:h}=e;if(!k(h)){const t=ye(e.backdropPadding);n.fillStyle=h,n.fillRect(u-t.left,c-t.top,d-u+t.width,f-c+t.height)}ue(n,t._pointLabels[i],a,s+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(t,o),i.display&&t.ticks.forEach(((e,n)=>{if(0!==n){s=t.getDistanceFromCenterForValue(e.value);const r=i.setContext(t.getContext(n-1));!function(t,e,n,r){const i=t.ctx,o=e.circular,{color:a,lineWidth:s}=e;!o&&!r||!a||!s||n<0||(i.save(),i.strokeStyle=a,i.lineWidth=s,i.setLineDash(e.borderDash),i.lineDashOffset=e.borderDashOffset,i.beginPath(),No(t,n,o,r),i.closePath(),i.stroke(),i.restore())}(t,r,s,o)}})),r.display){for(e.save(),a=t.getLabels().length-1;a>=0;a--){const i=r.setContext(t.getPointLabelContext(a)),{color:o,lineWidth:u}=i;u&&o&&(e.lineWidth=u,e.strokeStyle=o,e.setLineDash(i.borderDash),e.lineDashOffset=i.borderDashOffset,s=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),l=t.getPointPosition(a,s),e.beginPath(),e.moveTo(t.xCenter,t.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const t=this,e=t.ctx,n=t.options,r=n.ticks;if(!r.display)return;const i=t.getIndexAngle(0);let o,a;e.save(),e.translate(t.xCenter,t.yCenter),e.rotate(i),e.textAlign="center",e.textBaseline="middle",t.ticks.forEach(((i,s)=>{if(0===s&&!n.reverse)return;const l=r.setContext(t.getContext(s)),u=ve(l.font);if(o=t.getDistanceFromCenterForValue(t.ticks[s].value),l.showLabelBackdrop){e.font=u.string,a=e.measureText(i.label).width,e.fillStyle=l.backdropColor;const t=ye(l.backdropPadding);e.fillRect(-a/2-t.left,-o-u.size/2-t.top,a+t.width,u.size+t.height)}ue(e,i.label,0,-o,u,{color:l.color})})),e.restore()}drawTitle(){}}Fo.id="radialLinear",Fo.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ir.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5}},Fo.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Fo.descriptors={angleLines:{_fallback:"grid"}};const Bo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Vo=Object.keys(Bo);function jo(t,e){return t-e}function Wo(t,e){if(k(e))return null;const n=t._adapter,{parser:r,round:i,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof r&&(a=r(a)),E(a)||(a="string"==typeof r?n.parse(a,r):n.parse(a)),null===a?null:(i&&(a="week"!==i||!et(o)&&!0!==o?n.startOf(a,i):n.startOf(a,"isoWeek",o)),+a)}function Ho(t,e,n,r){const i=Vo.length;for(let o=Vo.indexOf(t);o<i-1;++o){const t=Bo[Vo[o]],i=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(i*t.size))<=r)return Vo[o]}return Vo[i-1]}function Uo(t,e,n){if(n){if(n.length){const{lo:r,hi:i}=_e(n,e);t[n[r]>=e?n[r]:n[i]]=!0}}else t[e]=!0}function $o(t,e,n){const r=[],i={},o=e.length;let a,s;for(a=0;a<o;++a)s=e[a],i[s]=a,r.push({value:s,major:!1});return 0!==o&&n?function(t,e,n,r){const i=t._adapter,o=+i.startOf(e[0].value,r),a=e[e.length-1].value;let s,l;for(s=o;s<=a;s=+i.add(s,1,r))l=n[s],l>=0&&(e[l].major=!0);return e}(t,r,i,n):r}class Yo extends $r{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const n=t.time||(t.time={}),r=this._adapter=new tr._date(t.adapters.date);I(n.displayFormats,r.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Wo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this,e=t.options,n=t._adapter,r=e.time.unit||"day";let{min:i,max:o,minDefined:a,maxDefined:s}=t.getUserBounds();function l(t){a||isNaN(t.min)||(i=Math.min(i,t.min)),s||isNaN(t.max)||(o=Math.max(o,t.max))}a&&s||(l(t._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(t.getMinMax(!1))),i=E(i)&&!isNaN(i)?i:+n.startOf(Date.now(),r),o=E(o)&&!isNaN(o)?o:+n.endOf(Date.now(),r)+1,t.min=Math.min(i,o-1),t.max=Math.max(i+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this,e=t.options,n=e.time,r=e.ticks,i="labels"===r.source?t.getLabelTimestamps():t._generate();"ticks"===e.bounds&&i.length&&(t.min=t._userMin||i[0],t.max=t._userMax||i[i.length-1]);const o=t.min,a=function(t,e,n){let r=0,i=t.length;for(;r<i&&t[r]<e;)r++;for(;i>r&&t[i-1]>n;)i--;return r>0||i<t.length?t.slice(r,i):t}(i,o,t.max);return t._unit=n.unit||(r.autoSkip?Ho(n.minUnit,t.min,t.max,t._getLabelCapacity(o)):function(t,e,n,r,i){for(let o=Vo.length-1;o>=Vo.indexOf(n);o--){const n=Vo[o];if(Bo[n].common&&t._adapter.diff(i,r,n)>=e-1)return n}return Vo[n?Vo.indexOf(n):0]}(t,a.length,n.minUnit,t.min,t.max)),t._majorUnit=r.major.enabled&&"year"!==t._unit?function(t){for(let e=Vo.indexOf(t)+1,n=Vo.length;e<n;++e)if(Bo[Vo[e]].common)return Vo[e]}(t._unit):void 0,t.initOffsets(i),e.reverse&&a.reverse(),$o(t,a,t._majorUnit)}initOffsets(t){const e=this;let n,r,i=0,o=0;e.options.offset&&t.length&&(n=e.getDecimalForValue(t[0]),i=1===t.length?1-n:(e.getDecimalForValue(t[1])-n)/2,r=e.getDecimalForValue(t[t.length-1]),o=1===t.length?r:(r-e.getDecimalForValue(t[t.length-2]))/2);const a=t.length<3?.5:.25;i=dt(i,0,a),o=dt(o,0,a),e._offsets={start:i,end:o,factor:1/(i+1+o)}}_generate(){const t=this,e=t._adapter,n=t.min,r=t.max,i=t.options,o=i.time,a=o.unit||Ho(o.minUnit,n,r,t._getLabelCapacity(n)),s=P(o.stepSize,1),l="week"===a&&o.isoWeekday,u=et(l)||!0===l,c={};let d,f,h=n;if(u&&(h=+e.startOf(h,"isoWeek",l)),h=+e.startOf(h,u?"day":a),e.diff(r,n,a)>1e5*s)throw new Error(n+" and "+r+" are too far apart with stepSize of "+s+" "+a);const p="data"===i.ticks.source&&t.getDataTimestamps();for(d=h,f=0;d<r;d=+e.add(d,s,a),f++)Uo(c,d,p);return d!==r&&"ticks"!==i.bounds&&1!==f||Uo(c,d,p),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,r){const i=this,o=i.options,a=o.time.displayFormats,s=i._unit,l=i._majorUnit,u=s&&a[s],c=l&&a[l],d=n[e],f=l&&c&&d&&d.major,h=i._adapter.format(t,r||(f?c:u)),p=o.ticks.callback;return p?T(p,[h,e,n],i):h}generateTickLabels(t){let e,n,r;for(e=0,n=t.length;e<n;++e)r=t[e],r.label=this._tickFormatFunction(r.value,e,t)}getDecimalForValue(t){const e=this;return null===t?NaN:(t-e.min)/(e.max-e.min)}getPixelForValue(t){const e=this,n=e._offsets,r=e.getDecimalForValue(t);return e.getPixelForDecimal((n.start+r)*n.factor)}getValueForPixel(t){const e=this,n=e._offsets,r=e.getDecimalForPixel(t)/n.factor-n.end;return e.min+r*(e.max-e.min)}_getLabelSize(t){const e=this,n=e.options.ticks,r=e.ctx.measureText(t).width,i=it(e.isHorizontal()?n.maxRotation:n.minRotation),o=Math.cos(i),a=Math.sin(i),s=e._resolveTickFontOptions(0).size;return{w:r*o+s*a,h:r*a+s*o}}_getLabelCapacity(t){const e=this,n=e.options.time,r=n.displayFormats,i=r[n.unit]||r.millisecond,o=e._tickFormatFunction(t,0,$o(e,[t],e._majorUnit),i),a=e._getLabelSize(o),s=Math.floor(e.isHorizontal()?e.width/a.w:e.height/a.h)-1;return s>0?s:1}getDataTimestamps(){const t=this;let e,n,r=t._cache.data||[];if(r.length)return r;const i=t.getMatchingVisibleMetas();if(t._normalized&&i.length)return t._cache.data=i[0].controller.getAllParsedValues(t);for(e=0,n=i.length;e<n;++e)r=r.concat(i[e].controller.getAllParsedValues(t));return t._cache.data=t.normalize(r)}getLabelTimestamps(){const t=this,e=t._cache.labels||[];let n,r;if(e.length)return e;const i=t.getLabels();for(n=0,r=i.length;n<r;++n)e.push(Wo(t,i[n]));return t._cache.labels=t._normalized?e:t.normalize(e)}normalize(t){return Ee(t.sort(jo))}}function qo(t,e,n){let r,i,o,a,s=0,l=t.length-1;n?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=we(t,"pos",e)),({pos:r,time:o}=t[s]),({pos:i,time:a}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=we(t,"time",e)),({time:r,pos:o}=t[s]),({time:i,pos:a}=t[l]));const u=i-r;return u?o+(a-o)*(e-r)/u:o}Yo.id="time",Yo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Xo extends Yo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this,e=t._getTimestampsForTable(),n=t._table=t.buildLookupTable(e);t._minPos=qo(n,t.min),t._tableRange=qo(n,t.max)-t._minPos,super.initOffsets(e)}buildLookupTable(t){const{min:e,max:n}=this,r=[],i=[];let o,a,s,l,u;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=n&&r.push(l);if(r.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,a=r.length;o<a;++o)u=r[o+1],s=r[o-1],l=r[o],Math.round((u+s)/2)!==l&&i.push({time:l,pos:o/(a-1)});return i}_getTimestampsForTable(){const t=this;let e=t._cache.all||[];if(e.length)return e;const n=t.getDataTimestamps(),r=t.getLabelTimestamps();return e=n.length&&r.length?t.normalize(n.concat(r)):n.length?n:r,e=t._cache.all=e,e}getDecimalForValue(t){return(qo(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this,n=e._offsets,r=e.getDecimalForPixel(t)/n.factor-n.end;return qo(e._table,r*e._tableRange+e._minPos,!0)}}Xo.id="timeseries",Xo.defaults=Yo.defaults;const Qo=[Zn,Fi,Mo,Object.freeze({__proto__:null,CategoryScale:Eo,LinearScale:Oo,LogarithmicScale:Do,RadialLinearScale:Fo,TimeScale:Yo,TimeSeriesScale:Xo})];gi.register(...Qo);const Ko=gi;function Zo(){}function Go(t){return null==t?Zo:function(){return this.querySelector(t)}}function Jo(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function ta(){return[]}function ea(t){return null==t?ta:function(){return this.querySelectorAll(t)}}function na(t){return function(){return this.matches(t)}}function ra(t){return function(e){return e.matches(t)}}var ia=Array.prototype.find;function oa(){return this.firstElementChild}var aa=Array.prototype.filter;function sa(){return Array.from(this.children)}function la(t){return new Array(t.length)}function ua(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function ca(t){return function(){return t}}function da(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new ua(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function fa(t,e,n,r,i,o,a){var s,l,u,c=new Map,d=e.length,f=o.length,h=new Array(d);for(s=0;s<d;++s)(l=e[s])&&(h[s]=u=a.call(l,l.__data__,s,e)+"",c.has(u)?i[s]=l:c.set(u,l));for(s=0;s<f;++s)u=a.call(t,o[s],s,o)+"",(l=c.get(u))?(r[s]=l,l.__data__=o[s],c.delete(u)):n[s]=new ua(t,o[s]);for(s=0;s<d;++s)(l=e[s])&&c.get(h[s])===l&&(i[s]=l)}function ha(t){return t.__data__}function pa(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function ga(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}ua.prototype={constructor:ua,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var ma="http://www.w3.org/1999/xhtml";const ba={svg:"http://www.w3.org/2000/svg",xhtml:ma,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function ya(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),ba.hasOwnProperty(e)?{space:ba[e],local:t}:t}function va(t){return function(){this.removeAttribute(t)}}function xa(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _a(t,e){return function(){this.setAttribute(t,e)}}function wa(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ka(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Sa(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function Ma(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Ea(t){return function(){this.style.removeProperty(t)}}function Ca(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Pa(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Oa(t,e){return t.style.getPropertyValue(e)||Ma(t).getComputedStyle(t,null).getPropertyValue(e)}function Ta(t){return function(){delete this[t]}}function Da(t,e){return function(){this[t]=e}}function Aa(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function La(t){return t.trim().split(/^|\s+/)}function Ra(t){return t.classList||new za(t)}function za(t){this._node=t,this._names=La(t.getAttribute("class")||"")}function Na(t,e){for(var n=Ra(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function Ia(t,e){for(var n=Ra(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function Fa(t){return function(){Na(this,t)}}function Ba(t){return function(){Ia(this,t)}}function Va(t,e){return function(){(e.apply(this,arguments)?Na:Ia)(this,t)}}function ja(){this.textContent=""}function Wa(t){return function(){this.textContent=t}}function Ha(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ua(){this.innerHTML=""}function $a(t){return function(){this.innerHTML=t}}function Ya(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function qa(){this.nextSibling&&this.parentNode.appendChild(this)}function Xa(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Qa(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===ma&&e.documentElement.namespaceURI===ma?e.createElement(t):e.createElementNS(n,t)}}function Ka(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Za(t){var e=ya(t);return(e.local?Ka:Qa)(e)}function Ga(){return null}function Ja(){var t=this.parentNode;t&&t.removeChild(this)}function ts(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function es(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ns(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function rs(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function is(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function os(t,e,n){var r=Ma(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function as(t,e){return function(){return os(this,t,e)}}function ss(t,e){return function(){return os(this,t,e.apply(this,arguments))}}za.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var ls=[null];function us(t,e){this._groups=t,this._parents=e}function cs(){return new us([[document.documentElement]],ls)}us.prototype=cs.prototype={constructor:us,select:function(t){"function"!=typeof t&&(t=Go(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),u[c]=a);return new us(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return Jo(t.apply(this,arguments))}}(t):ea(t);for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new us(r,i)},selectChild:function(t){return this.select(null==t?oa:function(t){return function(){return ia.call(this.children,t)}}("function"==typeof t?t:ra(t)))},selectChildren:function(t){return this.selectAll(null==t?sa:function(t){return function(){return aa.call(this.children,t)}}("function"==typeof t?t:ra(t)))},filter:function(t){"function"!=typeof t&&(t=na(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new us(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,ha);var n=e?fa:da,r=this._parents,i=this._groups;"function"!=typeof t&&(t=ca(t));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),u=0;u<o;++u){var c=r[u],d=i[u],f=d.length,h=pa(t.call(c,c&&c.__data__,u,r)),p=h.length,g=s[u]=new Array(p),m=a[u]=new Array(p),b=l[u]=new Array(f);n(c,d,g,m,b,h,e);for(var y,v,x=0,_=0;x<p;++x)if(y=g[x]){for(x>=_&&(_=x+1);!(v=m[_])&&++_<p;);y._next=v||null}}return(a=new us(a,r))._enter=s,a._exit=l,a},enter:function(){return new us(this._enter||this._groups.map(la),this._parents)},exit:function(){return new us(this._exit||this._groups.map(la),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(i=e(i))&&(i=i.selection()),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,i=n.length,o=r.length,a=Math.min(i,o),s=new Array(i),l=0;l<a;++l)for(var u,c=n[l],d=r[l],f=c.length,h=s[l]=new Array(f),p=0;p<f;++p)(u=c[p]||d[p])&&(h[p]=u);for(;l<i;++l)s[l]=n[l];return new us(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=ga);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new us(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=ya(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?xa:va:"function"==typeof e?n.local?Sa:ka:n.local?wa:_a)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ea:"function"==typeof e?Pa:Ca)(t,e,null==n?"":n)):Oa(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Ta:"function"==typeof e?Aa:Da)(t,e)):this.node()[t]},classed:function(t,e){var n=La(t+"");if(arguments.length<2){for(var r=Ra(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Va:e?Fa:Ba)(n,e))},text:function(t){return arguments.length?this.each(null==t?ja:("function"==typeof t?Ha:Wa)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ua:("function"==typeof t?Ya:$a)(t)):this.node().innerHTML},raise:function(){return this.each(qa)},lower:function(){return this.each(Xa)},append:function(t){var e="function"==typeof t?t:Za(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Za(t),r=null==e?Ga:"function"==typeof e?e:Go(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Ja)},clone:function(t){return this.select(t?es:ts)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=ns(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?is:rs,r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?ss:as)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const ds=cs;var fs={value:()=>{}};function hs(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ps(r)}function ps(t){this._=t}function gs(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function ms(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function bs(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=fs,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}ps.prototype=hs.prototype={constructor:ps,on:function(t,e){var n,r=this._,i=gs(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=bs(r[n],t.name,e);else if(null==e)for(n in r)r[n]=bs(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=ms(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new ps(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const ys=hs;var vs,xs,_s=0,ws=0,ks=0,Ss=0,Ms=0,Es=0,Cs="object"==typeof performance&&performance.now?performance:Date,Ps="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Os(){return Ms||(Ps(Ts),Ms=Cs.now()+Es)}function Ts(){Ms=0}function Ds(){this._call=this._time=this._next=null}function As(t,e,n){var r=new Ds;return r.restart(t,e,n),r}function Ls(){Ms=(Ss=Cs.now())+Es,_s=ws=0;try{!function(){Os(),++_s;for(var t,e=vs;e;)(t=Ms-e._time)>=0&&e._call.call(void 0,t),e=e._next;--_s}()}finally{_s=0,function(){for(var t,e,n=vs,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:vs=e);xs=t,zs(r)}(),Ms=0}}function Rs(){var t=Cs.now(),e=t-Ss;e>1e3&&(Es-=e,Ss=t)}function zs(t){_s||(ws&&(ws=clearTimeout(ws)),t-Ms>24?(t<1/0&&(ws=setTimeout(Ls,t-Cs.now()-Es)),ks&&(ks=clearInterval(ks))):(ks||(Ss=Cs.now(),ks=setInterval(Rs,1e3)),_s=1,Ps(Ls)))}function Ns(t,e,n){var r=new Ds;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Ds.prototype=As.prototype={constructor:Ds,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Os():+n)+(null==e?0:+e),this._next||xs===this||(xs?xs._next=this:vs=this,xs=this),this._call=t,this._time=n,zs()},stop:function(){this._call&&(this._call=null,this._time=1/0,zs())}};var Is=ys("start","end","cancel","interrupt"),Fs=[];function Bs(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(l){var u,c,d,f;if(1!==n.state)return s();for(u in i)if((f=i[u]).name===n.name){if(3===f.state)return Ns(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[u]):+u<e&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[u])}if(Ns((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(d=n.tween.length),u=0,c=-1;u<d;++u)(f=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=As((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Is,tween:Fs,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Vs(t,e){var n=Ws(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function js(t,e){var n=Ws(t,e);if(n.state>3)throw new Error("too late; already running");return n}function Ws(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Hs(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Us,$s=180/Math.PI,Ys={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function qs(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*$s,skewX:Math.atan(l)*$s,scaleX:a,scaleY:s}}function Xs(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Hs(t,i)},{i:l-2,x:Hs(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Hs(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Hs(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Hs(t,n)},{i:s-2,x:Hs(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var Qs=Xs((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Ys:qs(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Ks=Xs((function(t){return null==t?Ys:(Us||(Us=document.createElementNS("http://www.w3.org/2000/svg","g")),Us.setAttribute("transform",t),(t=Us.transform.baseVal.consolidate())?qs((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Ys)}),", ",")",")");function Zs(t,e){var n,r;return function(){var i=js(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Gs(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=js(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function Js(t,e,n){var r=t._id;return t.each((function(){var t=js(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Ws(t,r).value[e]}}function tl(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function el(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function nl(){}var rl=.7,il=1/rl,ol="\\s*([+-]?\\d+)\\s*",al="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",sl="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ll=/^#([0-9a-f]{3,8})$/,ul=new RegExp("^rgb\\("+[ol,ol,ol]+"\\)$"),cl=new RegExp("^rgb\\("+[sl,sl,sl]+"\\)$"),dl=new RegExp("^rgba\\("+[ol,ol,ol,al]+"\\)$"),fl=new RegExp("^rgba\\("+[sl,sl,sl,al]+"\\)$"),hl=new RegExp("^hsl\\("+[al,sl,sl]+"\\)$"),pl=new RegExp("^hsla\\("+[al,sl,sl,al]+"\\)$"),gl={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ml(){return this.rgb().formatHex()}function bl(){return this.rgb().formatRgb()}function yl(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ll.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?vl(e):3===n?new kl(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?xl(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?xl(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ul.exec(t))?new kl(e[1],e[2],e[3],1):(e=cl.exec(t))?new kl(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=dl.exec(t))?xl(e[1],e[2],e[3],e[4]):(e=fl.exec(t))?xl(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=hl.exec(t))?Cl(e[1],e[2]/100,e[3]/100,1):(e=pl.exec(t))?Cl(e[1],e[2]/100,e[3]/100,e[4]):gl.hasOwnProperty(t)?vl(gl[t]):"transparent"===t?new kl(NaN,NaN,NaN,0):null}function vl(t){return new kl(t>>16&255,t>>8&255,255&t,1)}function xl(t,e,n,r){return r<=0&&(t=e=n=NaN),new kl(t,e,n,r)}function _l(t){return t instanceof nl||(t=yl(t)),t?new kl((t=t.rgb()).r,t.g,t.b,t.opacity):new kl}function wl(t,e,n,r){return 1===arguments.length?_l(t):new kl(t,e,n,null==r?1:r)}function kl(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Sl(){return"#"+El(this.r)+El(this.g)+El(this.b)}function Ml(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function El(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Cl(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ol(t,e,n,r)}function Pl(t){if(t instanceof Ol)return new Ol(t.h,t.s,t.l,t.opacity);if(t instanceof nl||(t=yl(t)),!t)return new Ol;if(t instanceof Ol)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new Ol(a,s,l,t.opacity)}function Ol(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Tl(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Dl(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}tl(nl,yl,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:ml,formatHex:ml,formatHsl:function(){return Pl(this).formatHsl()},formatRgb:bl,toString:bl}),tl(kl,wl,el(nl,{brighter:function(t){return t=null==t?il:Math.pow(il,t),new kl(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?rl:Math.pow(rl,t),new kl(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Sl,formatHex:Sl,formatRgb:Ml,toString:Ml})),tl(Ol,(function(t,e,n,r){return 1===arguments.length?Pl(t):new Ol(t,e,n,null==r?1:r)}),el(nl,{brighter:function(t){return t=null==t?il:Math.pow(il,t),new Ol(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?rl:Math.pow(rl,t),new Ol(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new kl(Tl(t>=240?t-240:t+120,i,r),Tl(t,i,r),Tl(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Al=t=>()=>t;function Ll(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Al(isNaN(t)?e:t)}const Rl=function t(e){var n=function(t){return 1==(t=+t)?Ll:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Al(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=wl(t)).r,(e=wl(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Ll(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function zl(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=wl(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}zl((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return Dl((n-r/e)*e,a,i,o,s)}})),zl((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return Dl((n-r/e)*e,i,o,a,s)}}));var Nl=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Il=new RegExp(Nl.source,"g");function Fl(t,e){var n,r,i,o=Nl.lastIndex=Il.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Nl.exec(t))&&(r=Il.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Hs(n,r)})),o=Il.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Bl(t,e){var n;return("number"==typeof e?Hs:e instanceof yl?Rl:(n=yl(e))?(e=n,Rl):Fl)(t,e)}function Vl(t){return function(){this.removeAttribute(t)}}function jl(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Wl(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Hl(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function Ul(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function $l(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Yl(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function ql(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Xl(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&ql(t,i)),n}return i._value=e,i}function Ql(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Yl(t,i)),n}return i._value=e,i}function Kl(t,e){return function(){Vs(this,t).delay=+e.apply(this,arguments)}}function Zl(t,e){return e=+e,function(){Vs(this,t).delay=e}}function Gl(t,e){return function(){js(this,t).duration=+e.apply(this,arguments)}}function Jl(t,e){return e=+e,function(){js(this,t).duration=e}}function tu(t,e){if("function"!=typeof e)throw new Error;return function(){js(this,t).ease=e}}function eu(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Vs:js;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var nu=ds.prototype.constructor;function ru(t){return function(){this.style.removeProperty(t)}}function iu(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function ou(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&iu(t,o,n)),r}return o._value=e,o}function au(t){return function(e){this.textContent=t.call(this,e)}}function su(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&au(r)),e}return r._value=t,r}var lu=0;function uu(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function cu(){return++lu}var du=ds.prototype;uu.prototype=function(t){return ds().transition(t)}.prototype={constructor:uu,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Go(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],c=u.length,d=o[a]=new Array(c),f=0;f<c;++f)(s=u[f])&&(l=t.call(s,s.__data__,f,u))&&("__data__"in s&&(l.__data__=s.__data__),d[f]=l,Bs(d[f],e,n,f,d,Ws(s,n)));return new uu(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=ea(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,d=0;d<c;++d)if(l=u[d]){for(var f,h=t.call(l,l.__data__,d,u),p=Ws(l,n),g=0,m=h.length;g<m;++g)(f=h[g])&&Bs(f,e,n,g,h,p);o.push(h),a.push(l)}return new uu(o,a,e,n)},selectChild:du.selectChild,selectChildren:du.selectChildren,filter:function(t){"function"!=typeof t&&(t=na(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new uu(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],d=u.length,f=a[s]=new Array(d),h=0;h<d;++h)(l=u[h]||c[h])&&(f[h]=l);for(;s<r;++s)a[s]=e[s];return new uu(a,this._parents,this._name,this._id)},selection:function(){return new nu(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=cu(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=Ws(a,e);Bs(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new uu(r,this._parents,t,n)},call:du.call,nodes:du.nodes,node:du.node,size:du.size,empty:du.empty,each:du.each,on:function(t,e){var n=this._id;return arguments.length<2?Ws(this.node(),n).on.on(t):this.each(eu(n,t,e))},attr:function(t,e){var n=ya(t),r="transform"===n?Ks:Bl;return this.attrTween(t,"function"==typeof e?(n.local?$l:Ul)(n,r,Js(this,"attr."+t,e)):null==e?(n.local?jl:Vl)(n):(n.local?Hl:Wl)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=ya(t);return this.tween(n,(r.local?Xl:Ql)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Qs:Bl;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=Oa(this,t),a=(this.style.removeProperty(t),Oa(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,ru(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=Oa(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=Oa(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,Js(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=js(this,t),u=l.on,c=null==l.value[a]?o||(o=ru(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=Oa(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,ou(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Js(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,su(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Ws(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?Zs:Gs)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Kl:Zl)(e,t)):Ws(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Gl:Jl)(e,t)):Ws(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(tu(e,t)):Ws(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;js(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=js(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:du[Symbol.iterator]};var fu={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function hu(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}ds.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},ds.prototype.transition=function(t){var e,n;t instanceof uu?(e=t._id,t=t._name):(e=cu(),(n=fu).time=Os(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&Bs(a,t,e,u,s,n||hu(a,e));return new uu(r,this._parents,t,e)};const{abs:pu,max:gu,min:mu}=Math;function bu(t){return{type:t}}["w","e"].map(bu),["n","s"].map(bu),["n","w","e","s","nw","ne","sw","se"].map(bu);var yu={},vu={};function xu(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function _u(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function wu(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function ku(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,l=o<=0,u=!1;function c(){if(l)return vu;if(u)return u=!1,yu;var e,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(e=a)>=o?l=!0:10===(r=t.charCodeAt(a++))?u=!0:13===r&&(u=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(e=a++)))u=!0;else if(13===r)u=!0,10===t.charCodeAt(a)&&++a;else if(r!==n)continue;return t.slice(i,e)}return l=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=c())!==vu;){for(var d=[];r!==yu&&r!==vu;)d.push(r),r=c();e&&null==(d=e(d,s++))||i.push(d)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?(i=(n=t).getUTCHours(),o=n.getUTCMinutes(),a=n.getUTCSeconds(),s=n.getUTCMilliseconds(),isNaN(n)?"Invalid Date":((r=n.getUTCFullYear())<0?"-"+wu(-r,6):r>9999?"+"+wu(r,6):wu(r,4))+"-"+wu(n.getUTCMonth()+1,2)+"-"+wu(n.getUTCDate(),2)+(s?"T"+wu(i,2)+":"+wu(o,2)+":"+wu(a,2)+"."+wu(s,3)+"Z":a?"T"+wu(i,2)+":"+wu(o,2)+":"+wu(a,2)+"Z":o||i?"T"+wu(i,2)+":"+wu(o,2)+"Z":"")):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t;var n,r,i,o,a,s}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=xu(t);return function(r,i){return e(n(r),i,t)}}(t,e):xu(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=_u(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=_u(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var Su=ku(","),Mu=Su.parse,Eu=(Su.parseRows,Su.format,Su.formatBody,Su.formatRows,Su.formatRow,Su.formatValue,ku("\t")),Cu=Eu.parse;function Pu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function Ou(t,e){return fetch(t,e).then(Pu)}function Tu(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Ou(e,n).then((function(e){return t(e,r)}))}}Eu.parseRows,Eu.format,Eu.formatBody,Eu.formatRows,Eu.formatRow,Eu.formatValue;var Du=Tu(Mu);function Au(t,e,n){this.k=t,this.x=e,this.y=n}function Lu(t){return Lu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Lu(t)}function Ru(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function zu(t,e){return zu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},zu(t,e)}function Nu(t,e){if(e&&("object"===Lu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Iu(t)}function Iu(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Fu(t){return Fu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Fu(t)}Tu(Cu),Au.prototype={constructor:Au,scale:function(t){return 1===t?this:new Au(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Au(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Au(1,0,0),Au.prototype;const Bu=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&zu(t,e)}(s,e);var n,r,i,o,a=(i=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Fu(i);if(o){var n=Fu(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Nu(this,t)});function s(e){var n,r,i,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),r=Iu(n=a.call(this,e)),i="chartRef",o=t.createRef(),i in r?Object.defineProperty(r,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[i]=o,n}return n=s,(r=[{key:"componentDidMount",value:function(){var t=this.chartRef.current.getContext("2d"),e=String(this.props.datacol),n=String(this.props.suptitle);Du(this.props.filename).then((function(r){var i=r.map((function(t){return t.countries})),o=r.map((function(t){return+t[e]}));new Ko(t,{type:"bar",options:{plugins:{title:{display:!0,text:n,padding:{top:10,bottom:30}}},responsive:!0,maintainAspectRatio:!0,showScale:!1,legend:{display:!0},scales:{x:{title:{display:!0,text:"Countries",align:"center",padding:10}},y:{title:{display:!0,text:"production average 2000 to 2006 in t (FAO)",align:"center"}}},transitions:{show:{animations:{x:{from:0},y:{from:0}}},hide:{animations:{x:{to:0},y:{to:0}}}}},data:{labels:i,datasets:[{label:"Hide/Unhide chart",data:o,backgroundColor:["rgba(255, 99, 132)","rgba(255, 159, 64)","rgba(255, 205, 86)","rgba(75, 192, 192)","rgba(54, 162, 235)","rgba(153, 102, 255)","rgba(201, 203, 207)","rgba(60, 80, 202)","rgba(230, 50, 100)","rgba(245, 50, 50)"]}]}})})).catch((function(t){throw console.log("ERROR: Missing data"),t}))}},{key:"render",value:function(){return t.createElement("div",null,t.createElement("canvas",{width:this.props.width,height:this.props.height,ref:this.chartRef}))}}])&&Ru(n.prototype,r),s}(t.Component);const Vu=n.p+"images/wheat.jpg",ju=n.p+"csv_files/maize_top_ten.csv",Wu=n.p+"csv_files/rice_top_ten.csv",Hu=n.p+"csv_files/wheat_top_ten.csv";function Uu(t){return Uu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Uu(t)}function $u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Yu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function qu(t,e){return qu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},qu(t,e)}function Xu(t,e){if(e&&("object"===Uu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Qu(t){return Qu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Qu(t)}var Ku=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&qu(t,e)}(s,e);var n,r,i,o,a=(i=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Qu(i);if(o){var n=Qu(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Xu(this,t)});function s(){return $u(this,s),a.apply(this,arguments)}return n=s,(r=[{key:"render",value:function(){var e=1200;return[t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("img",{src:Vu})),t.createElement("p",null,"Photo by ",t.createElement("a",{href:"https://unsplash.com/@erwanhesry?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},"Erwan Hesry")," on ",t.createElement("a",{href:"https://unsplash.com/s/photos/wheat?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},"Unsplash")),t.createElement("div",{id:"title"},"Maize Production"),t.createElement(Bu,{filename:ju,datacol:"MZ_2000",suptitle:"Top 10 countries of maize production average 2000 to 2006 in t (FAO)",width:e,height:600}),t.createElement(Bu,{filename:Wu,datacol:"RI_2000",suptitle:"Top 10 countries of rice production average 2000 to 2006 in t (FAO)",width:e,height:600}),t.createElement(Bu,{filename:Hu,datacol:"WH_2000",suptitle:"Top 10 countries of wheat production average 2000 to 2006 in t (FAO)",width:e,height:600}))]}}])&&Yu(n.prototype,r),s}(t.Component);const Zu=Ku;e.render(t.createElement(Zu,null),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,